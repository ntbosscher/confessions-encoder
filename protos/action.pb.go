// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: action.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action_ActionType int32

const (
	Action_ACTION_TYPE_UNKNOWN               Action_ActionType = 0
	Action_ACTION_TYPE_STAGE_LAYOUT          Action_ActionType = 1
	Action_ACTION_TYPE_MEDIA                 Action_ActionType = 2
	Action_ACTION_TYPE_TIMER                 Action_ActionType = 3
	Action_ACTION_TYPE_COMMUNICATION         Action_ActionType = 4
	Action_ACTION_TYPE_CLEAR                 Action_ActionType = 5
	Action_ACTION_TYPE_PROP                  Action_ActionType = 6
	Action_ACTION_TYPE_MASK                  Action_ActionType = 7
	Action_ACTION_TYPE_MESSAGE               Action_ActionType = 8
	Action_ACTION_TYPE_SOCIAL_MEDIA          Action_ActionType = 9
	Action_ACTION_TYPE_MULTISCREEN           Action_ActionType = 10
	Action_ACTION_TYPE_PRESENTATION_SLIDE    Action_ActionType = 11
	Action_ACTION_TYPE_FOREGROUND_MEDIA      Action_ActionType = 12
	Action_ACTION_TYPE_BACKGROUND_MEDIA      Action_ActionType = 13
	Action_ACTION_TYPE_PRESENTATION_DOCUMENT Action_ActionType = 14
	Action_ACTION_TYPE_PROP_SLIDE            Action_ActionType = 15
	Action_ACTION_TYPE_EXTERNAL_PRESENTATION Action_ActionType = 17
	Action_ACTION_TYPE_AUDIENCE_LOOK         Action_ActionType = 18
	Action_ACTION_TYPE_AUDIO_INPUT           Action_ActionType = 19
	Action_ACTION_TYPE_AUDIO_BIN_PLAYLIST    Action_ActionType = 20
	Action_ACTION_TYPE_MEDIA_BIN_PLAYLIST    Action_ActionType = 21
	Action_ACTION_TYPE_SLIDE_DESTINATION     Action_ActionType = 22
	Action_ACTION_TYPE_MACRO                 Action_ActionType = 23
	Action_ACTION_TYPE_CLEAR_GROUP           Action_ActionType = 24
)

// Enum value maps for Action_ActionType.
var (
	Action_ActionType_name = map[int32]string{
		0:  "ACTION_TYPE_UNKNOWN",
		1:  "ACTION_TYPE_STAGE_LAYOUT",
		2:  "ACTION_TYPE_MEDIA",
		3:  "ACTION_TYPE_TIMER",
		4:  "ACTION_TYPE_COMMUNICATION",
		5:  "ACTION_TYPE_CLEAR",
		6:  "ACTION_TYPE_PROP",
		7:  "ACTION_TYPE_MASK",
		8:  "ACTION_TYPE_MESSAGE",
		9:  "ACTION_TYPE_SOCIAL_MEDIA",
		10: "ACTION_TYPE_MULTISCREEN",
		11: "ACTION_TYPE_PRESENTATION_SLIDE",
		12: "ACTION_TYPE_FOREGROUND_MEDIA",
		13: "ACTION_TYPE_BACKGROUND_MEDIA",
		14: "ACTION_TYPE_PRESENTATION_DOCUMENT",
		15: "ACTION_TYPE_PROP_SLIDE",
		17: "ACTION_TYPE_EXTERNAL_PRESENTATION",
		18: "ACTION_TYPE_AUDIENCE_LOOK",
		19: "ACTION_TYPE_AUDIO_INPUT",
		20: "ACTION_TYPE_AUDIO_BIN_PLAYLIST",
		21: "ACTION_TYPE_MEDIA_BIN_PLAYLIST",
		22: "ACTION_TYPE_SLIDE_DESTINATION",
		23: "ACTION_TYPE_MACRO",
		24: "ACTION_TYPE_CLEAR_GROUP",
	}
	Action_ActionType_value = map[string]int32{
		"ACTION_TYPE_UNKNOWN":               0,
		"ACTION_TYPE_STAGE_LAYOUT":          1,
		"ACTION_TYPE_MEDIA":                 2,
		"ACTION_TYPE_TIMER":                 3,
		"ACTION_TYPE_COMMUNICATION":         4,
		"ACTION_TYPE_CLEAR":                 5,
		"ACTION_TYPE_PROP":                  6,
		"ACTION_TYPE_MASK":                  7,
		"ACTION_TYPE_MESSAGE":               8,
		"ACTION_TYPE_SOCIAL_MEDIA":          9,
		"ACTION_TYPE_MULTISCREEN":           10,
		"ACTION_TYPE_PRESENTATION_SLIDE":    11,
		"ACTION_TYPE_FOREGROUND_MEDIA":      12,
		"ACTION_TYPE_BACKGROUND_MEDIA":      13,
		"ACTION_TYPE_PRESENTATION_DOCUMENT": 14,
		"ACTION_TYPE_PROP_SLIDE":            15,
		"ACTION_TYPE_EXTERNAL_PRESENTATION": 17,
		"ACTION_TYPE_AUDIENCE_LOOK":         18,
		"ACTION_TYPE_AUDIO_INPUT":           19,
		"ACTION_TYPE_AUDIO_BIN_PLAYLIST":    20,
		"ACTION_TYPE_MEDIA_BIN_PLAYLIST":    21,
		"ACTION_TYPE_SLIDE_DESTINATION":     22,
		"ACTION_TYPE_MACRO":                 23,
		"ACTION_TYPE_CLEAR_GROUP":           24,
	}
)

func (x Action_ActionType) Enum() *Action_ActionType {
	p := new(Action_ActionType)
	*p = x
	return p
}

func (x Action_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[0].Descriptor()
}

func (Action_ActionType) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[0]
}

func (x Action_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_ActionType.Descriptor instead.
func (Action_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 0}
}

type Action_OldType_Category int32

const (
	Action_OldType_CATEGORY_UNKNOWN     Action_OldType_Category = 0
	Action_OldType_CATEGORY_MEDIA       Action_OldType_Category = 1
	Action_OldType_CATEGORY_APPLICATION Action_OldType_Category = 2
)

// Enum value maps for Action_OldType_Category.
var (
	Action_OldType_Category_name = map[int32]string{
		0: "CATEGORY_UNKNOWN",
		1: "CATEGORY_MEDIA",
		2: "CATEGORY_APPLICATION",
	}
	Action_OldType_Category_value = map[string]int32{
		"CATEGORY_UNKNOWN":     0,
		"CATEGORY_MEDIA":       1,
		"CATEGORY_APPLICATION": 2,
	}
)

func (x Action_OldType_Category) Enum() *Action_OldType_Category {
	p := new(Action_OldType_Category)
	*p = x
	return p
}

func (x Action_OldType_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_OldType_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[1].Descriptor()
}

func (Action_OldType_Category) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[1]
}

func (x Action_OldType_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_OldType_Category.Descriptor instead.
func (Action_OldType_Category) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Action_BlendModeType_BlendMode int32

const (
	Action_BlendModeType_BLEND_MODE_NORMAL        Action_BlendModeType_BlendMode = 0
	Action_BlendModeType_BLEND_MODE_DISSOLVE      Action_BlendModeType_BlendMode = 1
	Action_BlendModeType_BLEND_MODE_DARKEN        Action_BlendModeType_BlendMode = 2
	Action_BlendModeType_BLEND_MODE_MULTIPLY      Action_BlendModeType_BlendMode = 3
	Action_BlendModeType_BLEND_MODE_COLOR_BURN    Action_BlendModeType_BlendMode = 4
	Action_BlendModeType_BLEND_MODE_LINEAR_BURN   Action_BlendModeType_BlendMode = 5
	Action_BlendModeType_BLEND_MODE_DARKER_COLOR  Action_BlendModeType_BlendMode = 6
	Action_BlendModeType_BLEND_MODE_LIGHTEN       Action_BlendModeType_BlendMode = 7
	Action_BlendModeType_BLEND_MODE_SCREEN        Action_BlendModeType_BlendMode = 8
	Action_BlendModeType_BLEND_MODE_COLOR_DODGE   Action_BlendModeType_BlendMode = 9
	Action_BlendModeType_BLEND_MODE_LINEAR_DODGE  Action_BlendModeType_BlendMode = 10
	Action_BlendModeType_BLEND_MODE_LIGHTER_COLOR Action_BlendModeType_BlendMode = 11
	Action_BlendModeType_BLEND_MODE_OVERLAY       Action_BlendModeType_BlendMode = 12
	Action_BlendModeType_BLEND_MODE_SOFT_LIGHT    Action_BlendModeType_BlendMode = 13
	Action_BlendModeType_BLEND_MODE_HARD_LIGHT    Action_BlendModeType_BlendMode = 14
	Action_BlendModeType_BLEND_MODE_VIVID_LIGHT   Action_BlendModeType_BlendMode = 15
	Action_BlendModeType_BLEND_MODE_LINEAR_LIGHT  Action_BlendModeType_BlendMode = 16
	Action_BlendModeType_BLEND_MODE_PIN_LIGHT     Action_BlendModeType_BlendMode = 17
	Action_BlendModeType_BLEND_MODE_HARD_MIX      Action_BlendModeType_BlendMode = 18
	Action_BlendModeType_BLEND_MODE_DIFFERENCE    Action_BlendModeType_BlendMode = 19
	Action_BlendModeType_BLEND_MODE_EXCLUSION     Action_BlendModeType_BlendMode = 20
	Action_BlendModeType_BLEND_MODE_SUBTRACT      Action_BlendModeType_BlendMode = 21
	Action_BlendModeType_BLEND_MODE_DIVIDE        Action_BlendModeType_BlendMode = 22
	Action_BlendModeType_BLEND_MODE_HUE           Action_BlendModeType_BlendMode = 23
	Action_BlendModeType_BLEND_MODE_SATURATION    Action_BlendModeType_BlendMode = 24
	Action_BlendModeType_BLEND_MODE_COLOR         Action_BlendModeType_BlendMode = 25
	Action_BlendModeType_BLEND_MODE_LUMINOSITY    Action_BlendModeType_BlendMode = 26
)

// Enum value maps for Action_BlendModeType_BlendMode.
var (
	Action_BlendModeType_BlendMode_name = map[int32]string{
		0:  "BLEND_MODE_NORMAL",
		1:  "BLEND_MODE_DISSOLVE",
		2:  "BLEND_MODE_DARKEN",
		3:  "BLEND_MODE_MULTIPLY",
		4:  "BLEND_MODE_COLOR_BURN",
		5:  "BLEND_MODE_LINEAR_BURN",
		6:  "BLEND_MODE_DARKER_COLOR",
		7:  "BLEND_MODE_LIGHTEN",
		8:  "BLEND_MODE_SCREEN",
		9:  "BLEND_MODE_COLOR_DODGE",
		10: "BLEND_MODE_LINEAR_DODGE",
		11: "BLEND_MODE_LIGHTER_COLOR",
		12: "BLEND_MODE_OVERLAY",
		13: "BLEND_MODE_SOFT_LIGHT",
		14: "BLEND_MODE_HARD_LIGHT",
		15: "BLEND_MODE_VIVID_LIGHT",
		16: "BLEND_MODE_LINEAR_LIGHT",
		17: "BLEND_MODE_PIN_LIGHT",
		18: "BLEND_MODE_HARD_MIX",
		19: "BLEND_MODE_DIFFERENCE",
		20: "BLEND_MODE_EXCLUSION",
		21: "BLEND_MODE_SUBTRACT",
		22: "BLEND_MODE_DIVIDE",
		23: "BLEND_MODE_HUE",
		24: "BLEND_MODE_SATURATION",
		25: "BLEND_MODE_COLOR",
		26: "BLEND_MODE_LUMINOSITY",
	}
	Action_BlendModeType_BlendMode_value = map[string]int32{
		"BLEND_MODE_NORMAL":        0,
		"BLEND_MODE_DISSOLVE":      1,
		"BLEND_MODE_DARKEN":        2,
		"BLEND_MODE_MULTIPLY":      3,
		"BLEND_MODE_COLOR_BURN":    4,
		"BLEND_MODE_LINEAR_BURN":   5,
		"BLEND_MODE_DARKER_COLOR":  6,
		"BLEND_MODE_LIGHTEN":       7,
		"BLEND_MODE_SCREEN":        8,
		"BLEND_MODE_COLOR_DODGE":   9,
		"BLEND_MODE_LINEAR_DODGE":  10,
		"BLEND_MODE_LIGHTER_COLOR": 11,
		"BLEND_MODE_OVERLAY":       12,
		"BLEND_MODE_SOFT_LIGHT":    13,
		"BLEND_MODE_HARD_LIGHT":    14,
		"BLEND_MODE_VIVID_LIGHT":   15,
		"BLEND_MODE_LINEAR_LIGHT":  16,
		"BLEND_MODE_PIN_LIGHT":     17,
		"BLEND_MODE_HARD_MIX":      18,
		"BLEND_MODE_DIFFERENCE":    19,
		"BLEND_MODE_EXCLUSION":     20,
		"BLEND_MODE_SUBTRACT":      21,
		"BLEND_MODE_DIVIDE":        22,
		"BLEND_MODE_HUE":           23,
		"BLEND_MODE_SATURATION":    24,
		"BLEND_MODE_COLOR":         25,
		"BLEND_MODE_LUMINOSITY":    26,
	}
)

func (x Action_BlendModeType_BlendMode) Enum() *Action_BlendModeType_BlendMode {
	p := new(Action_BlendModeType_BlendMode)
	*p = x
	return p
}

func (x Action_BlendModeType_BlendMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_BlendModeType_BlendMode) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[2].Descriptor()
}

func (Action_BlendModeType_BlendMode) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[2]
}

func (x Action_BlendModeType_BlendMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_BlendModeType_BlendMode.Descriptor instead.
func (Action_BlendModeType_BlendMode) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 4, 0}
}

type Action_MediaType_LayerType int32

const (
	Action_MediaType_LAYER_TYPE_BACKGROUND Action_MediaType_LayerType = 0
	Action_MediaType_LAYER_TYPE_FOREGROUND Action_MediaType_LayerType = 1
	Action_MediaType_LAYER_TYPE_FILL       Action_MediaType_LayerType = 2
	Action_MediaType_LAYER_TYPE_INPUT      Action_MediaType_LayerType = 3
)

// Enum value maps for Action_MediaType_LayerType.
var (
	Action_MediaType_LayerType_name = map[int32]string{
		0: "LAYER_TYPE_BACKGROUND",
		1: "LAYER_TYPE_FOREGROUND",
		2: "LAYER_TYPE_FILL",
		3: "LAYER_TYPE_INPUT",
	}
	Action_MediaType_LayerType_value = map[string]int32{
		"LAYER_TYPE_BACKGROUND": 0,
		"LAYER_TYPE_FOREGROUND": 1,
		"LAYER_TYPE_FILL":       2,
		"LAYER_TYPE_INPUT":      3,
	}
)

func (x Action_MediaType_LayerType) Enum() *Action_MediaType_LayerType {
	p := new(Action_MediaType_LayerType)
	*p = x
	return p
}

func (x Action_MediaType_LayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_MediaType_LayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[3].Descriptor()
}

func (Action_MediaType_LayerType) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[3]
}

func (x Action_MediaType_LayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_MediaType_LayerType.Descriptor instead.
func (Action_MediaType_LayerType) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 8, 0}
}

type Action_MediaType_Video_PlaybackBehavior int32

const (
	Action_MediaType_Video_PLAYBACK_BEHAVIOR_STOP           Action_MediaType_Video_PlaybackBehavior = 0
	Action_MediaType_Video_PLAYBACK_BEHAVIOR_LOOP           Action_MediaType_Video_PlaybackBehavior = 1
	Action_MediaType_Video_PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT Action_MediaType_Video_PlaybackBehavior = 2
	Action_MediaType_Video_PLAYBACK_BEHAVIOR_LOOP_FOR_TIME  Action_MediaType_Video_PlaybackBehavior = 3
)

// Enum value maps for Action_MediaType_Video_PlaybackBehavior.
var (
	Action_MediaType_Video_PlaybackBehavior_name = map[int32]string{
		0: "PLAYBACK_BEHAVIOR_STOP",
		1: "PLAYBACK_BEHAVIOR_LOOP",
		2: "PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT",
		3: "PLAYBACK_BEHAVIOR_LOOP_FOR_TIME",
	}
	Action_MediaType_Video_PlaybackBehavior_value = map[string]int32{
		"PLAYBACK_BEHAVIOR_STOP":           0,
		"PLAYBACK_BEHAVIOR_LOOP":           1,
		"PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT": 2,
		"PLAYBACK_BEHAVIOR_LOOP_FOR_TIME":  3,
	}
)

func (x Action_MediaType_Video_PlaybackBehavior) Enum() *Action_MediaType_Video_PlaybackBehavior {
	p := new(Action_MediaType_Video_PlaybackBehavior)
	*p = x
	return p
}

func (x Action_MediaType_Video_PlaybackBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_MediaType_Video_PlaybackBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[4].Descriptor()
}

func (Action_MediaType_Video_PlaybackBehavior) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[4]
}

func (x Action_MediaType_Video_PlaybackBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_MediaType_Video_PlaybackBehavior.Descriptor instead.
func (Action_MediaType_Video_PlaybackBehavior) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 8, 1, 0}
}

type Action_MediaType_Video_EndBehavior int32

const (
	Action_MediaType_Video_END_BEHAVIOR_STOP          Action_MediaType_Video_EndBehavior = 0
	Action_MediaType_Video_END_BEHAVIOR_STOP_ON_BLACK Action_MediaType_Video_EndBehavior = 1
	Action_MediaType_Video_END_BEHAVIOR_STOP_ON_CLEAR Action_MediaType_Video_EndBehavior = 2
	Action_MediaType_Video_END_BEHAVIOR_FADE_TO_BLACK Action_MediaType_Video_EndBehavior = 3
	Action_MediaType_Video_END_BEHAVIOR_FADE_TO_CLEAR Action_MediaType_Video_EndBehavior = 4
)

// Enum value maps for Action_MediaType_Video_EndBehavior.
var (
	Action_MediaType_Video_EndBehavior_name = map[int32]string{
		0: "END_BEHAVIOR_STOP",
		1: "END_BEHAVIOR_STOP_ON_BLACK",
		2: "END_BEHAVIOR_STOP_ON_CLEAR",
		3: "END_BEHAVIOR_FADE_TO_BLACK",
		4: "END_BEHAVIOR_FADE_TO_CLEAR",
	}
	Action_MediaType_Video_EndBehavior_value = map[string]int32{
		"END_BEHAVIOR_STOP":          0,
		"END_BEHAVIOR_STOP_ON_BLACK": 1,
		"END_BEHAVIOR_STOP_ON_CLEAR": 2,
		"END_BEHAVIOR_FADE_TO_BLACK": 3,
		"END_BEHAVIOR_FADE_TO_CLEAR": 4,
	}
)

func (x Action_MediaType_Video_EndBehavior) Enum() *Action_MediaType_Video_EndBehavior {
	p := new(Action_MediaType_Video_EndBehavior)
	*p = x
	return p
}

func (x Action_MediaType_Video_EndBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_MediaType_Video_EndBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[5].Descriptor()
}

func (Action_MediaType_Video_EndBehavior) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[5]
}

func (x Action_MediaType_Video_EndBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_MediaType_Video_EndBehavior.Descriptor instead.
func (Action_MediaType_Video_EndBehavior) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 8, 1, 1}
}

type Action_MediaType_Audio_PlaybackBehavior int32

const (
	Action_MediaType_Audio_PLAYBACK_BEHAVIOR_STOP           Action_MediaType_Audio_PlaybackBehavior = 0
	Action_MediaType_Audio_PLAYBACK_BEHAVIOR_LOOP           Action_MediaType_Audio_PlaybackBehavior = 1
	Action_MediaType_Audio_PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT Action_MediaType_Audio_PlaybackBehavior = 2
	Action_MediaType_Audio_PLAYBACK_BEHAVIOR_LOOP_FOR_TIME  Action_MediaType_Audio_PlaybackBehavior = 3
)

// Enum value maps for Action_MediaType_Audio_PlaybackBehavior.
var (
	Action_MediaType_Audio_PlaybackBehavior_name = map[int32]string{
		0: "PLAYBACK_BEHAVIOR_STOP",
		1: "PLAYBACK_BEHAVIOR_LOOP",
		2: "PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT",
		3: "PLAYBACK_BEHAVIOR_LOOP_FOR_TIME",
	}
	Action_MediaType_Audio_PlaybackBehavior_value = map[string]int32{
		"PLAYBACK_BEHAVIOR_STOP":           0,
		"PLAYBACK_BEHAVIOR_LOOP":           1,
		"PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT": 2,
		"PLAYBACK_BEHAVIOR_LOOP_FOR_TIME":  3,
	}
)

func (x Action_MediaType_Audio_PlaybackBehavior) Enum() *Action_MediaType_Audio_PlaybackBehavior {
	p := new(Action_MediaType_Audio_PlaybackBehavior)
	*p = x
	return p
}

func (x Action_MediaType_Audio_PlaybackBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_MediaType_Audio_PlaybackBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[6].Descriptor()
}

func (Action_MediaType_Audio_PlaybackBehavior) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[6]
}

func (x Action_MediaType_Audio_PlaybackBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_MediaType_Audio_PlaybackBehavior.Descriptor instead.
func (Action_MediaType_Audio_PlaybackBehavior) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 8, 2, 0}
}

type Action_MediaType_Audio_MediaActionAudioType int32

const (
	Action_MediaType_Audio_MEDIA_ACTION_AUDIO_TYPE_TUNE  Action_MediaType_Audio_MediaActionAudioType = 0
	Action_MediaType_Audio_MEDIA_ACTION_AUDIO_TYPE_SOUND Action_MediaType_Audio_MediaActionAudioType = 1
)

// Enum value maps for Action_MediaType_Audio_MediaActionAudioType.
var (
	Action_MediaType_Audio_MediaActionAudioType_name = map[int32]string{
		0: "MEDIA_ACTION_AUDIO_TYPE_TUNE",
		1: "MEDIA_ACTION_AUDIO_TYPE_SOUND",
	}
	Action_MediaType_Audio_MediaActionAudioType_value = map[string]int32{
		"MEDIA_ACTION_AUDIO_TYPE_TUNE":  0,
		"MEDIA_ACTION_AUDIO_TYPE_SOUND": 1,
	}
)

func (x Action_MediaType_Audio_MediaActionAudioType) Enum() *Action_MediaType_Audio_MediaActionAudioType {
	p := new(Action_MediaType_Audio_MediaActionAudioType)
	*p = x
	return p
}

func (x Action_MediaType_Audio_MediaActionAudioType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_MediaType_Audio_MediaActionAudioType) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[7].Descriptor()
}

func (Action_MediaType_Audio_MediaActionAudioType) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[7]
}

func (x Action_MediaType_Audio_MediaActionAudioType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_MediaType_Audio_MediaActionAudioType.Descriptor instead.
func (Action_MediaType_Audio_MediaActionAudioType) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 8, 2, 1}
}

type Action_TimerType_TimerAction int32

const (
	Action_TimerType_ACTION_START           Action_TimerType_TimerAction = 0
	Action_TimerType_ACTION_STOP            Action_TimerType_TimerAction = 1
	Action_TimerType_ACTION_RESET           Action_TimerType_TimerAction = 2
	Action_TimerType_ACTION_RESET_AND_START Action_TimerType_TimerAction = 3
	Action_TimerType_ACTION_STOP_AND_RESET  Action_TimerType_TimerAction = 4
)

// Enum value maps for Action_TimerType_TimerAction.
var (
	Action_TimerType_TimerAction_name = map[int32]string{
		0: "ACTION_START",
		1: "ACTION_STOP",
		2: "ACTION_RESET",
		3: "ACTION_RESET_AND_START",
		4: "ACTION_STOP_AND_RESET",
	}
	Action_TimerType_TimerAction_value = map[string]int32{
		"ACTION_START":           0,
		"ACTION_STOP":            1,
		"ACTION_RESET":           2,
		"ACTION_RESET_AND_START": 3,
		"ACTION_STOP_AND_RESET":  4,
	}
)

func (x Action_TimerType_TimerAction) Enum() *Action_TimerType_TimerAction {
	p := new(Action_TimerType_TimerAction)
	*p = x
	return p
}

func (x Action_TimerType_TimerAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_TimerType_TimerAction) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[8].Descriptor()
}

func (Action_TimerType_TimerAction) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[8]
}

func (x Action_TimerType_TimerAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_TimerType_TimerAction.Descriptor instead.
func (Action_TimerType_TimerAction) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 11, 0}
}

type Action_ClearType_ClearTargetLayer int32

const (
	Action_ClearType_CLEAR_TARGET_LAYER_ALL           Action_ClearType_ClearTargetLayer = 0
	Action_ClearType_CLEAR_TARGET_LAYER_AUDIO         Action_ClearType_ClearTargetLayer = 1
	Action_ClearType_CLEAR_TARGET_LAYER_BACKGROUND    Action_ClearType_ClearTargetLayer = 2
	Action_ClearType_CLEAR_TARGET_LAYER_LIVE_VIDEO    Action_ClearType_ClearTargetLayer = 3
	Action_ClearType_CLEAR_TARGET_LAYER_PROP          Action_ClearType_ClearTargetLayer = 4
	Action_ClearType_CLEAR_TARGET_LAYER_SLIDE         Action_ClearType_ClearTargetLayer = 5
	Action_ClearType_CLEAR_TARGET_LAYER_LOGO          Action_ClearType_ClearTargetLayer = 6
	Action_ClearType_CLEAR_TARGET_LAYER_MESSAGES      Action_ClearType_ClearTargetLayer = 7
	Action_ClearType_CLEAR_TARGET_LAYER_AUDIO_EFFECTS Action_ClearType_ClearTargetLayer = 8
)

// Enum value maps for Action_ClearType_ClearTargetLayer.
var (
	Action_ClearType_ClearTargetLayer_name = map[int32]string{
		0: "CLEAR_TARGET_LAYER_ALL",
		1: "CLEAR_TARGET_LAYER_AUDIO",
		2: "CLEAR_TARGET_LAYER_BACKGROUND",
		3: "CLEAR_TARGET_LAYER_LIVE_VIDEO",
		4: "CLEAR_TARGET_LAYER_PROP",
		5: "CLEAR_TARGET_LAYER_SLIDE",
		6: "CLEAR_TARGET_LAYER_LOGO",
		7: "CLEAR_TARGET_LAYER_MESSAGES",
		8: "CLEAR_TARGET_LAYER_AUDIO_EFFECTS",
	}
	Action_ClearType_ClearTargetLayer_value = map[string]int32{
		"CLEAR_TARGET_LAYER_ALL":           0,
		"CLEAR_TARGET_LAYER_AUDIO":         1,
		"CLEAR_TARGET_LAYER_BACKGROUND":    2,
		"CLEAR_TARGET_LAYER_LIVE_VIDEO":    3,
		"CLEAR_TARGET_LAYER_PROP":          4,
		"CLEAR_TARGET_LAYER_SLIDE":         5,
		"CLEAR_TARGET_LAYER_LOGO":          6,
		"CLEAR_TARGET_LAYER_MESSAGES":      7,
		"CLEAR_TARGET_LAYER_AUDIO_EFFECTS": 8,
	}
)

func (x Action_ClearType_ClearTargetLayer) Enum() *Action_ClearType_ClearTargetLayer {
	p := new(Action_ClearType_ClearTargetLayer)
	*p = x
	return p
}

func (x Action_ClearType_ClearTargetLayer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_ClearType_ClearTargetLayer) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[9].Descriptor()
}

func (Action_ClearType_ClearTargetLayer) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[9]
}

func (x Action_ClearType_ClearTargetLayer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_ClearType_ClearTargetLayer.Descriptor instead.
func (Action_ClearType_ClearTargetLayer) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 12, 0}
}

type Action_ClearType_ContentDestination int32

const (
	Action_ClearType_CONTENT_DESTINATION_GLOBAL        Action_ClearType_ContentDestination = 0
	Action_ClearType_CONTENT_DESTINATION_ANNOUNCEMENTS Action_ClearType_ContentDestination = 1
)

// Enum value maps for Action_ClearType_ContentDestination.
var (
	Action_ClearType_ContentDestination_name = map[int32]string{
		0: "CONTENT_DESTINATION_GLOBAL",
		1: "CONTENT_DESTINATION_ANNOUNCEMENTS",
	}
	Action_ClearType_ContentDestination_value = map[string]int32{
		"CONTENT_DESTINATION_GLOBAL":        0,
		"CONTENT_DESTINATION_ANNOUNCEMENTS": 1,
	}
)

func (x Action_ClearType_ContentDestination) Enum() *Action_ClearType_ContentDestination {
	p := new(Action_ClearType_ContentDestination)
	*p = x
	return p
}

func (x Action_ClearType_ContentDestination) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_ClearType_ContentDestination) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[10].Descriptor()
}

func (Action_ClearType_ContentDestination) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[10]
}

func (x Action_ClearType_ContentDestination) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_ClearType_ContentDestination.Descriptor instead.
func (Action_ClearType_ContentDestination) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 12, 1}
}

type Action_StageLayoutType_SlideTarget int32

const (
	Action_StageLayoutType_SLIDE_TARGET_NO_CHANGE  Action_StageLayoutType_SlideTarget = 0
	Action_StageLayoutType_SLIDE_TARGET_STAGE_ONLY Action_StageLayoutType_SlideTarget = 1
	Action_StageLayoutType_SLIDE_TARGET_ALL        Action_StageLayoutType_SlideTarget = 2
)

// Enum value maps for Action_StageLayoutType_SlideTarget.
var (
	Action_StageLayoutType_SlideTarget_name = map[int32]string{
		0: "SLIDE_TARGET_NO_CHANGE",
		1: "SLIDE_TARGET_STAGE_ONLY",
		2: "SLIDE_TARGET_ALL",
	}
	Action_StageLayoutType_SlideTarget_value = map[string]int32{
		"SLIDE_TARGET_NO_CHANGE":  0,
		"SLIDE_TARGET_STAGE_ONLY": 1,
		"SLIDE_TARGET_ALL":        2,
	}
)

func (x Action_StageLayoutType_SlideTarget) Enum() *Action_StageLayoutType_SlideTarget {
	p := new(Action_StageLayoutType_SlideTarget)
	*p = x
	return p
}

func (x Action_StageLayoutType_SlideTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_StageLayoutType_SlideTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[11].Descriptor()
}

func (Action_StageLayoutType_SlideTarget) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[11]
}

func (x Action_StageLayoutType_SlideTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_StageLayoutType_SlideTarget.Descriptor instead.
func (Action_StageLayoutType_SlideTarget) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 14, 0}
}

type Action_SlideDestinationType_SlideTarget int32

const (
	Action_SlideDestinationType_SLIDE_TARGET_NO_CHANGE  Action_SlideDestinationType_SlideTarget = 0
	Action_SlideDestinationType_SLIDE_TARGET_STAGE_ONLY Action_SlideDestinationType_SlideTarget = 1
	Action_SlideDestinationType_SLIDE_TARGET_ALL        Action_SlideDestinationType_SlideTarget = 2
)

// Enum value maps for Action_SlideDestinationType_SlideTarget.
var (
	Action_SlideDestinationType_SlideTarget_name = map[int32]string{
		0: "SLIDE_TARGET_NO_CHANGE",
		1: "SLIDE_TARGET_STAGE_ONLY",
		2: "SLIDE_TARGET_ALL",
	}
	Action_SlideDestinationType_SlideTarget_value = map[string]int32{
		"SLIDE_TARGET_NO_CHANGE":  0,
		"SLIDE_TARGET_STAGE_ONLY": 1,
		"SLIDE_TARGET_ALL":        2,
	}
)

func (x Action_SlideDestinationType_SlideTarget) Enum() *Action_SlideDestinationType_SlideTarget {
	p := new(Action_SlideDestinationType_SlideTarget)
	*p = x
	return p
}

func (x Action_SlideDestinationType_SlideTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_SlideDestinationType_SlideTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[12].Descriptor()
}

func (Action_SlideDestinationType_SlideTarget) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[12]
}

func (x Action_SlideDestinationType_SlideTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_SlideDestinationType_SlideTarget.Descriptor instead.
func (Action_SlideDestinationType_SlideTarget) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 15, 0}
}

type Action_SocialMediaType_SocialMediaAction int32

const (
	Action_SocialMediaType_SOCIAL_MEDIA_ACTION_LENGTH_OF_GOTO_NEXT_TIMER Action_SocialMediaType_SocialMediaAction = 0
	Action_SocialMediaType_SOCIAL_MEDIA_ACTION_SPECIFIED_TIME            Action_SocialMediaType_SocialMediaAction = 1
)

// Enum value maps for Action_SocialMediaType_SocialMediaAction.
var (
	Action_SocialMediaType_SocialMediaAction_name = map[int32]string{
		0: "SOCIAL_MEDIA_ACTION_LENGTH_OF_GOTO_NEXT_TIMER",
		1: "SOCIAL_MEDIA_ACTION_SPECIFIED_TIME",
	}
	Action_SocialMediaType_SocialMediaAction_value = map[string]int32{
		"SOCIAL_MEDIA_ACTION_LENGTH_OF_GOTO_NEXT_TIMER": 0,
		"SOCIAL_MEDIA_ACTION_SPECIFIED_TIME":            1,
	}
)

func (x Action_SocialMediaType_SocialMediaAction) Enum() *Action_SocialMediaType_SocialMediaAction {
	p := new(Action_SocialMediaType_SocialMediaAction)
	*p = x
	return p
}

func (x Action_SocialMediaType_SocialMediaAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_SocialMediaType_SocialMediaAction) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[13].Descriptor()
}

func (Action_SocialMediaType_SocialMediaAction) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[13]
}

func (x Action_SocialMediaType_SocialMediaAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_SocialMediaType_SocialMediaAction.Descriptor instead.
func (Action_SocialMediaType_SocialMediaAction) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 19, 0}
}

type Action_CommunicationType_MIDICommand_State int32

const (
	Action_CommunicationType_MIDICommand_STATE_ON  Action_CommunicationType_MIDICommand_State = 0
	Action_CommunicationType_MIDICommand_STATE_OFF Action_CommunicationType_MIDICommand_State = 1
)

// Enum value maps for Action_CommunicationType_MIDICommand_State.
var (
	Action_CommunicationType_MIDICommand_State_name = map[int32]string{
		0: "STATE_ON",
		1: "STATE_OFF",
	}
	Action_CommunicationType_MIDICommand_State_value = map[string]int32{
		"STATE_ON":  0,
		"STATE_OFF": 1,
	}
)

func (x Action_CommunicationType_MIDICommand_State) Enum() *Action_CommunicationType_MIDICommand_State {
	p := new(Action_CommunicationType_MIDICommand_State)
	*p = x
	return p
}

func (x Action_CommunicationType_MIDICommand_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_CommunicationType_MIDICommand_State) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[14].Descriptor()
}

func (Action_CommunicationType_MIDICommand_State) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[14]
}

func (x Action_CommunicationType_MIDICommand_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_CommunicationType_MIDICommand_State.Descriptor instead.
func (Action_CommunicationType_MIDICommand_State) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 20, 1, 0}
}

type Action_CommunicationType_GlobalCacheCommand_CommandAction int32

const (
	Action_CommunicationType_GlobalCacheCommand_COMMAND_ACTION_ON                   Action_CommunicationType_GlobalCacheCommand_CommandAction = 0
	Action_CommunicationType_GlobalCacheCommand_COMMAND_ACTION_OFF                  Action_CommunicationType_GlobalCacheCommand_CommandAction = 1
	Action_CommunicationType_GlobalCacheCommand_COMMAND_ACTION_ON_OFF_WITH_INTERVAL Action_CommunicationType_GlobalCacheCommand_CommandAction = 2
	Action_CommunicationType_GlobalCacheCommand_COMMAND_ACTION_OFF_ON_WITH_INTERVAL Action_CommunicationType_GlobalCacheCommand_CommandAction = 3
)

// Enum value maps for Action_CommunicationType_GlobalCacheCommand_CommandAction.
var (
	Action_CommunicationType_GlobalCacheCommand_CommandAction_name = map[int32]string{
		0: "COMMAND_ACTION_ON",
		1: "COMMAND_ACTION_OFF",
		2: "COMMAND_ACTION_ON_OFF_WITH_INTERVAL",
		3: "COMMAND_ACTION_OFF_ON_WITH_INTERVAL",
	}
	Action_CommunicationType_GlobalCacheCommand_CommandAction_value = map[string]int32{
		"COMMAND_ACTION_ON":                   0,
		"COMMAND_ACTION_OFF":                  1,
		"COMMAND_ACTION_ON_OFF_WITH_INTERVAL": 2,
		"COMMAND_ACTION_OFF_ON_WITH_INTERVAL": 3,
	}
)

func (x Action_CommunicationType_GlobalCacheCommand_CommandAction) Enum() *Action_CommunicationType_GlobalCacheCommand_CommandAction {
	p := new(Action_CommunicationType_GlobalCacheCommand_CommandAction)
	*p = x
	return p
}

func (x Action_CommunicationType_GlobalCacheCommand_CommandAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_CommunicationType_GlobalCacheCommand_CommandAction) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[15].Descriptor()
}

func (Action_CommunicationType_GlobalCacheCommand_CommandAction) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[15]
}

func (x Action_CommunicationType_GlobalCacheCommand_CommandAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_CommunicationType_GlobalCacheCommand_CommandAction.Descriptor instead.
func (Action_CommunicationType_GlobalCacheCommand_CommandAction) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 20, 2, 0}
}

type Action_CommunicationType_GVG100Command_CommandAction int32

const (
	Action_CommunicationType_GVG100Command_COMMAND_ACTION_FADE_TO_BLACK Action_CommunicationType_GVG100Command_CommandAction = 0
	Action_CommunicationType_GVG100Command_COMMAND_ACTION_DSK_TOGGLE    Action_CommunicationType_GVG100Command_CommandAction = 1
)

// Enum value maps for Action_CommunicationType_GVG100Command_CommandAction.
var (
	Action_CommunicationType_GVG100Command_CommandAction_name = map[int32]string{
		0: "COMMAND_ACTION_FADE_TO_BLACK",
		1: "COMMAND_ACTION_DSK_TOGGLE",
	}
	Action_CommunicationType_GVG100Command_CommandAction_value = map[string]int32{
		"COMMAND_ACTION_FADE_TO_BLACK": 0,
		"COMMAND_ACTION_DSK_TOGGLE":    1,
	}
)

func (x Action_CommunicationType_GVG100Command_CommandAction) Enum() *Action_CommunicationType_GVG100Command_CommandAction {
	p := new(Action_CommunicationType_GVG100Command_CommandAction)
	*p = x
	return p
}

func (x Action_CommunicationType_GVG100Command_CommandAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_CommunicationType_GVG100Command_CommandAction) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[16].Descriptor()
}

func (Action_CommunicationType_GVG100Command_CommandAction) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[16]
}

func (x Action_CommunicationType_GVG100Command_CommandAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_CommunicationType_GVG100Command_CommandAction.Descriptor instead.
func (Action_CommunicationType_GVG100Command_CommandAction) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 20, 3, 0}
}

type Action_CommunicationType_SonyBVSCommand_CommandAction int32

const (
	Action_CommunicationType_SonyBVSCommand_COMMAND_ACTION_FADE_TO_BLACK Action_CommunicationType_SonyBVSCommand_CommandAction = 0
	Action_CommunicationType_SonyBVSCommand_COMMAND_ACTION_KEY_ON        Action_CommunicationType_SonyBVSCommand_CommandAction = 1
	Action_CommunicationType_SonyBVSCommand_COMMAND_ACTION_KEY_OFF       Action_CommunicationType_SonyBVSCommand_CommandAction = 2
	Action_CommunicationType_SonyBVSCommand_COMMAND_ACTION_DSK_ON        Action_CommunicationType_SonyBVSCommand_CommandAction = 3
	Action_CommunicationType_SonyBVSCommand_COMMAND_ACTION_DSK_OFF       Action_CommunicationType_SonyBVSCommand_CommandAction = 4
)

// Enum value maps for Action_CommunicationType_SonyBVSCommand_CommandAction.
var (
	Action_CommunicationType_SonyBVSCommand_CommandAction_name = map[int32]string{
		0: "COMMAND_ACTION_FADE_TO_BLACK",
		1: "COMMAND_ACTION_KEY_ON",
		2: "COMMAND_ACTION_KEY_OFF",
		3: "COMMAND_ACTION_DSK_ON",
		4: "COMMAND_ACTION_DSK_OFF",
	}
	Action_CommunicationType_SonyBVSCommand_CommandAction_value = map[string]int32{
		"COMMAND_ACTION_FADE_TO_BLACK": 0,
		"COMMAND_ACTION_KEY_ON":        1,
		"COMMAND_ACTION_KEY_OFF":       2,
		"COMMAND_ACTION_DSK_ON":        3,
		"COMMAND_ACTION_DSK_OFF":       4,
	}
)

func (x Action_CommunicationType_SonyBVSCommand_CommandAction) Enum() *Action_CommunicationType_SonyBVSCommand_CommandAction {
	p := new(Action_CommunicationType_SonyBVSCommand_CommandAction)
	*p = x
	return p
}

func (x Action_CommunicationType_SonyBVSCommand_CommandAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_CommunicationType_SonyBVSCommand_CommandAction) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[17].Descriptor()
}

func (Action_CommunicationType_SonyBVSCommand_CommandAction) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[17]
}

func (x Action_CommunicationType_SonyBVSCommand_CommandAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_CommunicationType_SonyBVSCommand_CommandAction.Descriptor instead.
func (Action_CommunicationType_SonyBVSCommand_CommandAction) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 20, 4, 0}
}

type Action_DocumentType_ContentDestination int32

const (
	Action_DocumentType_CONTENT_DESTINATION_GLOBAL        Action_DocumentType_ContentDestination = 0
	Action_DocumentType_CONTENT_DESTINATION_ANNOUNCEMENTS Action_DocumentType_ContentDestination = 1
)

// Enum value maps for Action_DocumentType_ContentDestination.
var (
	Action_DocumentType_ContentDestination_name = map[int32]string{
		0: "CONTENT_DESTINATION_GLOBAL",
		1: "CONTENT_DESTINATION_ANNOUNCEMENTS",
	}
	Action_DocumentType_ContentDestination_value = map[string]int32{
		"CONTENT_DESTINATION_GLOBAL":        0,
		"CONTENT_DESTINATION_ANNOUNCEMENTS": 1,
	}
)

func (x Action_DocumentType_ContentDestination) Enum() *Action_DocumentType_ContentDestination {
	p := new(Action_DocumentType_ContentDestination)
	*p = x
	return p
}

func (x Action_DocumentType_ContentDestination) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_DocumentType_ContentDestination) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[18].Descriptor()
}

func (Action_DocumentType_ContentDestination) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[18]
}

func (x Action_DocumentType_ContentDestination) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_DocumentType_ContentDestination.Descriptor instead.
func (Action_DocumentType_ContentDestination) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 22, 0}
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                *UUID                       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Label               *Action_Label               `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	DelayTime           float64                     `protobuf:"fixed64,4,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
	OldType             *Action_OldType             `protobuf:"bytes,5,opt,name=old_type,json=oldType,proto3" json:"old_type,omitempty"`
	IsEnabled           bool                        `protobuf:"varint,6,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
	LayerIdentification *Action_LayerIdentification `protobuf:"bytes,7,opt,name=layer_identification,json=layerIdentification,proto3" json:"layer_identification,omitempty"`
	Duration            float64                     `protobuf:"fixed64,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Type                Action_ActionType           `protobuf:"varint,9,opt,name=type,proto3,enum=rv.data.Action_ActionType" json:"type,omitempty"`
	// Types that are assignable to ActionTypeData:
	//	*Action_CollectionElement
	//	*Action_PlaylistItem
	//	*Action_BlendMode
	//	*Action_Transition
	//	*Action_Media
	//	*Action_DoubleItem
	//	*Action_Effects
	//	*Action_Slide
	//	*Action_Background
	//	*Action_Timer
	//	*Action_Clear
	//	*Action_Stage
	//	*Action_Prop
	//	*Action_Mask
	//	*Action_Message
	//	*Action_SocialMedia
	//	*Action_Communication
	//	*Action_MultiScreen
	//	*Action_PresentationDocument
	//	*Action_ExternalPresentation
	//	*Action_AudienceLook
	//	*Action_AudioInput
	//	*Action_SlideDestination
	//	*Action_Macro
	//	*Action_ClearGroup
	ActionTypeData isAction_ActionTypeData `protobuf_oneof:"ActionTypeData"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0}
}

func (x *Action) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Action) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Action) GetLabel() *Action_Label {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Action) GetDelayTime() float64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *Action) GetOldType() *Action_OldType {
	if x != nil {
		return x.OldType
	}
	return nil
}

func (x *Action) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Action) GetLayerIdentification() *Action_LayerIdentification {
	if x != nil {
		return x.LayerIdentification
	}
	return nil
}

func (x *Action) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Action) GetType() Action_ActionType {
	if x != nil {
		return x.Type
	}
	return Action_ACTION_TYPE_UNKNOWN
}

func (m *Action) GetActionTypeData() isAction_ActionTypeData {
	if m != nil {
		return m.ActionTypeData
	}
	return nil
}

func (x *Action) GetCollectionElement() *CollectionElementType {
	if x, ok := x.GetActionTypeData().(*Action_CollectionElement); ok {
		return x.CollectionElement
	}
	return nil
}

func (x *Action) GetPlaylistItem() *Action_PlaylistItemType {
	if x, ok := x.GetActionTypeData().(*Action_PlaylistItem); ok {
		return x.PlaylistItem
	}
	return nil
}

func (x *Action) GetBlendMode() *Action_BlendModeType {
	if x, ok := x.GetActionTypeData().(*Action_BlendMode); ok {
		return x.BlendMode
	}
	return nil
}

func (x *Action) GetTransition() *Action_TransitionType {
	if x, ok := x.GetActionTypeData().(*Action_Transition); ok {
		return x.Transition
	}
	return nil
}

func (x *Action) GetMedia() *Action_MediaType {
	if x, ok := x.GetActionTypeData().(*Action_Media); ok {
		return x.Media
	}
	return nil
}

func (x *Action) GetDoubleItem() *Action_DoubleType {
	if x, ok := x.GetActionTypeData().(*Action_DoubleItem); ok {
		return x.DoubleItem
	}
	return nil
}

func (x *Action) GetEffects() *Action_EffectsType {
	if x, ok := x.GetActionTypeData().(*Action_Effects); ok {
		return x.Effects
	}
	return nil
}

func (x *Action) GetSlide() *Action_SlideType {
	if x, ok := x.GetActionTypeData().(*Action_Slide); ok {
		return x.Slide
	}
	return nil
}

func (x *Action) GetBackground() *Action_BackgroundType {
	if x, ok := x.GetActionTypeData().(*Action_Background); ok {
		return x.Background
	}
	return nil
}

func (x *Action) GetTimer() *Action_TimerType {
	if x, ok := x.GetActionTypeData().(*Action_Timer); ok {
		return x.Timer
	}
	return nil
}

func (x *Action) GetClear() *Action_ClearType {
	if x, ok := x.GetActionTypeData().(*Action_Clear); ok {
		return x.Clear
	}
	return nil
}

func (x *Action) GetStage() *Action_StageLayoutType {
	if x, ok := x.GetActionTypeData().(*Action_Stage); ok {
		return x.Stage
	}
	return nil
}

func (x *Action) GetProp() *Action_PropType {
	if x, ok := x.GetActionTypeData().(*Action_Prop); ok {
		return x.Prop
	}
	return nil
}

func (x *Action) GetMask() *Action_MaskType {
	if x, ok := x.GetActionTypeData().(*Action_Mask); ok {
		return x.Mask
	}
	return nil
}

func (x *Action) GetMessage() *Action_MessageType {
	if x, ok := x.GetActionTypeData().(*Action_Message); ok {
		return x.Message
	}
	return nil
}

func (x *Action) GetSocialMedia() *Action_SocialMediaType {
	if x, ok := x.GetActionTypeData().(*Action_SocialMedia); ok {
		return x.SocialMedia
	}
	return nil
}

func (x *Action) GetCommunication() *Action_CommunicationType {
	if x, ok := x.GetActionTypeData().(*Action_Communication); ok {
		return x.Communication
	}
	return nil
}

func (x *Action) GetMultiScreen() *Action_MultiScreenType {
	if x, ok := x.GetActionTypeData().(*Action_MultiScreen); ok {
		return x.MultiScreen
	}
	return nil
}

func (x *Action) GetPresentationDocument() *Action_DocumentType {
	if x, ok := x.GetActionTypeData().(*Action_PresentationDocument); ok {
		return x.PresentationDocument
	}
	return nil
}

func (x *Action) GetExternalPresentation() *Action_ExternalPresentationType {
	if x, ok := x.GetActionTypeData().(*Action_ExternalPresentation); ok {
		return x.ExternalPresentation
	}
	return nil
}

func (x *Action) GetAudienceLook() *Action_AudienceLookType {
	if x, ok := x.GetActionTypeData().(*Action_AudienceLook); ok {
		return x.AudienceLook
	}
	return nil
}

func (x *Action) GetAudioInput() *Action_AudioInputType {
	if x, ok := x.GetActionTypeData().(*Action_AudioInput); ok {
		return x.AudioInput
	}
	return nil
}

func (x *Action) GetSlideDestination() *Action_SlideDestinationType {
	if x, ok := x.GetActionTypeData().(*Action_SlideDestination); ok {
		return x.SlideDestination
	}
	return nil
}

func (x *Action) GetMacro() *Action_MacroType {
	if x, ok := x.GetActionTypeData().(*Action_Macro); ok {
		return x.Macro
	}
	return nil
}

func (x *Action) GetClearGroup() *Action_ClearGroupType {
	if x, ok := x.GetActionTypeData().(*Action_ClearGroup); ok {
		return x.ClearGroup
	}
	return nil
}

type isAction_ActionTypeData interface {
	isAction_ActionTypeData()
}

type Action_CollectionElement struct {
	CollectionElement *CollectionElementType `protobuf:"bytes,16,opt,name=collection_element,json=collectionElement,proto3,oneof"`
}

type Action_PlaylistItem struct {
	PlaylistItem *Action_PlaylistItemType `protobuf:"bytes,17,opt,name=playlist_item,json=playlistItem,proto3,oneof"`
}

type Action_BlendMode struct {
	BlendMode *Action_BlendModeType `protobuf:"bytes,18,opt,name=blend_mode,json=blendMode,proto3,oneof"`
}

type Action_Transition struct {
	Transition *Action_TransitionType `protobuf:"bytes,19,opt,name=transition,proto3,oneof"`
}

type Action_Media struct {
	Media *Action_MediaType `protobuf:"bytes,20,opt,name=media,proto3,oneof"`
}

type Action_DoubleItem struct {
	DoubleItem *Action_DoubleType `protobuf:"bytes,21,opt,name=double_item,json=doubleItem,proto3,oneof"`
}

type Action_Effects struct {
	Effects *Action_EffectsType `protobuf:"bytes,22,opt,name=effects,proto3,oneof"`
}

type Action_Slide struct {
	Slide *Action_SlideType `protobuf:"bytes,23,opt,name=slide,proto3,oneof"`
}

type Action_Background struct {
	Background *Action_BackgroundType `protobuf:"bytes,24,opt,name=background,proto3,oneof"`
}

type Action_Timer struct {
	Timer *Action_TimerType `protobuf:"bytes,25,opt,name=timer,proto3,oneof"`
}

type Action_Clear struct {
	Clear *Action_ClearType `protobuf:"bytes,26,opt,name=clear,proto3,oneof"`
}

type Action_Stage struct {
	Stage *Action_StageLayoutType `protobuf:"bytes,27,opt,name=stage,proto3,oneof"`
}

type Action_Prop struct {
	Prop *Action_PropType `protobuf:"bytes,28,opt,name=prop,proto3,oneof"`
}

type Action_Mask struct {
	Mask *Action_MaskType `protobuf:"bytes,29,opt,name=mask,proto3,oneof"`
}

type Action_Message struct {
	Message *Action_MessageType `protobuf:"bytes,30,opt,name=message,proto3,oneof"`
}

type Action_SocialMedia struct {
	SocialMedia *Action_SocialMediaType `protobuf:"bytes,31,opt,name=social_media,json=socialMedia,proto3,oneof"`
}

type Action_Communication struct {
	Communication *Action_CommunicationType `protobuf:"bytes,32,opt,name=communication,proto3,oneof"`
}

type Action_MultiScreen struct {
	MultiScreen *Action_MultiScreenType `protobuf:"bytes,33,opt,name=multi_screen,json=multiScreen,proto3,oneof"`
}

type Action_PresentationDocument struct {
	PresentationDocument *Action_DocumentType `protobuf:"bytes,34,opt,name=presentation_document,json=presentationDocument,proto3,oneof"`
}

type Action_ExternalPresentation struct {
	ExternalPresentation *Action_ExternalPresentationType `protobuf:"bytes,36,opt,name=external_presentation,json=externalPresentation,proto3,oneof"`
}

type Action_AudienceLook struct {
	AudienceLook *Action_AudienceLookType `protobuf:"bytes,37,opt,name=audience_look,json=audienceLook,proto3,oneof"`
}

type Action_AudioInput struct {
	AudioInput *Action_AudioInputType `protobuf:"bytes,38,opt,name=audio_input,json=audioInput,proto3,oneof"`
}

type Action_SlideDestination struct {
	SlideDestination *Action_SlideDestinationType `protobuf:"bytes,39,opt,name=slide_destination,json=slideDestination,proto3,oneof"`
}

type Action_Macro struct {
	Macro *Action_MacroType `protobuf:"bytes,40,opt,name=macro,proto3,oneof"`
}

type Action_ClearGroup struct {
	ClearGroup *Action_ClearGroupType `protobuf:"bytes,41,opt,name=clear_group,json=clearGroup,proto3,oneof"`
}

func (*Action_CollectionElement) isAction_ActionTypeData() {}

func (*Action_PlaylistItem) isAction_ActionTypeData() {}

func (*Action_BlendMode) isAction_ActionTypeData() {}

func (*Action_Transition) isAction_ActionTypeData() {}

func (*Action_Media) isAction_ActionTypeData() {}

func (*Action_DoubleItem) isAction_ActionTypeData() {}

func (*Action_Effects) isAction_ActionTypeData() {}

func (*Action_Slide) isAction_ActionTypeData() {}

func (*Action_Background) isAction_ActionTypeData() {}

func (*Action_Timer) isAction_ActionTypeData() {}

func (*Action_Clear) isAction_ActionTypeData() {}

func (*Action_Stage) isAction_ActionTypeData() {}

func (*Action_Prop) isAction_ActionTypeData() {}

func (*Action_Mask) isAction_ActionTypeData() {}

func (*Action_Message) isAction_ActionTypeData() {}

func (*Action_SocialMedia) isAction_ActionTypeData() {}

func (*Action_Communication) isAction_ActionTypeData() {}

func (*Action_MultiScreen) isAction_ActionTypeData() {}

func (*Action_PresentationDocument) isAction_ActionTypeData() {}

func (*Action_ExternalPresentation) isAction_ActionTypeData() {}

func (*Action_AudienceLook) isAction_ActionTypeData() {}

func (*Action_AudioInput) isAction_ActionTypeData() {}

func (*Action_SlideDestination) isAction_ActionTypeData() {}

func (*Action_Macro) isAction_ActionTypeData() {}

func (*Action_ClearGroup) isAction_ActionTypeData() {}

type Action_OldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category        Action_OldType_Category `protobuf:"varint,1,opt,name=category,proto3,enum=rv.data.Action_OldType_Category" json:"category,omitempty"`
	ApplicationType int32                   `protobuf:"varint,2,opt,name=application_type,json=applicationType,proto3" json:"application_type,omitempty"`
}

func (x *Action_OldType) Reset() {
	*x = Action_OldType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_OldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_OldType) ProtoMessage() {}

func (x *Action_OldType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_OldType.ProtoReflect.Descriptor instead.
func (*Action_OldType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Action_OldType) GetCategory() Action_OldType_Category {
	if x != nil {
		return x.Category
	}
	return Action_OldType_CATEGORY_UNKNOWN
}

func (x *Action_OldType) GetApplicationType() int32 {
	if x != nil {
		return x.ApplicationType
	}
	return 0
}

type Action_Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Color *Color `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Action_Label) Reset() {
	*x = Action_Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_Label) ProtoMessage() {}

func (x *Action_Label) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_Label.ProtoReflect.Descriptor instead.
func (*Action_Label) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Action_Label) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Action_Label) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type Action_LayerIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid *UUID  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Action_LayerIdentification) Reset() {
	*x = Action_LayerIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_LayerIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_LayerIdentification) ProtoMessage() {}

func (x *Action_LayerIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_LayerIdentification.ProtoReflect.Descriptor instead.
func (*Action_LayerIdentification) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Action_LayerIdentification) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Action_LayerIdentification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Action_PlaylistItemType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistUuid    *UUID  `protobuf:"bytes,1,opt,name=playlist_uuid,json=playlistUuid,proto3" json:"playlist_uuid,omitempty"`
	PlaylistName    string `protobuf:"bytes,2,opt,name=playlist_name,json=playlistName,proto3" json:"playlist_name,omitempty"`
	ItemUuid        *UUID  `protobuf:"bytes,3,opt,name=item_uuid,json=itemUuid,proto3" json:"item_uuid,omitempty"`
	ItemName        string `protobuf:"bytes,4,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	SelectPlaylist  bool   `protobuf:"varint,5,opt,name=select_playlist,json=selectPlaylist,proto3" json:"select_playlist,omitempty"`
	AlwaysRetrigger bool   `protobuf:"varint,6,opt,name=always_retrigger,json=alwaysRetrigger,proto3" json:"always_retrigger,omitempty"`
}

func (x *Action_PlaylistItemType) Reset() {
	*x = Action_PlaylistItemType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_PlaylistItemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_PlaylistItemType) ProtoMessage() {}

func (x *Action_PlaylistItemType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_PlaylistItemType.ProtoReflect.Descriptor instead.
func (*Action_PlaylistItemType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Action_PlaylistItemType) GetPlaylistUuid() *UUID {
	if x != nil {
		return x.PlaylistUuid
	}
	return nil
}

func (x *Action_PlaylistItemType) GetPlaylistName() string {
	if x != nil {
		return x.PlaylistName
	}
	return ""
}

func (x *Action_PlaylistItemType) GetItemUuid() *UUID {
	if x != nil {
		return x.ItemUuid
	}
	return nil
}

func (x *Action_PlaylistItemType) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *Action_PlaylistItemType) GetSelectPlaylist() bool {
	if x != nil {
		return x.SelectPlaylist
	}
	return false
}

func (x *Action_PlaylistItemType) GetAlwaysRetrigger() bool {
	if x != nil {
		return x.AlwaysRetrigger
	}
	return false
}

type Action_BlendModeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlendMode Action_BlendModeType_BlendMode `protobuf:"varint,1,opt,name=blend_mode,json=blendMode,proto3,enum=rv.data.Action_BlendModeType_BlendMode" json:"blend_mode,omitempty"`
	Blend     *Layer_Blending                `protobuf:"bytes,2,opt,name=blend,proto3" json:"blend,omitempty"`
}

func (x *Action_BlendModeType) Reset() {
	*x = Action_BlendModeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_BlendModeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_BlendModeType) ProtoMessage() {}

func (x *Action_BlendModeType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_BlendModeType.ProtoReflect.Descriptor instead.
func (*Action_BlendModeType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Action_BlendModeType) GetBlendMode() Action_BlendModeType_BlendMode {
	if x != nil {
		return x.BlendMode
	}
	return Action_BlendModeType_BLEND_MODE_NORMAL
}

func (x *Action_BlendModeType) GetBlend() *Layer_Blending {
	if x != nil {
		return x.Blend
	}
	return nil
}

type Action_TransitionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransitionName string      `protobuf:"bytes,1,opt,name=transition_name,json=transitionName,proto3" json:"transition_name,omitempty"`
	Transition     *Transition `protobuf:"bytes,2,opt,name=transition,proto3" json:"transition,omitempty"`
}

func (x *Action_TransitionType) Reset() {
	*x = Action_TransitionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_TransitionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_TransitionType) ProtoMessage() {}

func (x *Action_TransitionType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_TransitionType.ProtoReflect.Descriptor instead.
func (*Action_TransitionType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Action_TransitionType) GetTransitionName() string {
	if x != nil {
		return x.TransitionName
	}
	return ""
}

func (x *Action_TransitionType) GetTransition() *Transition {
	if x != nil {
		return x.Transition
	}
	return nil
}

type Action_DoubleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Action_DoubleType) Reset() {
	*x = Action_DoubleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_DoubleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_DoubleType) ProtoMessage() {}

func (x *Action_DoubleType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_DoubleType.ProtoReflect.Descriptor instead.
func (*Action_DoubleType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Action_DoubleType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Action_EffectsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Effects []*Effect `protobuf:"bytes,1,rep,name=effects,proto3" json:"effects,omitempty"`
}

func (x *Action_EffectsType) Reset() {
	*x = Action_EffectsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_EffectsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_EffectsType) ProtoMessage() {}

func (x *Action_EffectsType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_EffectsType.ProtoReflect.Descriptor instead.
func (*Action_EffectsType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Action_EffectsType) GetEffects() []*Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

type Action_MediaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransitionDuration       float64                    `protobuf:"fixed64,1,opt,name=transition_duration,json=transitionDuration,proto3" json:"transition_duration,omitempty"`
	SelectedEffectPresetUuid *UUID                      `protobuf:"bytes,2,opt,name=selected_effect_preset_uuid,json=selectedEffectPresetUuid,proto3" json:"selected_effect_preset_uuid,omitempty"`
	Transition               *Transition                `protobuf:"bytes,3,opt,name=transition,proto3" json:"transition,omitempty"`
	Effects                  []*Effect                  `protobuf:"bytes,4,rep,name=effects,proto3" json:"effects,omitempty"`
	Element                  *Media                     `protobuf:"bytes,5,opt,name=element,proto3" json:"element,omitempty"`
	LayerType                Action_MediaType_LayerType `protobuf:"varint,10,opt,name=layer_type,json=layerType,proto3,enum=rv.data.Action_MediaType_LayerType" json:"layer_type,omitempty"`
	AlwaysRetrigger          bool                       `protobuf:"varint,11,opt,name=always_retrigger,json=alwaysRetrigger,proto3" json:"always_retrigger,omitempty"`
	// Types that are assignable to MediaType:
	//	*Action_MediaType_Image_
	//	*Action_MediaType_Video_
	//	*Action_MediaType_Audio_
	//	*Action_MediaType_LiveVideo_
	MediaType isAction_MediaType_MediaType `protobuf_oneof:"MediaType"`
}

func (x *Action_MediaType) Reset() {
	*x = Action_MediaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_MediaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_MediaType) ProtoMessage() {}

func (x *Action_MediaType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_MediaType.ProtoReflect.Descriptor instead.
func (*Action_MediaType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Action_MediaType) GetTransitionDuration() float64 {
	if x != nil {
		return x.TransitionDuration
	}
	return 0
}

func (x *Action_MediaType) GetSelectedEffectPresetUuid() *UUID {
	if x != nil {
		return x.SelectedEffectPresetUuid
	}
	return nil
}

func (x *Action_MediaType) GetTransition() *Transition {
	if x != nil {
		return x.Transition
	}
	return nil
}

func (x *Action_MediaType) GetEffects() []*Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *Action_MediaType) GetElement() *Media {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *Action_MediaType) GetLayerType() Action_MediaType_LayerType {
	if x != nil {
		return x.LayerType
	}
	return Action_MediaType_LAYER_TYPE_BACKGROUND
}

func (x *Action_MediaType) GetAlwaysRetrigger() bool {
	if x != nil {
		return x.AlwaysRetrigger
	}
	return false
}

func (m *Action_MediaType) GetMediaType() isAction_MediaType_MediaType {
	if m != nil {
		return m.MediaType
	}
	return nil
}

func (x *Action_MediaType) GetImage() *Action_MediaType_Image {
	if x, ok := x.GetMediaType().(*Action_MediaType_Image_); ok {
		return x.Image
	}
	return nil
}

func (x *Action_MediaType) GetVideo() *Action_MediaType_Video {
	if x, ok := x.GetMediaType().(*Action_MediaType_Video_); ok {
		return x.Video
	}
	return nil
}

func (x *Action_MediaType) GetAudio() *Action_MediaType_Audio {
	if x, ok := x.GetMediaType().(*Action_MediaType_Audio_); ok {
		return x.Audio
	}
	return nil
}

func (x *Action_MediaType) GetLiveVideo() *Action_MediaType_LiveVideo {
	if x, ok := x.GetMediaType().(*Action_MediaType_LiveVideo_); ok {
		return x.LiveVideo
	}
	return nil
}

type isAction_MediaType_MediaType interface {
	isAction_MediaType_MediaType()
}

type Action_MediaType_Image_ struct {
	Image *Action_MediaType_Image `protobuf:"bytes,6,opt,name=image,proto3,oneof"`
}

type Action_MediaType_Video_ struct {
	Video *Action_MediaType_Video `protobuf:"bytes,7,opt,name=video,proto3,oneof"`
}

type Action_MediaType_Audio_ struct {
	Audio *Action_MediaType_Audio `protobuf:"bytes,8,opt,name=audio,proto3,oneof"`
}

type Action_MediaType_LiveVideo_ struct {
	LiveVideo *Action_MediaType_LiveVideo `protobuf:"bytes,9,opt,name=live_video,json=liveVideo,proto3,oneof"`
}

func (*Action_MediaType_Image_) isAction_MediaType_MediaType() {}

func (*Action_MediaType_Video_) isAction_MediaType_MediaType() {}

func (*Action_MediaType_Audio_) isAction_MediaType_MediaType() {}

func (*Action_MediaType_LiveVideo_) isAction_MediaType_MediaType() {}

type Action_SlideType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Slide:
	//	*Action_SlideType_Template
	//	*Action_SlideType_Presentation
	//	*Action_SlideType_Prop
	Slide isAction_SlideType_Slide `protobuf_oneof:"Slide"`
}

func (x *Action_SlideType) Reset() {
	*x = Action_SlideType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_SlideType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_SlideType) ProtoMessage() {}

func (x *Action_SlideType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_SlideType.ProtoReflect.Descriptor instead.
func (*Action_SlideType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 9}
}

func (m *Action_SlideType) GetSlide() isAction_SlideType_Slide {
	if m != nil {
		return m.Slide
	}
	return nil
}

func (x *Action_SlideType) GetTemplate() *Template_Slide {
	if x, ok := x.GetSlide().(*Action_SlideType_Template); ok {
		return x.Template
	}
	return nil
}

func (x *Action_SlideType) GetPresentation() *PresentationSlide {
	if x, ok := x.GetSlide().(*Action_SlideType_Presentation); ok {
		return x.Presentation
	}
	return nil
}

func (x *Action_SlideType) GetProp() *PropSlide {
	if x, ok := x.GetSlide().(*Action_SlideType_Prop); ok {
		return x.Prop
	}
	return nil
}

type isAction_SlideType_Slide interface {
	isAction_SlideType_Slide()
}

type Action_SlideType_Template struct {
	Template *Template_Slide `protobuf:"bytes,1,opt,name=template,proto3,oneof"`
}

type Action_SlideType_Presentation struct {
	Presentation *PresentationSlide `protobuf:"bytes,2,opt,name=presentation,proto3,oneof"`
}

type Action_SlideType_Prop struct {
	Prop *PropSlide `protobuf:"bytes,3,opt,name=prop,proto3,oneof"`
}

func (*Action_SlideType_Template) isAction_SlideType_Slide() {}

func (*Action_SlideType_Presentation) isAction_SlideType_Slide() {}

func (*Action_SlideType_Prop) isAction_SlideType_Slide() {}

type Action_BackgroundType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element *Background `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *Action_BackgroundType) Reset() {
	*x = Action_BackgroundType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_BackgroundType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_BackgroundType) ProtoMessage() {}

func (x *Action_BackgroundType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_BackgroundType.ProtoReflect.Descriptor instead.
func (*Action_BackgroundType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Action_BackgroundType) GetElement() *Background {
	if x != nil {
		return x.Element
	}
	return nil
}

type Action_TimerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType          Action_TimerType_TimerAction `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3,enum=rv.data.Action_TimerType_TimerAction" json:"action_type,omitempty"`
	TimerIdentification *CollectionElementType       `protobuf:"bytes,4,opt,name=timer_identification,json=timerIdentification,proto3" json:"timer_identification,omitempty"`
	TimerConfiguration  *Timer_Configuration         `protobuf:"bytes,10,opt,name=timer_configuration,json=timerConfiguration,proto3" json:"timer_configuration,omitempty"`
}

func (x *Action_TimerType) Reset() {
	*x = Action_TimerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_TimerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_TimerType) ProtoMessage() {}

func (x *Action_TimerType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_TimerType.ProtoReflect.Descriptor instead.
func (*Action_TimerType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 11}
}

func (x *Action_TimerType) GetActionType() Action_TimerType_TimerAction {
	if x != nil {
		return x.ActionType
	}
	return Action_TimerType_ACTION_START
}

func (x *Action_TimerType) GetTimerIdentification() *CollectionElementType {
	if x != nil {
		return x.TimerIdentification
	}
	return nil
}

func (x *Action_TimerType) GetTimerConfiguration() *Timer_Configuration {
	if x != nil {
		return x.TimerConfiguration
	}
	return nil
}

type Action_ClearType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetLayer        Action_ClearType_ClearTargetLayer   `protobuf:"varint,2,opt,name=target_layer,json=targetLayer,proto3,enum=rv.data.Action_ClearType_ClearTargetLayer" json:"target_layer,omitempty"`
	ContentDestination Action_ClearType_ContentDestination `protobuf:"varint,4,opt,name=content_destination,json=contentDestination,proto3,enum=rv.data.Action_ClearType_ContentDestination" json:"content_destination,omitempty"`
}

func (x *Action_ClearType) Reset() {
	*x = Action_ClearType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_ClearType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_ClearType) ProtoMessage() {}

func (x *Action_ClearType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_ClearType.ProtoReflect.Descriptor instead.
func (*Action_ClearType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 12}
}

func (x *Action_ClearType) GetTargetLayer() Action_ClearType_ClearTargetLayer {
	if x != nil {
		return x.TargetLayer
	}
	return Action_ClearType_CLEAR_TARGET_LAYER_ALL
}

func (x *Action_ClearType) GetContentDestination() Action_ClearType_ContentDestination {
	if x != nil {
		return x.ContentDestination
	}
	return Action_ClearType_CONTENT_DESTINATION_GLOBAL
}

type Action_ClearGroupType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identification *CollectionElementType `protobuf:"bytes,1,opt,name=identification,proto3" json:"identification,omitempty"`
}

func (x *Action_ClearGroupType) Reset() {
	*x = Action_ClearGroupType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_ClearGroupType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_ClearGroupType) ProtoMessage() {}

func (x *Action_ClearGroupType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_ClearGroupType.ProtoReflect.Descriptor instead.
func (*Action_ClearGroupType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 13}
}

func (x *Action_ClearGroupType) GetIdentification() *CollectionElementType {
	if x != nil {
		return x.Identification
	}
	return nil
}

type Action_StageLayoutType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageScreenAssignments []*Stage_ScreenAssignment          `protobuf:"bytes,4,rep,name=stage_screen_assignments,json=stageScreenAssignments,proto3" json:"stage_screen_assignments,omitempty"`
	SlideTarget            Action_StageLayoutType_SlideTarget `protobuf:"varint,5,opt,name=slide_target,json=slideTarget,proto3,enum=rv.data.Action_StageLayoutType_SlideTarget" json:"slide_target,omitempty"`
}

func (x *Action_StageLayoutType) Reset() {
	*x = Action_StageLayoutType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_StageLayoutType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_StageLayoutType) ProtoMessage() {}

func (x *Action_StageLayoutType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_StageLayoutType.ProtoReflect.Descriptor instead.
func (*Action_StageLayoutType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 14}
}

func (x *Action_StageLayoutType) GetStageScreenAssignments() []*Stage_ScreenAssignment {
	if x != nil {
		return x.StageScreenAssignments
	}
	return nil
}

func (x *Action_StageLayoutType) GetSlideTarget() Action_StageLayoutType_SlideTarget {
	if x != nil {
		return x.SlideTarget
	}
	return Action_StageLayoutType_SLIDE_TARGET_NO_CHANGE
}

type Action_SlideDestinationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideTarget Action_SlideDestinationType_SlideTarget `protobuf:"varint,1,opt,name=slide_target,json=slideTarget,proto3,enum=rv.data.Action_SlideDestinationType_SlideTarget" json:"slide_target,omitempty"`
}

func (x *Action_SlideDestinationType) Reset() {
	*x = Action_SlideDestinationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_SlideDestinationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_SlideDestinationType) ProtoMessage() {}

func (x *Action_SlideDestinationType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_SlideDestinationType.ProtoReflect.Descriptor instead.
func (*Action_SlideDestinationType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 15}
}

func (x *Action_SlideDestinationType) GetSlideTarget() Action_SlideDestinationType_SlideTarget {
	if x != nil {
		return x.SlideTarget
	}
	return Action_SlideDestinationType_SLIDE_TARGET_NO_CHANGE
}

type Action_PropType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identification *CollectionElementType `protobuf:"bytes,3,opt,name=identification,proto3" json:"identification,omitempty"`
}

func (x *Action_PropType) Reset() {
	*x = Action_PropType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_PropType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_PropType) ProtoMessage() {}

func (x *Action_PropType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_PropType.ProtoReflect.Descriptor instead.
func (*Action_PropType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 16}
}

func (x *Action_PropType) GetIdentification() *CollectionElementType {
	if x != nil {
		return x.Identification
	}
	return nil
}

type Action_MaskType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identification *CollectionElementType `protobuf:"bytes,3,opt,name=identification,proto3" json:"identification,omitempty"`
}

func (x *Action_MaskType) Reset() {
	*x = Action_MaskType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_MaskType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_MaskType) ProtoMessage() {}

func (x *Action_MaskType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_MaskType.ProtoReflect.Descriptor instead.
func (*Action_MaskType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 17}
}

func (x *Action_MaskType) GetIdentification() *CollectionElementType {
	if x != nil {
		return x.Identification
	}
	return nil
}

type Action_MessageType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIdentificaton *CollectionElementType `protobuf:"bytes,1,opt,name=message_identificaton,json=messageIdentificaton,proto3" json:"message_identificaton,omitempty"`
	Content              []*Message_TokenValue  `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *Action_MessageType) Reset() {
	*x = Action_MessageType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_MessageType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_MessageType) ProtoMessage() {}

func (x *Action_MessageType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_MessageType.ProtoReflect.Descriptor instead.
func (*Action_MessageType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 18}
}

func (x *Action_MessageType) GetMessageIdentificaton() *CollectionElementType {
	if x != nil {
		return x.MessageIdentificaton
	}
	return nil
}

func (x *Action_MessageType) GetContent() []*Message_TokenValue {
	if x != nil {
		return x.Content
	}
	return nil
}

type Action_SocialMediaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType Action_SocialMediaType_SocialMediaAction `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=rv.data.Action_SocialMediaType_SocialMediaAction" json:"action_type,omitempty"`
	Duration   float64                                  `protobuf:"fixed64,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Action_SocialMediaType) Reset() {
	*x = Action_SocialMediaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_SocialMediaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_SocialMediaType) ProtoMessage() {}

func (x *Action_SocialMediaType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_SocialMediaType.ProtoReflect.Descriptor instead.
func (*Action_SocialMediaType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 19}
}

func (x *Action_SocialMediaType) GetActionType() Action_SocialMediaType_SocialMediaAction {
	if x != nil {
		return x.ActionType
	}
	return Action_SocialMediaType_SOCIAL_MEDIA_ACTION_LENGTH_OF_GOTO_NEXT_TIMER
}

func (x *Action_SocialMediaType) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type Action_CommunicationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIdentification *CollectionElementType              `protobuf:"bytes,1,opt,name=device_identification,json=deviceIdentification,proto3" json:"device_identification,omitempty"`
	Format               string                              `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Description          string                              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Commands             []*Action_CommunicationType_Command `protobuf:"bytes,4,rep,name=commands,proto3" json:"commands,omitempty"`
	// Types that are assignable to CommandTypeData:
	//	*Action_CommunicationType_MidiCommand
	//	*Action_CommunicationType_GlobalCacheCommand_
	//	*Action_CommunicationType_Gvg100Command
	//	*Action_CommunicationType_Sony_BVSCommand
	CommandTypeData isAction_CommunicationType_CommandTypeData `protobuf_oneof:"CommandTypeData"`
}

func (x *Action_CommunicationType) Reset() {
	*x = Action_CommunicationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_CommunicationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_CommunicationType) ProtoMessage() {}

func (x *Action_CommunicationType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_CommunicationType.ProtoReflect.Descriptor instead.
func (*Action_CommunicationType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 20}
}

func (x *Action_CommunicationType) GetDeviceIdentification() *CollectionElementType {
	if x != nil {
		return x.DeviceIdentification
	}
	return nil
}

func (x *Action_CommunicationType) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Action_CommunicationType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Action_CommunicationType) GetCommands() []*Action_CommunicationType_Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (m *Action_CommunicationType) GetCommandTypeData() isAction_CommunicationType_CommandTypeData {
	if m != nil {
		return m.CommandTypeData
	}
	return nil
}

func (x *Action_CommunicationType) GetMidiCommand() *Action_CommunicationType_MIDICommand {
	if x, ok := x.GetCommandTypeData().(*Action_CommunicationType_MidiCommand); ok {
		return x.MidiCommand
	}
	return nil
}

func (x *Action_CommunicationType) GetGlobalCacheCommand() *Action_CommunicationType_GlobalCacheCommand {
	if x, ok := x.GetCommandTypeData().(*Action_CommunicationType_GlobalCacheCommand_); ok {
		return x.GlobalCacheCommand
	}
	return nil
}

func (x *Action_CommunicationType) GetGvg100Command() *Action_CommunicationType_GVG100Command {
	if x, ok := x.GetCommandTypeData().(*Action_CommunicationType_Gvg100Command); ok {
		return x.Gvg100Command
	}
	return nil
}

func (x *Action_CommunicationType) GetSony_BVSCommand() *Action_CommunicationType_SonyBVSCommand {
	if x, ok := x.GetCommandTypeData().(*Action_CommunicationType_Sony_BVSCommand); ok {
		return x.Sony_BVSCommand
	}
	return nil
}

type isAction_CommunicationType_CommandTypeData interface {
	isAction_CommunicationType_CommandTypeData()
}

type Action_CommunicationType_MidiCommand struct {
	MidiCommand *Action_CommunicationType_MIDICommand `protobuf:"bytes,5,opt,name=midi_command,json=midiCommand,proto3,oneof"`
}

type Action_CommunicationType_GlobalCacheCommand_ struct {
	GlobalCacheCommand *Action_CommunicationType_GlobalCacheCommand `protobuf:"bytes,6,opt,name=global_cache_command,json=globalCacheCommand,proto3,oneof"`
}

type Action_CommunicationType_Gvg100Command struct {
	Gvg100Command *Action_CommunicationType_GVG100Command `protobuf:"bytes,7,opt,name=gvg100_command,json=gvg100Command,proto3,oneof"`
}

type Action_CommunicationType_Sony_BVSCommand struct {
	Sony_BVSCommand *Action_CommunicationType_SonyBVSCommand `protobuf:"bytes,8,opt,name=sony_BVS_command,json=sonyBVSCommand,proto3,oneof"`
}

func (*Action_CommunicationType_MidiCommand) isAction_CommunicationType_CommandTypeData() {}

func (*Action_CommunicationType_GlobalCacheCommand_) isAction_CommunicationType_CommandTypeData() {}

func (*Action_CommunicationType_Gvg100Command) isAction_CommunicationType_CommandTypeData() {}

func (*Action_CommunicationType_Sony_BVSCommand) isAction_CommunicationType_CommandTypeData() {}

type Action_MultiScreenType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identification *CollectionElementType `protobuf:"bytes,3,opt,name=identification,proto3" json:"identification,omitempty"`
}

func (x *Action_MultiScreenType) Reset() {
	*x = Action_MultiScreenType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_MultiScreenType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_MultiScreenType) ProtoMessage() {}

func (x *Action_MultiScreenType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_MultiScreenType.ProtoReflect.Descriptor instead.
func (*Action_MultiScreenType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 21}
}

func (x *Action_MultiScreenType) GetIdentification() *CollectionElementType {
	if x != nil {
		return x.Identification
	}
	return nil
}

type Action_DocumentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identification      *CollectionElementType                 `protobuf:"bytes,1,opt,name=identification,proto3" json:"identification,omitempty"`
	SelectedArrangement *UUID                                  `protobuf:"bytes,2,opt,name=selected_arrangement,json=selectedArrangement,proto3" json:"selected_arrangement,omitempty"`
	ContentDestination  Action_DocumentType_ContentDestination `protobuf:"varint,3,opt,name=content_destination,json=contentDestination,proto3,enum=rv.data.Action_DocumentType_ContentDestination" json:"content_destination,omitempty"`
}

func (x *Action_DocumentType) Reset() {
	*x = Action_DocumentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_DocumentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_DocumentType) ProtoMessage() {}

func (x *Action_DocumentType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_DocumentType.ProtoReflect.Descriptor instead.
func (*Action_DocumentType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 22}
}

func (x *Action_DocumentType) GetIdentification() *CollectionElementType {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *Action_DocumentType) GetSelectedArrangement() *UUID {
	if x != nil {
		return x.SelectedArrangement
	}
	return nil
}

func (x *Action_DocumentType) GetContentDestination() Action_DocumentType_ContentDestination {
	if x != nil {
		return x.ContentDestination
	}
	return Action_DocumentType_CONTENT_DESTINATION_GLOBAL
}

type Action_ExternalPresentationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *URL `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Action_ExternalPresentationType) Reset() {
	*x = Action_ExternalPresentationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_ExternalPresentationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_ExternalPresentationType) ProtoMessage() {}

func (x *Action_ExternalPresentationType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_ExternalPresentationType.ProtoReflect.Descriptor instead.
func (*Action_ExternalPresentationType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 23}
}

func (x *Action_ExternalPresentationType) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

type Action_AudienceLookType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identification *CollectionElementType `protobuf:"bytes,1,opt,name=identification,proto3" json:"identification,omitempty"`
}

func (x *Action_AudienceLookType) Reset() {
	*x = Action_AudienceLookType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_AudienceLookType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_AudienceLookType) ProtoMessage() {}

func (x *Action_AudienceLookType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_AudienceLookType.ProtoReflect.Descriptor instead.
func (*Action_AudienceLookType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 24}
}

func (x *Action_AudienceLookType) GetIdentification() *CollectionElementType {
	if x != nil {
		return x.Identification
	}
	return nil
}

type Action_AudioInputType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index          int32                    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	OverrideMode   bool                     `protobuf:"varint,2,opt,name=override_mode,json=overrideMode,proto3" json:"override_mode,omitempty"`
	BehaviorMode   *AudioInput_BehaviorMode `protobuf:"bytes,3,opt,name=behavior_mode,json=behaviorMode,proto3" json:"behavior_mode,omitempty"`
	OverrideVolume bool                     `protobuf:"varint,4,opt,name=override_volume,json=overrideVolume,proto3" json:"override_volume,omitempty"`
	Volume         float64                  `protobuf:"fixed64,5,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *Action_AudioInputType) Reset() {
	*x = Action_AudioInputType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_AudioInputType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_AudioInputType) ProtoMessage() {}

func (x *Action_AudioInputType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_AudioInputType.ProtoReflect.Descriptor instead.
func (*Action_AudioInputType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 25}
}

func (x *Action_AudioInputType) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Action_AudioInputType) GetOverrideMode() bool {
	if x != nil {
		return x.OverrideMode
	}
	return false
}

func (x *Action_AudioInputType) GetBehaviorMode() *AudioInput_BehaviorMode {
	if x != nil {
		return x.BehaviorMode
	}
	return nil
}

func (x *Action_AudioInputType) GetOverrideVolume() bool {
	if x != nil {
		return x.OverrideVolume
	}
	return false
}

func (x *Action_AudioInputType) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type Action_MacroType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identification *CollectionElementType `protobuf:"bytes,1,opt,name=identification,proto3" json:"identification,omitempty"`
}

func (x *Action_MacroType) Reset() {
	*x = Action_MacroType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_MacroType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_MacroType) ProtoMessage() {}

func (x *Action_MacroType) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_MacroType.ProtoReflect.Descriptor instead.
func (*Action_MacroType) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 26}
}

func (x *Action_MacroType) GetIdentification() *CollectionElementType {
	if x != nil {
		return x.Identification
	}
	return nil
}

type Action_MediaType_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Action_MediaType_Image) Reset() {
	*x = Action_MediaType_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_MediaType_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_MediaType_Image) ProtoMessage() {}

func (x *Action_MediaType_Image) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_MediaType_Image.ProtoReflect.Descriptor instead.
func (*Action_MediaType_Image) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 8, 0}
}

type Action_MediaType_Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaybackBehavior Action_MediaType_Video_PlaybackBehavior `protobuf:"varint,1,opt,name=playback_behavior,json=playbackBehavior,proto3,enum=rv.data.Action_MediaType_Video_PlaybackBehavior" json:"playback_behavior,omitempty"`
	EndBehavior      Action_MediaType_Video_EndBehavior      `protobuf:"varint,2,opt,name=end_behavior,json=endBehavior,proto3,enum=rv.data.Action_MediaType_Video_EndBehavior" json:"end_behavior,omitempty"`
	LoopTime         float64                                 `protobuf:"fixed64,3,opt,name=loop_time,json=loopTime,proto3" json:"loop_time,omitempty"`
	TimesToLoop      uint32                                  `protobuf:"varint,4,opt,name=times_to_loop,json=timesToLoop,proto3" json:"times_to_loop,omitempty"`
	SoftLoop         bool                                    `protobuf:"varint,5,opt,name=soft_loop,json=softLoop,proto3" json:"soft_loop,omitempty"`
	SoftLoopDuration float64                                 `protobuf:"fixed64,6,opt,name=soft_loop_duration,json=softLoopDuration,proto3" json:"soft_loop_duration,omitempty"`
}

func (x *Action_MediaType_Video) Reset() {
	*x = Action_MediaType_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_MediaType_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_MediaType_Video) ProtoMessage() {}

func (x *Action_MediaType_Video) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_MediaType_Video.ProtoReflect.Descriptor instead.
func (*Action_MediaType_Video) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 8, 1}
}

func (x *Action_MediaType_Video) GetPlaybackBehavior() Action_MediaType_Video_PlaybackBehavior {
	if x != nil {
		return x.PlaybackBehavior
	}
	return Action_MediaType_Video_PLAYBACK_BEHAVIOR_STOP
}

func (x *Action_MediaType_Video) GetEndBehavior() Action_MediaType_Video_EndBehavior {
	if x != nil {
		return x.EndBehavior
	}
	return Action_MediaType_Video_END_BEHAVIOR_STOP
}

func (x *Action_MediaType_Video) GetLoopTime() float64 {
	if x != nil {
		return x.LoopTime
	}
	return 0
}

func (x *Action_MediaType_Video) GetTimesToLoop() uint32 {
	if x != nil {
		return x.TimesToLoop
	}
	return 0
}

func (x *Action_MediaType_Video) GetSoftLoop() bool {
	if x != nil {
		return x.SoftLoop
	}
	return false
}

func (x *Action_MediaType_Video) GetSoftLoopDuration() float64 {
	if x != nil {
		return x.SoftLoopDuration
	}
	return 0
}

type Action_MediaType_Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaybackBehavior Action_MediaType_Audio_PlaybackBehavior     `protobuf:"varint,1,opt,name=playback_behavior,json=playbackBehavior,proto3,enum=rv.data.Action_MediaType_Audio_PlaybackBehavior" json:"playback_behavior,omitempty"`
	LoopTime         float64                                     `protobuf:"fixed64,2,opt,name=loop_time,json=loopTime,proto3" json:"loop_time,omitempty"`
	TimesToLoop      uint32                                      `protobuf:"varint,3,opt,name=times_to_loop,json=timesToLoop,proto3" json:"times_to_loop,omitempty"`
	AudioType        Action_MediaType_Audio_MediaActionAudioType `protobuf:"varint,4,opt,name=audio_type,json=audioType,proto3,enum=rv.data.Action_MediaType_Audio_MediaActionAudioType" json:"audio_type,omitempty"`
}

func (x *Action_MediaType_Audio) Reset() {
	*x = Action_MediaType_Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_MediaType_Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_MediaType_Audio) ProtoMessage() {}

func (x *Action_MediaType_Audio) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_MediaType_Audio.ProtoReflect.Descriptor instead.
func (*Action_MediaType_Audio) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 8, 2}
}

func (x *Action_MediaType_Audio) GetPlaybackBehavior() Action_MediaType_Audio_PlaybackBehavior {
	if x != nil {
		return x.PlaybackBehavior
	}
	return Action_MediaType_Audio_PLAYBACK_BEHAVIOR_STOP
}

func (x *Action_MediaType_Audio) GetLoopTime() float64 {
	if x != nil {
		return x.LoopTime
	}
	return 0
}

func (x *Action_MediaType_Audio) GetTimesToLoop() uint32 {
	if x != nil {
		return x.TimesToLoop
	}
	return 0
}

func (x *Action_MediaType_Audio) GetAudioType() Action_MediaType_Audio_MediaActionAudioType {
	if x != nil {
		return x.AudioType
	}
	return Action_MediaType_Audio_MEDIA_ACTION_AUDIO_TYPE_TUNE
}

type Action_MediaType_LiveVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Action_MediaType_LiveVideo) Reset() {
	*x = Action_MediaType_LiveVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_MediaType_LiveVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_MediaType_LiveVideo) ProtoMessage() {}

func (x *Action_MediaType_LiveVideo) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_MediaType_LiveVideo.ProtoReflect.Descriptor instead.
func (*Action_MediaType_LiveVideo) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 8, 3}
}

type Action_CommunicationType_Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value            string    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ReplacementRange *IntRange `protobuf:"bytes,3,opt,name=replacement_range,json=replacementRange,proto3" json:"replacement_range,omitempty"`
	PossibleValues   []string  `protobuf:"bytes,4,rep,name=possible_values,json=possibleValues,proto3" json:"possible_values,omitempty"`
}

func (x *Action_CommunicationType_Command) Reset() {
	*x = Action_CommunicationType_Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_CommunicationType_Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_CommunicationType_Command) ProtoMessage() {}

func (x *Action_CommunicationType_Command) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_CommunicationType_Command.ProtoReflect.Descriptor instead.
func (*Action_CommunicationType_Command) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 20, 0}
}

func (x *Action_CommunicationType_Command) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Action_CommunicationType_Command) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Action_CommunicationType_Command) GetReplacementRange() *IntRange {
	if x != nil {
		return x.ReplacementRange
	}
	return nil
}

func (x *Action_CommunicationType_Command) GetPossibleValues() []string {
	if x != nil {
		return x.PossibleValues
	}
	return nil
}

type Action_CommunicationType_MIDICommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State     Action_CommunicationType_MIDICommand_State `protobuf:"varint,1,opt,name=state,proto3,enum=rv.data.Action_CommunicationType_MIDICommand_State" json:"state,omitempty"`
	Channel   uint32                                     `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Note      uint32                                     `protobuf:"varint,3,opt,name=note,proto3" json:"note,omitempty"`
	Intensity uint32                                     `protobuf:"varint,4,opt,name=intensity,proto3" json:"intensity,omitempty"`
}

func (x *Action_CommunicationType_MIDICommand) Reset() {
	*x = Action_CommunicationType_MIDICommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_CommunicationType_MIDICommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_CommunicationType_MIDICommand) ProtoMessage() {}

func (x *Action_CommunicationType_MIDICommand) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_CommunicationType_MIDICommand.ProtoReflect.Descriptor instead.
func (*Action_CommunicationType_MIDICommand) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 20, 1}
}

func (x *Action_CommunicationType_MIDICommand) GetState() Action_CommunicationType_MIDICommand_State {
	if x != nil {
		return x.State
	}
	return Action_CommunicationType_MIDICommand_STATE_ON
}

func (x *Action_CommunicationType_MIDICommand) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *Action_CommunicationType_MIDICommand) GetNote() uint32 {
	if x != nil {
		return x.Note
	}
	return 0
}

func (x *Action_CommunicationType_MIDICommand) GetIntensity() uint32 {
	if x != nil {
		return x.Intensity
	}
	return 0
}

type Action_CommunicationType_GlobalCacheCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandAction Action_CommunicationType_GlobalCacheCommand_CommandAction `protobuf:"varint,1,opt,name=command_action,json=commandAction,proto3,enum=rv.data.Action_CommunicationType_GlobalCacheCommand_CommandAction" json:"command_action,omitempty"`
	Output        uint32                                                    `protobuf:"varint,2,opt,name=output,proto3" json:"output,omitempty"`
	Interval      uint32                                                    `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *Action_CommunicationType_GlobalCacheCommand) Reset() {
	*x = Action_CommunicationType_GlobalCacheCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_CommunicationType_GlobalCacheCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_CommunicationType_GlobalCacheCommand) ProtoMessage() {}

func (x *Action_CommunicationType_GlobalCacheCommand) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_CommunicationType_GlobalCacheCommand.ProtoReflect.Descriptor instead.
func (*Action_CommunicationType_GlobalCacheCommand) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 20, 2}
}

func (x *Action_CommunicationType_GlobalCacheCommand) GetCommandAction() Action_CommunicationType_GlobalCacheCommand_CommandAction {
	if x != nil {
		return x.CommandAction
	}
	return Action_CommunicationType_GlobalCacheCommand_COMMAND_ACTION_ON
}

func (x *Action_CommunicationType_GlobalCacheCommand) GetOutput() uint32 {
	if x != nil {
		return x.Output
	}
	return 0
}

func (x *Action_CommunicationType_GlobalCacheCommand) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type Action_CommunicationType_GVG100Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandAction Action_CommunicationType_GVG100Command_CommandAction `protobuf:"varint,1,opt,name=command_action,json=commandAction,proto3,enum=rv.data.Action_CommunicationType_GVG100Command_CommandAction" json:"command_action,omitempty"`
}

func (x *Action_CommunicationType_GVG100Command) Reset() {
	*x = Action_CommunicationType_GVG100Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_CommunicationType_GVG100Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_CommunicationType_GVG100Command) ProtoMessage() {}

func (x *Action_CommunicationType_GVG100Command) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_CommunicationType_GVG100Command.ProtoReflect.Descriptor instead.
func (*Action_CommunicationType_GVG100Command) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 20, 3}
}

func (x *Action_CommunicationType_GVG100Command) GetCommandAction() Action_CommunicationType_GVG100Command_CommandAction {
	if x != nil {
		return x.CommandAction
	}
	return Action_CommunicationType_GVG100Command_COMMAND_ACTION_FADE_TO_BLACK
}

type Action_CommunicationType_SonyBVSCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandAction Action_CommunicationType_SonyBVSCommand_CommandAction `protobuf:"varint,1,opt,name=command_action,json=commandAction,proto3,enum=rv.data.Action_CommunicationType_SonyBVSCommand_CommandAction" json:"command_action,omitempty"`
}

func (x *Action_CommunicationType_SonyBVSCommand) Reset() {
	*x = Action_CommunicationType_SonyBVSCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_CommunicationType_SonyBVSCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_CommunicationType_SonyBVSCommand) ProtoMessage() {}

func (x *Action_CommunicationType_SonyBVSCommand) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_CommunicationType_SonyBVSCommand.ProtoReflect.Descriptor instead.
func (*Action_CommunicationType_SonyBVSCommand) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0, 20, 4}
}

func (x *Action_CommunicationType_SonyBVSCommand) GetCommandAction() Action_CommunicationType_SonyBVSCommand_CommandAction {
	if x != nil {
		return x.CommandAction
	}
	return Action_CommunicationType_SonyBVSCommand_COMMAND_ACTION_FADE_TO_BLACK
}

var File_action_proto protoreflect.FileDescriptor

var file_action_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff,
	0x58, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08,
	0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x56,
	0x0a, 0x14, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x0a,
	0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x37, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31,
	0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x12, 0x2e, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x49, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x53, 0x0a,
	0x15, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x14, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x12, 0x41, 0x0a, 0x0b,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x53, 0x0a, 0x11, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x64,
	0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xc2, 0x01, 0x0a, 0x07, 0x4f,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x4e, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a,
	0x41, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x1a, 0x4c, 0x0a, 0x13, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0x88, 0x02, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0xcd, 0x06, 0x0a, 0x0d,
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a,
	0x0a, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x65, 0x6e,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x62,
	0x6c, 0x65, 0x6e, 0x64, 0x22, 0xc4, 0x05, 0x0a, 0x09, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x45,
	0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x44, 0x41, 0x52, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x45,
	0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x59,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x41, 0x52, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x45,
	0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x43, 0x52,
	0x45, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x44, 0x47, 0x45, 0x10,
	0x09, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x44, 0x4f, 0x44, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c,
	0x41, 0x59, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0d, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41,
	0x52, 0x44, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4c,
	0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x56, 0x49, 0x44, 0x5f, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x11, 0x12, 0x17, 0x0a,
	0x13, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44,
	0x5f, 0x4d, 0x49, 0x58, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x13, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x55, 0x45, 0x10, 0x17, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x41,
	0x54, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c,
	0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x19,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c,
	0x55, 0x4d, 0x49, 0x4e, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x10, 0x1a, 0x1a, 0x6e, 0x0a, 0x0e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x22, 0x0a, 0x0a, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x38, 0x0a, 0x0b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x1a, 0xfd, 0x0e, 0x0a, 0x09, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x18, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x44, 0x0a, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x1a, 0x07, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x81, 0x05, 0x0a, 0x05, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x12, 0x5d, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x45, 0x6e, 0x64, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x54, 0x6f, 0x4c,
	0x6f, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x4c, 0x6f, 0x6f, 0x70,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x6f,
	0x66, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95,
	0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x45, 0x48, 0x41,
	0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50,
	0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x45,
	0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x22, 0xa4, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x45,
	0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x41,
	0x44, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x41,
	0x44, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x04, 0x1a, 0xf1, 0x03,
	0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x5d, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x54, 0x6f, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x53, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x22, 0x95, 0x01, 0x0a,
	0x10, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x45,
	0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49,
	0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4c, 0x41,
	0x59, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4c,
	0x4f, 0x4f, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x45, 0x48, 0x41,
	0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x03, 0x22, 0x5b, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x01, 0x1a, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x6c,
	0x0a, 0x09, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x03, 0x42, 0x0b, 0x0a, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xb7, 0x01, 0x0a, 0x09, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x1a, 0x3f, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x07, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xf0, 0x02, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x13, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x0b,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x04, 0x1a, 0xca, 0x04, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x56, 0x45,
	0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x49, 0x44,
	0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x10, 0x06,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x10,
	0x07, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x53, 0x10, 0x08, 0x22, 0x5b, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x10, 0x01, 0x1a, 0x58, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9a,
	0x02, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x59, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x0c, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x5c, 0x0a,
	0x0b, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x49, 0x44,
	0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0xc9, 0x01, 0x0a, 0x14,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x64,
	0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x5c, 0x0a, 0x0b, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4c, 0x49, 0x44,
	0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0x52, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x52, 0x0a, 0x08, 0x4d,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x99, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x53, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xf1, 0x01, 0x0a, 0x0f,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x52, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x6e, 0x0a, 0x11, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4f, 0x43, 0x49, 0x41,
	0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x1a,
	0x8d, 0x0e, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x6d,
	0x69, 0x64, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x49, 0x44, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x64, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x68, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x58, 0x0a, 0x0e, 0x67, 0x76, 0x67,
	0x31, 0x30, 0x30, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x47, 0x56, 0x47, 0x31, 0x30, 0x30, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x76, 0x67, 0x31, 0x30, 0x30, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x10, 0x73, 0x6f, 0x6e, 0x79, 0x5f, 0x42, 0x56, 0x53, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x6f, 0x6e, 0x79, 0x42, 0x56, 0x53, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x6f, 0x6e, 0x79, 0x42, 0x56, 0x53, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x1a, 0x9c, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0xca, 0x01, 0x0a, 0x0b, 0x4d, 0x49, 0x44, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x49, 0x44, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x22, 0x24, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x1a, 0xc6, 0x02,
	0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x69, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x27, 0x0a,
	0x23, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x46, 0x46, 0x5f, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0xc7, 0x01, 0x0a, 0x0d, 0x47, 0x56, 0x47, 0x31, 0x30,
	0x30, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x64, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x47, 0x56, 0x47, 0x31, 0x30, 0x30, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0x99, 0x02, 0x0a, 0x0e, 0x53, 0x6f, 0x6e, 0x79, 0x42, 0x56, 0x53, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x65, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x6f, 0x6e, 0x79, 0x42, 0x56, 0x53, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x53, 0x4b, 0x5f, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x53, 0x4b, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x42, 0x11, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x59, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd7, 0x02, 0x0a, 0x0c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x10, 0x01, 0x1a, 0x3a, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x1a, 0x5a, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x6f, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd3, 0x01, 0x0a,
	0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0c, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x1a, 0x53, 0x0a, 0x09, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x46, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x05, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x07, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10,
	0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c,
	0x49, 0x44, 0x45, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0e,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b,
	0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x13, 0x12,
	0x22, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x5f, 0x42, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x42, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x53,
	0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x52, 0x4f, 0x10,
	0x17, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x18, 0x42, 0x10,
	0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2d,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_action_proto_rawDescOnce sync.Once
	file_action_proto_rawDescData = file_action_proto_rawDesc
)

func file_action_proto_rawDescGZIP() []byte {
	file_action_proto_rawDescOnce.Do(func() {
		file_action_proto_rawDescData = protoimpl.X.CompressGZIP(file_action_proto_rawDescData)
	})
	return file_action_proto_rawDescData
}

var file_action_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_action_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_action_proto_goTypes = []interface{}{
	(Action_ActionType)(0),                                         // 0: rv.data.Action.ActionType
	(Action_OldType_Category)(0),                                   // 1: rv.data.Action.OldType.Category
	(Action_BlendModeType_BlendMode)(0),                            // 2: rv.data.Action.BlendModeType.BlendMode
	(Action_MediaType_LayerType)(0),                                // 3: rv.data.Action.MediaType.LayerType
	(Action_MediaType_Video_PlaybackBehavior)(0),                   // 4: rv.data.Action.MediaType.Video.PlaybackBehavior
	(Action_MediaType_Video_EndBehavior)(0),                        // 5: rv.data.Action.MediaType.Video.EndBehavior
	(Action_MediaType_Audio_PlaybackBehavior)(0),                   // 6: rv.data.Action.MediaType.Audio.PlaybackBehavior
	(Action_MediaType_Audio_MediaActionAudioType)(0),               // 7: rv.data.Action.MediaType.Audio.MediaActionAudioType
	(Action_TimerType_TimerAction)(0),                              // 8: rv.data.Action.TimerType.TimerAction
	(Action_ClearType_ClearTargetLayer)(0),                         // 9: rv.data.Action.ClearType.ClearTargetLayer
	(Action_ClearType_ContentDestination)(0),                       // 10: rv.data.Action.ClearType.ContentDestination
	(Action_StageLayoutType_SlideTarget)(0),                        // 11: rv.data.Action.StageLayoutType.SlideTarget
	(Action_SlideDestinationType_SlideTarget)(0),                   // 12: rv.data.Action.SlideDestinationType.SlideTarget
	(Action_SocialMediaType_SocialMediaAction)(0),                  // 13: rv.data.Action.SocialMediaType.SocialMediaAction
	(Action_CommunicationType_MIDICommand_State)(0),                // 14: rv.data.Action.CommunicationType.MIDICommand.State
	(Action_CommunicationType_GlobalCacheCommand_CommandAction)(0), // 15: rv.data.Action.CommunicationType.GlobalCacheCommand.CommandAction
	(Action_CommunicationType_GVG100Command_CommandAction)(0),      // 16: rv.data.Action.CommunicationType.GVG100Command.CommandAction
	(Action_CommunicationType_SonyBVSCommand_CommandAction)(0),     // 17: rv.data.Action.CommunicationType.SonyBVSCommand.CommandAction
	(Action_DocumentType_ContentDestination)(0),                    // 18: rv.data.Action.DocumentType.ContentDestination
	(*Action)(nil),                                      // 19: rv.data.Action
	(*Action_OldType)(nil),                              // 20: rv.data.Action.OldType
	(*Action_Label)(nil),                                // 21: rv.data.Action.Label
	(*Action_LayerIdentification)(nil),                  // 22: rv.data.Action.LayerIdentification
	(*Action_PlaylistItemType)(nil),                     // 23: rv.data.Action.PlaylistItemType
	(*Action_BlendModeType)(nil),                        // 24: rv.data.Action.BlendModeType
	(*Action_TransitionType)(nil),                       // 25: rv.data.Action.TransitionType
	(*Action_DoubleType)(nil),                           // 26: rv.data.Action.DoubleType
	(*Action_EffectsType)(nil),                          // 27: rv.data.Action.EffectsType
	(*Action_MediaType)(nil),                            // 28: rv.data.Action.MediaType
	(*Action_SlideType)(nil),                            // 29: rv.data.Action.SlideType
	(*Action_BackgroundType)(nil),                       // 30: rv.data.Action.BackgroundType
	(*Action_TimerType)(nil),                            // 31: rv.data.Action.TimerType
	(*Action_ClearType)(nil),                            // 32: rv.data.Action.ClearType
	(*Action_ClearGroupType)(nil),                       // 33: rv.data.Action.ClearGroupType
	(*Action_StageLayoutType)(nil),                      // 34: rv.data.Action.StageLayoutType
	(*Action_SlideDestinationType)(nil),                 // 35: rv.data.Action.SlideDestinationType
	(*Action_PropType)(nil),                             // 36: rv.data.Action.PropType
	(*Action_MaskType)(nil),                             // 37: rv.data.Action.MaskType
	(*Action_MessageType)(nil),                          // 38: rv.data.Action.MessageType
	(*Action_SocialMediaType)(nil),                      // 39: rv.data.Action.SocialMediaType
	(*Action_CommunicationType)(nil),                    // 40: rv.data.Action.CommunicationType
	(*Action_MultiScreenType)(nil),                      // 41: rv.data.Action.MultiScreenType
	(*Action_DocumentType)(nil),                         // 42: rv.data.Action.DocumentType
	(*Action_ExternalPresentationType)(nil),             // 43: rv.data.Action.ExternalPresentationType
	(*Action_AudienceLookType)(nil),                     // 44: rv.data.Action.AudienceLookType
	(*Action_AudioInputType)(nil),                       // 45: rv.data.Action.AudioInputType
	(*Action_MacroType)(nil),                            // 46: rv.data.Action.MacroType
	(*Action_MediaType_Image)(nil),                      // 47: rv.data.Action.MediaType.Image
	(*Action_MediaType_Video)(nil),                      // 48: rv.data.Action.MediaType.Video
	(*Action_MediaType_Audio)(nil),                      // 49: rv.data.Action.MediaType.Audio
	(*Action_MediaType_LiveVideo)(nil),                  // 50: rv.data.Action.MediaType.LiveVideo
	(*Action_CommunicationType_Command)(nil),            // 51: rv.data.Action.CommunicationType.Command
	(*Action_CommunicationType_MIDICommand)(nil),        // 52: rv.data.Action.CommunicationType.MIDICommand
	(*Action_CommunicationType_GlobalCacheCommand)(nil), // 53: rv.data.Action.CommunicationType.GlobalCacheCommand
	(*Action_CommunicationType_GVG100Command)(nil),      // 54: rv.data.Action.CommunicationType.GVG100Command
	(*Action_CommunicationType_SonyBVSCommand)(nil),     // 55: rv.data.Action.CommunicationType.SonyBVSCommand
	(*UUID)(nil),                                        // 56: rv.data.UUID
	(*CollectionElementType)(nil),                       // 57: rv.data.CollectionElementType
	(*Color)(nil),                                       // 58: rv.data.Color
	(*Layer_Blending)(nil),                              // 59: rv.data.Layer.Blending
	(*Transition)(nil),                                  // 60: rv.data.Transition
	(*Effect)(nil),                                      // 61: rv.data.Effect
	(*Media)(nil),                                       // 62: rv.data.Media
	(*Template_Slide)(nil),                              // 63: rv.data.Template.Slide
	(*PresentationSlide)(nil),                           // 64: rv.data.PresentationSlide
	(*PropSlide)(nil),                                   // 65: rv.data.PropSlide
	(*Background)(nil),                                  // 66: rv.data.Background
	(*Timer_Configuration)(nil),                         // 67: rv.data.Timer.Configuration
	(*Stage_ScreenAssignment)(nil),                      // 68: rv.data.Stage.ScreenAssignment
	(*Message_TokenValue)(nil),                          // 69: rv.data.Message.TokenValue
	(*URL)(nil),                                         // 70: rv.data.URL
	(*AudioInput_BehaviorMode)(nil),                     // 71: rv.data.AudioInput.BehaviorMode
	(*IntRange)(nil),                                    // 72: rv.data.IntRange
}
var file_action_proto_depIdxs = []int32{
	56, // 0: rv.data.Action.uuid:type_name -> rv.data.UUID
	21, // 1: rv.data.Action.label:type_name -> rv.data.Action.Label
	20, // 2: rv.data.Action.old_type:type_name -> rv.data.Action.OldType
	22, // 3: rv.data.Action.layer_identification:type_name -> rv.data.Action.LayerIdentification
	0,  // 4: rv.data.Action.type:type_name -> rv.data.Action.ActionType
	57, // 5: rv.data.Action.collection_element:type_name -> rv.data.CollectionElementType
	23, // 6: rv.data.Action.playlist_item:type_name -> rv.data.Action.PlaylistItemType
	24, // 7: rv.data.Action.blend_mode:type_name -> rv.data.Action.BlendModeType
	25, // 8: rv.data.Action.transition:type_name -> rv.data.Action.TransitionType
	28, // 9: rv.data.Action.media:type_name -> rv.data.Action.MediaType
	26, // 10: rv.data.Action.double_item:type_name -> rv.data.Action.DoubleType
	27, // 11: rv.data.Action.effects:type_name -> rv.data.Action.EffectsType
	29, // 12: rv.data.Action.slide:type_name -> rv.data.Action.SlideType
	30, // 13: rv.data.Action.background:type_name -> rv.data.Action.BackgroundType
	31, // 14: rv.data.Action.timer:type_name -> rv.data.Action.TimerType
	32, // 15: rv.data.Action.clear:type_name -> rv.data.Action.ClearType
	34, // 16: rv.data.Action.stage:type_name -> rv.data.Action.StageLayoutType
	36, // 17: rv.data.Action.prop:type_name -> rv.data.Action.PropType
	37, // 18: rv.data.Action.mask:type_name -> rv.data.Action.MaskType
	38, // 19: rv.data.Action.message:type_name -> rv.data.Action.MessageType
	39, // 20: rv.data.Action.social_media:type_name -> rv.data.Action.SocialMediaType
	40, // 21: rv.data.Action.communication:type_name -> rv.data.Action.CommunicationType
	41, // 22: rv.data.Action.multi_screen:type_name -> rv.data.Action.MultiScreenType
	42, // 23: rv.data.Action.presentation_document:type_name -> rv.data.Action.DocumentType
	43, // 24: rv.data.Action.external_presentation:type_name -> rv.data.Action.ExternalPresentationType
	44, // 25: rv.data.Action.audience_look:type_name -> rv.data.Action.AudienceLookType
	45, // 26: rv.data.Action.audio_input:type_name -> rv.data.Action.AudioInputType
	35, // 27: rv.data.Action.slide_destination:type_name -> rv.data.Action.SlideDestinationType
	46, // 28: rv.data.Action.macro:type_name -> rv.data.Action.MacroType
	33, // 29: rv.data.Action.clear_group:type_name -> rv.data.Action.ClearGroupType
	1,  // 30: rv.data.Action.OldType.category:type_name -> rv.data.Action.OldType.Category
	58, // 31: rv.data.Action.Label.color:type_name -> rv.data.Color
	56, // 32: rv.data.Action.LayerIdentification.uuid:type_name -> rv.data.UUID
	56, // 33: rv.data.Action.PlaylistItemType.playlist_uuid:type_name -> rv.data.UUID
	56, // 34: rv.data.Action.PlaylistItemType.item_uuid:type_name -> rv.data.UUID
	2,  // 35: rv.data.Action.BlendModeType.blend_mode:type_name -> rv.data.Action.BlendModeType.BlendMode
	59, // 36: rv.data.Action.BlendModeType.blend:type_name -> rv.data.Layer.Blending
	60, // 37: rv.data.Action.TransitionType.transition:type_name -> rv.data.Transition
	61, // 38: rv.data.Action.EffectsType.effects:type_name -> rv.data.Effect
	56, // 39: rv.data.Action.MediaType.selected_effect_preset_uuid:type_name -> rv.data.UUID
	60, // 40: rv.data.Action.MediaType.transition:type_name -> rv.data.Transition
	61, // 41: rv.data.Action.MediaType.effects:type_name -> rv.data.Effect
	62, // 42: rv.data.Action.MediaType.element:type_name -> rv.data.Media
	3,  // 43: rv.data.Action.MediaType.layer_type:type_name -> rv.data.Action.MediaType.LayerType
	47, // 44: rv.data.Action.MediaType.image:type_name -> rv.data.Action.MediaType.Image
	48, // 45: rv.data.Action.MediaType.video:type_name -> rv.data.Action.MediaType.Video
	49, // 46: rv.data.Action.MediaType.audio:type_name -> rv.data.Action.MediaType.Audio
	50, // 47: rv.data.Action.MediaType.live_video:type_name -> rv.data.Action.MediaType.LiveVideo
	63, // 48: rv.data.Action.SlideType.template:type_name -> rv.data.Template.Slide
	64, // 49: rv.data.Action.SlideType.presentation:type_name -> rv.data.PresentationSlide
	65, // 50: rv.data.Action.SlideType.prop:type_name -> rv.data.PropSlide
	66, // 51: rv.data.Action.BackgroundType.element:type_name -> rv.data.Background
	8,  // 52: rv.data.Action.TimerType.action_type:type_name -> rv.data.Action.TimerType.TimerAction
	57, // 53: rv.data.Action.TimerType.timer_identification:type_name -> rv.data.CollectionElementType
	67, // 54: rv.data.Action.TimerType.timer_configuration:type_name -> rv.data.Timer.Configuration
	9,  // 55: rv.data.Action.ClearType.target_layer:type_name -> rv.data.Action.ClearType.ClearTargetLayer
	10, // 56: rv.data.Action.ClearType.content_destination:type_name -> rv.data.Action.ClearType.ContentDestination
	57, // 57: rv.data.Action.ClearGroupType.identification:type_name -> rv.data.CollectionElementType
	68, // 58: rv.data.Action.StageLayoutType.stage_screen_assignments:type_name -> rv.data.Stage.ScreenAssignment
	11, // 59: rv.data.Action.StageLayoutType.slide_target:type_name -> rv.data.Action.StageLayoutType.SlideTarget
	12, // 60: rv.data.Action.SlideDestinationType.slide_target:type_name -> rv.data.Action.SlideDestinationType.SlideTarget
	57, // 61: rv.data.Action.PropType.identification:type_name -> rv.data.CollectionElementType
	57, // 62: rv.data.Action.MaskType.identification:type_name -> rv.data.CollectionElementType
	57, // 63: rv.data.Action.MessageType.message_identificaton:type_name -> rv.data.CollectionElementType
	69, // 64: rv.data.Action.MessageType.content:type_name -> rv.data.Message.TokenValue
	13, // 65: rv.data.Action.SocialMediaType.action_type:type_name -> rv.data.Action.SocialMediaType.SocialMediaAction
	57, // 66: rv.data.Action.CommunicationType.device_identification:type_name -> rv.data.CollectionElementType
	51, // 67: rv.data.Action.CommunicationType.commands:type_name -> rv.data.Action.CommunicationType.Command
	52, // 68: rv.data.Action.CommunicationType.midi_command:type_name -> rv.data.Action.CommunicationType.MIDICommand
	53, // 69: rv.data.Action.CommunicationType.global_cache_command:type_name -> rv.data.Action.CommunicationType.GlobalCacheCommand
	54, // 70: rv.data.Action.CommunicationType.gvg100_command:type_name -> rv.data.Action.CommunicationType.GVG100Command
	55, // 71: rv.data.Action.CommunicationType.sony_BVS_command:type_name -> rv.data.Action.CommunicationType.SonyBVSCommand
	57, // 72: rv.data.Action.MultiScreenType.identification:type_name -> rv.data.CollectionElementType
	57, // 73: rv.data.Action.DocumentType.identification:type_name -> rv.data.CollectionElementType
	56, // 74: rv.data.Action.DocumentType.selected_arrangement:type_name -> rv.data.UUID
	18, // 75: rv.data.Action.DocumentType.content_destination:type_name -> rv.data.Action.DocumentType.ContentDestination
	70, // 76: rv.data.Action.ExternalPresentationType.url:type_name -> rv.data.URL
	57, // 77: rv.data.Action.AudienceLookType.identification:type_name -> rv.data.CollectionElementType
	71, // 78: rv.data.Action.AudioInputType.behavior_mode:type_name -> rv.data.AudioInput.BehaviorMode
	57, // 79: rv.data.Action.MacroType.identification:type_name -> rv.data.CollectionElementType
	4,  // 80: rv.data.Action.MediaType.Video.playback_behavior:type_name -> rv.data.Action.MediaType.Video.PlaybackBehavior
	5,  // 81: rv.data.Action.MediaType.Video.end_behavior:type_name -> rv.data.Action.MediaType.Video.EndBehavior
	6,  // 82: rv.data.Action.MediaType.Audio.playback_behavior:type_name -> rv.data.Action.MediaType.Audio.PlaybackBehavior
	7,  // 83: rv.data.Action.MediaType.Audio.audio_type:type_name -> rv.data.Action.MediaType.Audio.MediaActionAudioType
	72, // 84: rv.data.Action.CommunicationType.Command.replacement_range:type_name -> rv.data.IntRange
	14, // 85: rv.data.Action.CommunicationType.MIDICommand.state:type_name -> rv.data.Action.CommunicationType.MIDICommand.State
	15, // 86: rv.data.Action.CommunicationType.GlobalCacheCommand.command_action:type_name -> rv.data.Action.CommunicationType.GlobalCacheCommand.CommandAction
	16, // 87: rv.data.Action.CommunicationType.GVG100Command.command_action:type_name -> rv.data.Action.CommunicationType.GVG100Command.CommandAction
	17, // 88: rv.data.Action.CommunicationType.SonyBVSCommand.command_action:type_name -> rv.data.Action.CommunicationType.SonyBVSCommand.CommandAction
	89, // [89:89] is the sub-list for method output_type
	89, // [89:89] is the sub-list for method input_type
	89, // [89:89] is the sub-list for extension type_name
	89, // [89:89] is the sub-list for extension extendee
	0,  // [0:89] is the sub-list for field type_name
}

func init() { file_action_proto_init() }
func file_action_proto_init() {
	if File_action_proto != nil {
		return
	}
	file_basicTypes_proto_init()
	file_layers_proto_init()
	file_effects_proto_init()
	file_graphicsData_proto_init()
	file_background_proto_init()
	file_template_proto_init()
	file_presentationSlide_proto_init()
	file_propSlide_proto_init()
	file_timers_proto_init()
	file_messages_proto_init()
	file_stage_proto_init()
	file_input_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_action_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_OldType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_LayerIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_PlaylistItemType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_BlendModeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_TransitionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_DoubleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_EffectsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_MediaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_SlideType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_BackgroundType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_TimerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_ClearType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_ClearGroupType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_StageLayoutType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_SlideDestinationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_PropType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_MaskType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_MessageType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_SocialMediaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_CommunicationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_MultiScreenType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_DocumentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_ExternalPresentationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_AudienceLookType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_AudioInputType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_MacroType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_MediaType_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_MediaType_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_MediaType_Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_MediaType_LiveVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_CommunicationType_Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_CommunicationType_MIDICommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_CommunicationType_GlobalCacheCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_CommunicationType_GVG100Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_CommunicationType_SonyBVSCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_action_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Action_CollectionElement)(nil),
		(*Action_PlaylistItem)(nil),
		(*Action_BlendMode)(nil),
		(*Action_Transition)(nil),
		(*Action_Media)(nil),
		(*Action_DoubleItem)(nil),
		(*Action_Effects)(nil),
		(*Action_Slide)(nil),
		(*Action_Background)(nil),
		(*Action_Timer)(nil),
		(*Action_Clear)(nil),
		(*Action_Stage)(nil),
		(*Action_Prop)(nil),
		(*Action_Mask)(nil),
		(*Action_Message)(nil),
		(*Action_SocialMedia)(nil),
		(*Action_Communication)(nil),
		(*Action_MultiScreen)(nil),
		(*Action_PresentationDocument)(nil),
		(*Action_ExternalPresentation)(nil),
		(*Action_AudienceLook)(nil),
		(*Action_AudioInput)(nil),
		(*Action_SlideDestination)(nil),
		(*Action_Macro)(nil),
		(*Action_ClearGroup)(nil),
	}
	file_action_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Action_MediaType_Image_)(nil),
		(*Action_MediaType_Video_)(nil),
		(*Action_MediaType_Audio_)(nil),
		(*Action_MediaType_LiveVideo_)(nil),
	}
	file_action_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Action_SlideType_Template)(nil),
		(*Action_SlideType_Presentation)(nil),
		(*Action_SlideType_Prop)(nil),
	}
	file_action_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Action_CommunicationType_MidiCommand)(nil),
		(*Action_CommunicationType_GlobalCacheCommand_)(nil),
		(*Action_CommunicationType_Gvg100Command)(nil),
		(*Action_CommunicationType_Sony_BVSCommand)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_action_proto_rawDesc,
			NumEnums:      19,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_action_proto_goTypes,
		DependencyIndexes: file_action_proto_depIdxs,
		EnumInfos:         file_action_proto_enumTypes,
		MessageInfos:      file_action_proto_msgTypes,
	}.Build()
	File_action_proto = out.File
	file_action_proto_rawDesc = nil
	file_action_proto_goTypes = nil
	file_action_proto_depIdxs = nil
}
