// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: screens.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OutputDisplay_Type int32

const (
	OutputDisplay_TYPE_UNKNOWN OutputDisplay_Type = 0
	OutputDisplay_TYPE_SCREEN  OutputDisplay_Type = 1
	OutputDisplay_TYPE_CARD    OutputDisplay_Type = 2
	OutputDisplay_TYPE_NDI     OutputDisplay_Type = 3
	OutputDisplay_TYPE_SYPHON  OutputDisplay_Type = 4
	OutputDisplay_TYPE_CUSTOM  OutputDisplay_Type = 5
)

// Enum value maps for OutputDisplay_Type.
var (
	OutputDisplay_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_SCREEN",
		2: "TYPE_CARD",
		3: "TYPE_NDI",
		4: "TYPE_SYPHON",
		5: "TYPE_CUSTOM",
	}
	OutputDisplay_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"TYPE_SCREEN":  1,
		"TYPE_CARD":    2,
		"TYPE_NDI":     3,
		"TYPE_SYPHON":  4,
		"TYPE_CUSTOM":  5,
	}
)

func (x OutputDisplay_Type) Enum() *OutputDisplay_Type {
	p := new(OutputDisplay_Type)
	*p = x
	return p
}

func (x OutputDisplay_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputDisplay_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_screens_proto_enumTypes[0].Descriptor()
}

func (OutputDisplay_Type) Type() protoreflect.EnumType {
	return &file_screens_proto_enumTypes[0]
}

func (x OutputDisplay_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputDisplay_Type.Descriptor instead.
func (OutputDisplay_Type) EnumDescriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{3, 0}
}

type OutputDisplay_BlackmagicAlphaKeySettings_KeyMode int32

const (
	OutputDisplay_BlackmagicAlphaKeySettings_KEY_MODE_INTERNAL OutputDisplay_BlackmagicAlphaKeySettings_KeyMode = 0
	OutputDisplay_BlackmagicAlphaKeySettings_KEY_MODE_EXTERNAL OutputDisplay_BlackmagicAlphaKeySettings_KeyMode = 1
)

// Enum value maps for OutputDisplay_BlackmagicAlphaKeySettings_KeyMode.
var (
	OutputDisplay_BlackmagicAlphaKeySettings_KeyMode_name = map[int32]string{
		0: "KEY_MODE_INTERNAL",
		1: "KEY_MODE_EXTERNAL",
	}
	OutputDisplay_BlackmagicAlphaKeySettings_KeyMode_value = map[string]int32{
		"KEY_MODE_INTERNAL": 0,
		"KEY_MODE_EXTERNAL": 1,
	}
)

func (x OutputDisplay_BlackmagicAlphaKeySettings_KeyMode) Enum() *OutputDisplay_BlackmagicAlphaKeySettings_KeyMode {
	p := new(OutputDisplay_BlackmagicAlphaKeySettings_KeyMode)
	*p = x
	return p
}

func (x OutputDisplay_BlackmagicAlphaKeySettings_KeyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputDisplay_BlackmagicAlphaKeySettings_KeyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_screens_proto_enumTypes[1].Descriptor()
}

func (OutputDisplay_BlackmagicAlphaKeySettings_KeyMode) Type() protoreflect.EnumType {
	return &file_screens_proto_enumTypes[1]
}

func (x OutputDisplay_BlackmagicAlphaKeySettings_KeyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputDisplay_BlackmagicAlphaKeySettings_KeyMode.Descriptor instead.
func (OutputDisplay_BlackmagicAlphaKeySettings_KeyMode) EnumDescriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{3, 0, 0}
}

type EdgeBlend_Mode int32

const (
	EdgeBlend_MODE_LINEAR    EdgeBlend_Mode = 0
	EdgeBlend_MODE_CUBIC     EdgeBlend_Mode = 1
	EdgeBlend_MODE_QUADRATIC EdgeBlend_Mode = 2
)

// Enum value maps for EdgeBlend_Mode.
var (
	EdgeBlend_Mode_name = map[int32]string{
		0: "MODE_LINEAR",
		1: "MODE_CUBIC",
		2: "MODE_QUADRATIC",
	}
	EdgeBlend_Mode_value = map[string]int32{
		"MODE_LINEAR":    0,
		"MODE_CUBIC":     1,
		"MODE_QUADRATIC": 2,
	}
)

func (x EdgeBlend_Mode) Enum() *EdgeBlend_Mode {
	p := new(EdgeBlend_Mode)
	*p = x
	return p
}

func (x EdgeBlend_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeBlend_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_screens_proto_enumTypes[2].Descriptor()
}

func (EdgeBlend_Mode) Type() protoreflect.EnumType {
	return &file_screens_proto_enumTypes[2]
}

func (x EdgeBlend_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeBlend_Mode.Descriptor instead.
func (EdgeBlend_Mode) EnumDescriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{4, 0}
}

type EdgeBlend_Screen_Edge int32

const (
	EdgeBlend_Screen_EDGE_UNKNOWN EdgeBlend_Screen_Edge = 0
	EdgeBlend_Screen_EDGE_LEFT    EdgeBlend_Screen_Edge = 1
	EdgeBlend_Screen_EDGE_RIGHT   EdgeBlend_Screen_Edge = 2
	EdgeBlend_Screen_EDGE_TOP     EdgeBlend_Screen_Edge = 3
	EdgeBlend_Screen_EDGE_BOTTOM  EdgeBlend_Screen_Edge = 4
)

// Enum value maps for EdgeBlend_Screen_Edge.
var (
	EdgeBlend_Screen_Edge_name = map[int32]string{
		0: "EDGE_UNKNOWN",
		1: "EDGE_LEFT",
		2: "EDGE_RIGHT",
		3: "EDGE_TOP",
		4: "EDGE_BOTTOM",
	}
	EdgeBlend_Screen_Edge_value = map[string]int32{
		"EDGE_UNKNOWN": 0,
		"EDGE_LEFT":    1,
		"EDGE_RIGHT":   2,
		"EDGE_TOP":     3,
		"EDGE_BOTTOM":  4,
	}
)

func (x EdgeBlend_Screen_Edge) Enum() *EdgeBlend_Screen_Edge {
	p := new(EdgeBlend_Screen_Edge)
	*p = x
	return p
}

func (x EdgeBlend_Screen_Edge) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeBlend_Screen_Edge) Descriptor() protoreflect.EnumDescriptor {
	return file_screens_proto_enumTypes[3].Descriptor()
}

func (EdgeBlend_Screen_Edge) Type() protoreflect.EnumType {
	return &file_screens_proto_enumTypes[3]
}

func (x EdgeBlend_Screen_Edge) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeBlend_Screen_Edge.Descriptor instead.
func (EdgeBlend_Screen_Edge) EnumDescriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{4, 0, 0}
}

type EdgeBlend_Screen_Mode int32

const (
	EdgeBlend_Screen_MODE_LINEAR    EdgeBlend_Screen_Mode = 0
	EdgeBlend_Screen_MODE_CUBIC     EdgeBlend_Screen_Mode = 1
	EdgeBlend_Screen_MODE_QUADRATIC EdgeBlend_Screen_Mode = 2
)

// Enum value maps for EdgeBlend_Screen_Mode.
var (
	EdgeBlend_Screen_Mode_name = map[int32]string{
		0: "MODE_LINEAR",
		1: "MODE_CUBIC",
		2: "MODE_QUADRATIC",
	}
	EdgeBlend_Screen_Mode_value = map[string]int32{
		"MODE_LINEAR":    0,
		"MODE_CUBIC":     1,
		"MODE_QUADRATIC": 2,
	}
)

func (x EdgeBlend_Screen_Mode) Enum() *EdgeBlend_Screen_Mode {
	p := new(EdgeBlend_Screen_Mode)
	*p = x
	return p
}

func (x EdgeBlend_Screen_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeBlend_Screen_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_screens_proto_enumTypes[4].Descriptor()
}

func (EdgeBlend_Screen_Mode) Type() protoreflect.EnumType {
	return &file_screens_proto_enumTypes[4]
}

func (x EdgeBlend_Screen_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeBlend_Screen_Mode.Descriptor instead.
func (EdgeBlend_Screen_Mode) EnumDescriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{4, 0, 1}
}

type Screen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                          *UUID                     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                          string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color                         *Color                    `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Bounds                        *Graphics_Rect            `protobuf:"bytes,4,opt,name=bounds,proto3" json:"bounds,omitempty"`
	AspectRatioLocked             bool                      `protobuf:"varint,5,opt,name=aspect_ratio_locked,json=aspectRatioLocked,proto3" json:"aspect_ratio_locked,omitempty"`
	OutputBoundsAspectRatioLocked bool                      `protobuf:"varint,6,opt,name=output_bounds_aspect_ratio_locked,json=outputBoundsAspectRatioLocked,proto3" json:"output_bounds_aspect_ratio_locked,omitempty"`
	CornerPinningEnabled          bool                      `protobuf:"varint,7,opt,name=corner_pinning_enabled,json=cornerPinningEnabled,proto3" json:"corner_pinning_enabled,omitempty"`
	SubscreenUnitRect             *Graphics_Rect            `protobuf:"bytes,8,opt,name=subscreen_unit_rect,json=subscreenUnitRect,proto3" json:"subscreen_unit_rect,omitempty"`
	Rotation                      float64                   `protobuf:"fixed64,9,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Gamma                         float64                   `protobuf:"fixed64,10,opt,name=gamma,proto3" json:"gamma,omitempty"`
	BlackLevel                    float64                   `protobuf:"fixed64,11,opt,name=black_level,json=blackLevel,proto3" json:"black_level,omitempty"`
	BlendedEdges                  uint32                    `protobuf:"varint,12,opt,name=blended_edges,json=blendedEdges,proto3" json:"blended_edges,omitempty"`
	CornerValues                  *CornerValues             `protobuf:"bytes,13,opt,name=corner_values,json=cornerValues,proto3" json:"corner_values,omitempty"`
	OutputDisplay                 *OutputDisplay            `protobuf:"bytes,14,opt,name=output_display,json=outputDisplay,proto3" json:"output_display,omitempty"`
	ColorEnabled                  bool                      `protobuf:"varint,15,opt,name=color_enabled,json=colorEnabled,proto3" json:"color_enabled,omitempty"`
	ColorAdjustment               *Screen_ColorAdjustment   `protobuf:"bytes,16,opt,name=color_adjustment,json=colorAdjustment,proto3" json:"color_adjustment,omitempty"`
	BlendCompensation             *Screen_BlendCompensation `protobuf:"bytes,17,opt,name=blend_compensation,json=blendCompensation,proto3" json:"blend_compensation,omitempty"`
}

func (x *Screen) Reset() {
	*x = Screen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_screens_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Screen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Screen) ProtoMessage() {}

func (x *Screen) ProtoReflect() protoreflect.Message {
	mi := &file_screens_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Screen.ProtoReflect.Descriptor instead.
func (*Screen) Descriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{0}
}

func (x *Screen) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Screen) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Screen) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Screen) GetBounds() *Graphics_Rect {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *Screen) GetAspectRatioLocked() bool {
	if x != nil {
		return x.AspectRatioLocked
	}
	return false
}

func (x *Screen) GetOutputBoundsAspectRatioLocked() bool {
	if x != nil {
		return x.OutputBoundsAspectRatioLocked
	}
	return false
}

func (x *Screen) GetCornerPinningEnabled() bool {
	if x != nil {
		return x.CornerPinningEnabled
	}
	return false
}

func (x *Screen) GetSubscreenUnitRect() *Graphics_Rect {
	if x != nil {
		return x.SubscreenUnitRect
	}
	return nil
}

func (x *Screen) GetRotation() float64 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *Screen) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *Screen) GetBlackLevel() float64 {
	if x != nil {
		return x.BlackLevel
	}
	return 0
}

func (x *Screen) GetBlendedEdges() uint32 {
	if x != nil {
		return x.BlendedEdges
	}
	return 0
}

func (x *Screen) GetCornerValues() *CornerValues {
	if x != nil {
		return x.CornerValues
	}
	return nil
}

func (x *Screen) GetOutputDisplay() *OutputDisplay {
	if x != nil {
		return x.OutputDisplay
	}
	return nil
}

func (x *Screen) GetColorEnabled() bool {
	if x != nil {
		return x.ColorEnabled
	}
	return false
}

func (x *Screen) GetColorAdjustment() *Screen_ColorAdjustment {
	if x != nil {
		return x.ColorAdjustment
	}
	return nil
}

func (x *Screen) GetBlendCompensation() *Screen_BlendCompensation {
	if x != nil {
		return x.BlendCompensation
	}
	return nil
}

type CornerValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLeft     *Graphics_Point `protobuf:"bytes,1,opt,name=top_left,json=topLeft,proto3" json:"top_left,omitempty"`
	TopRight    *Graphics_Point `protobuf:"bytes,2,opt,name=top_right,json=topRight,proto3" json:"top_right,omitempty"`
	BottomLeft  *Graphics_Point `protobuf:"bytes,3,opt,name=bottom_left,json=bottomLeft,proto3" json:"bottom_left,omitempty"`
	BottomRight *Graphics_Point `protobuf:"bytes,4,opt,name=bottom_right,json=bottomRight,proto3" json:"bottom_right,omitempty"`
}

func (x *CornerValues) Reset() {
	*x = CornerValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_screens_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CornerValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CornerValues) ProtoMessage() {}

func (x *CornerValues) ProtoReflect() protoreflect.Message {
	mi := &file_screens_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CornerValues.ProtoReflect.Descriptor instead.
func (*CornerValues) Descriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{1}
}

func (x *CornerValues) GetTopLeft() *Graphics_Point {
	if x != nil {
		return x.TopLeft
	}
	return nil
}

func (x *CornerValues) GetTopRight() *Graphics_Point {
	if x != nil {
		return x.TopRight
	}
	return nil
}

func (x *CornerValues) GetBottomLeft() *Graphics_Point {
	if x != nil {
		return x.BottomLeft
	}
	return nil
}

func (x *CornerValues) GetBottomRight() *Graphics_Point {
	if x != nil {
		return x.BottomRight
	}
	return nil
}

type DisplayMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Width       uint32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height      uint32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	RefreshRate float64 `protobuf:"fixed64,4,opt,name=refresh_rate,json=refreshRate,proto3" json:"refresh_rate,omitempty"`
	Interlaced  bool    `protobuf:"varint,5,opt,name=interlaced,proto3" json:"interlaced,omitempty"`
}

func (x *DisplayMode) Reset() {
	*x = DisplayMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_screens_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayMode) ProtoMessage() {}

func (x *DisplayMode) ProtoReflect() protoreflect.Message {
	mi := &file_screens_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayMode.ProtoReflect.Descriptor instead.
func (*DisplayMode) Descriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{2}
}

func (x *DisplayMode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DisplayMode) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *DisplayMode) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DisplayMode) GetRefreshRate() float64 {
	if x != nil {
		return x.RefreshRate
	}
	return 0
}

func (x *DisplayMode) GetInterlaced() bool {
	if x != nil {
		return x.Interlaced
	}
	return false
}

type OutputDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Model      string             `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Serial     string             `protobuf:"bytes,3,opt,name=serial,proto3" json:"serial,omitempty"`
	DeviceName string             `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Vendor     string             `protobuf:"bytes,5,opt,name=vendor,proto3" json:"vendor,omitempty"`
	ModeIndex  uint32             `protobuf:"varint,6,opt,name=modeIndex,proto3" json:"modeIndex,omitempty"`
	Bounds     *Graphics_Rect     `protobuf:"bytes,7,opt,name=bounds,proto3" json:"bounds,omitempty"`
	Type       OutputDisplay_Type `protobuf:"varint,8,opt,name=type,proto3,enum=rv.data.OutputDisplay_Type" json:"type,omitempty"`
	Mode       *DisplayMode       `protobuf:"bytes,9,opt,name=mode,proto3" json:"mode,omitempty"`
	RenderId   string             `protobuf:"bytes,10,opt,name=render_id,json=renderId,proto3" json:"render_id,omitempty"`
	// Types that are assignable to AlphaKeySettings:
	//	*OutputDisplay_BlackMagicAlphaKeySettings
	AlphaKeySettings isOutputDisplay_AlphaKeySettings `protobuf_oneof:"AlphaKeySettings"`
}

func (x *OutputDisplay) Reset() {
	*x = OutputDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_screens_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputDisplay) ProtoMessage() {}

func (x *OutputDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_screens_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputDisplay.ProtoReflect.Descriptor instead.
func (*OutputDisplay) Descriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{3}
}

func (x *OutputDisplay) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OutputDisplay) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *OutputDisplay) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *OutputDisplay) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *OutputDisplay) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *OutputDisplay) GetModeIndex() uint32 {
	if x != nil {
		return x.ModeIndex
	}
	return 0
}

func (x *OutputDisplay) GetBounds() *Graphics_Rect {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *OutputDisplay) GetType() OutputDisplay_Type {
	if x != nil {
		return x.Type
	}
	return OutputDisplay_TYPE_UNKNOWN
}

func (x *OutputDisplay) GetMode() *DisplayMode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *OutputDisplay) GetRenderId() string {
	if x != nil {
		return x.RenderId
	}
	return ""
}

func (m *OutputDisplay) GetAlphaKeySettings() isOutputDisplay_AlphaKeySettings {
	if m != nil {
		return m.AlphaKeySettings
	}
	return nil
}

func (x *OutputDisplay) GetBlackMagicAlphaKeySettings() *OutputDisplay_BlackmagicAlphaKeySettings {
	if x, ok := x.GetAlphaKeySettings().(*OutputDisplay_BlackMagicAlphaKeySettings); ok {
		return x.BlackMagicAlphaKeySettings
	}
	return nil
}

type isOutputDisplay_AlphaKeySettings interface {
	isOutputDisplay_AlphaKeySettings()
}

type OutputDisplay_BlackMagicAlphaKeySettings struct {
	BlackMagicAlphaKeySettings *OutputDisplay_BlackmagicAlphaKeySettings `protobuf:"bytes,11,opt,name=black_magic_alpha_key_settings,json=blackMagicAlphaKeySettings,proto3,oneof"`
}

func (*OutputDisplay_BlackMagicAlphaKeySettings) isOutputDisplay_AlphaKeySettings() {}

type EdgeBlend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         *UUID             `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Radius       float64           `protobuf:"fixed64,2,opt,name=radius,proto3" json:"radius,omitempty"`
	Intensity    float64           `protobuf:"fixed64,3,opt,name=intensity,proto3" json:"intensity,omitempty"`
	Mode         EdgeBlend_Mode    `protobuf:"varint,4,opt,name=mode,proto3,enum=rv.data.EdgeBlend_Mode" json:"mode,omitempty"`
	FirstScreen  *EdgeBlend_Screen `protobuf:"bytes,5,opt,name=first_screen,json=firstScreen,proto3" json:"first_screen,omitempty"`
	SecondScreen *EdgeBlend_Screen `protobuf:"bytes,6,opt,name=second_screen,json=secondScreen,proto3" json:"second_screen,omitempty"`
	LeftScreen   *EdgeBlend_Screen `protobuf:"bytes,7,opt,name=left_screen,json=leftScreen,proto3" json:"left_screen,omitempty"`
	RightScreen  *EdgeBlend_Screen `protobuf:"bytes,8,opt,name=right_screen,json=rightScreen,proto3" json:"right_screen,omitempty"`
	TopScreen    *EdgeBlend_Screen `protobuf:"bytes,9,opt,name=top_screen,json=topScreen,proto3" json:"top_screen,omitempty"`
	BottomScreen *EdgeBlend_Screen `protobuf:"bytes,10,opt,name=bottom_screen,json=bottomScreen,proto3" json:"bottom_screen,omitempty"`
}

func (x *EdgeBlend) Reset() {
	*x = EdgeBlend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_screens_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeBlend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeBlend) ProtoMessage() {}

func (x *EdgeBlend) ProtoReflect() protoreflect.Message {
	mi := &file_screens_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeBlend.ProtoReflect.Descriptor instead.
func (*EdgeBlend) Descriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{4}
}

func (x *EdgeBlend) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *EdgeBlend) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *EdgeBlend) GetIntensity() float64 {
	if x != nil {
		return x.Intensity
	}
	return 0
}

func (x *EdgeBlend) GetMode() EdgeBlend_Mode {
	if x != nil {
		return x.Mode
	}
	return EdgeBlend_MODE_LINEAR
}

func (x *EdgeBlend) GetFirstScreen() *EdgeBlend_Screen {
	if x != nil {
		return x.FirstScreen
	}
	return nil
}

func (x *EdgeBlend) GetSecondScreen() *EdgeBlend_Screen {
	if x != nil {
		return x.SecondScreen
	}
	return nil
}

func (x *EdgeBlend) GetLeftScreen() *EdgeBlend_Screen {
	if x != nil {
		return x.LeftScreen
	}
	return nil
}

func (x *EdgeBlend) GetRightScreen() *EdgeBlend_Screen {
	if x != nil {
		return x.RightScreen
	}
	return nil
}

func (x *EdgeBlend) GetTopScreen() *EdgeBlend_Screen {
	if x != nil {
		return x.TopScreen
	}
	return nil
}

func (x *EdgeBlend) GetBottomScreen() *EdgeBlend_Screen {
	if x != nil {
		return x.BottomScreen
	}
	return nil
}

type Screen_ColorAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamma      float64 `protobuf:"fixed64,1,opt,name=gamma,proto3" json:"gamma,omitempty"`
	BlackLevel float64 `protobuf:"fixed64,2,opt,name=black_level,json=blackLevel,proto3" json:"black_level,omitempty"`
	RedLevel   float64 `protobuf:"fixed64,3,opt,name=red_level,json=redLevel,proto3" json:"red_level,omitempty"`
	GreenLevel float64 `protobuf:"fixed64,4,opt,name=green_level,json=greenLevel,proto3" json:"green_level,omitempty"`
	BlueLevel  float64 `protobuf:"fixed64,5,opt,name=blue_level,json=blueLevel,proto3" json:"blue_level,omitempty"`
	Brightness float64 `protobuf:"fixed64,6,opt,name=brightness,proto3" json:"brightness,omitempty"`
	Contrast   float64 `protobuf:"fixed64,7,opt,name=contrast,proto3" json:"contrast,omitempty"`
}

func (x *Screen_ColorAdjustment) Reset() {
	*x = Screen_ColorAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_screens_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Screen_ColorAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Screen_ColorAdjustment) ProtoMessage() {}

func (x *Screen_ColorAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_screens_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Screen_ColorAdjustment.ProtoReflect.Descriptor instead.
func (*Screen_ColorAdjustment) Descriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Screen_ColorAdjustment) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *Screen_ColorAdjustment) GetBlackLevel() float64 {
	if x != nil {
		return x.BlackLevel
	}
	return 0
}

func (x *Screen_ColorAdjustment) GetRedLevel() float64 {
	if x != nil {
		return x.RedLevel
	}
	return 0
}

func (x *Screen_ColorAdjustment) GetGreenLevel() float64 {
	if x != nil {
		return x.GreenLevel
	}
	return 0
}

func (x *Screen_ColorAdjustment) GetBlueLevel() float64 {
	if x != nil {
		return x.BlueLevel
	}
	return 0
}

func (x *Screen_ColorAdjustment) GetBrightness() float64 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *Screen_ColorAdjustment) GetContrast() float64 {
	if x != nil {
		return x.Contrast
	}
	return 0
}

type Screen_BlendCompensation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlackLevel float64 `protobuf:"fixed64,1,opt,name=black_level,json=blackLevel,proto3" json:"black_level,omitempty"`
}

func (x *Screen_BlendCompensation) Reset() {
	*x = Screen_BlendCompensation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_screens_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Screen_BlendCompensation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Screen_BlendCompensation) ProtoMessage() {}

func (x *Screen_BlendCompensation) ProtoReflect() protoreflect.Message {
	mi := &file_screens_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Screen_BlendCompensation.ProtoReflect.Descriptor instead.
func (*Screen_BlendCompensation) Descriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Screen_BlendCompensation) GetBlackLevel() float64 {
	if x != nil {
		return x.BlackLevel
	}
	return 0
}

type OutputDisplay_BlackmagicAlphaKeySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool                                             `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	KeyMode    OutputDisplay_BlackmagicAlphaKeySettings_KeyMode `protobuf:"varint,2,opt,name=key_mode,json=keyMode,proto3,enum=rv.data.OutputDisplay_BlackmagicAlphaKeySettings_KeyMode" json:"key_mode,omitempty"`
	BlendValue float64                                          `protobuf:"fixed64,3,opt,name=blend_value,json=blendValue,proto3" json:"blend_value,omitempty"`
}

func (x *OutputDisplay_BlackmagicAlphaKeySettings) Reset() {
	*x = OutputDisplay_BlackmagicAlphaKeySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_screens_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputDisplay_BlackmagicAlphaKeySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputDisplay_BlackmagicAlphaKeySettings) ProtoMessage() {}

func (x *OutputDisplay_BlackmagicAlphaKeySettings) ProtoReflect() protoreflect.Message {
	mi := &file_screens_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputDisplay_BlackmagicAlphaKeySettings.ProtoReflect.Descriptor instead.
func (*OutputDisplay_BlackmagicAlphaKeySettings) Descriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{3, 0}
}

func (x *OutputDisplay_BlackmagicAlphaKeySettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *OutputDisplay_BlackmagicAlphaKeySettings) GetKeyMode() OutputDisplay_BlackmagicAlphaKeySettings_KeyMode {
	if x != nil {
		return x.KeyMode
	}
	return OutputDisplay_BlackmagicAlphaKeySettings_KEY_MODE_INTERNAL
}

func (x *OutputDisplay_BlackmagicAlphaKeySettings) GetBlendValue() float64 {
	if x != nil {
		return x.BlendValue
	}
	return 0
}

type EdgeBlend_Screen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       *UUID                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Edge       EdgeBlend_Screen_Edge `protobuf:"varint,2,opt,name=edge,proto3,enum=rv.data.EdgeBlend_Screen_Edge" json:"edge,omitempty"`
	Gamma      float64               `protobuf:"fixed64,3,opt,name=gamma,proto3" json:"gamma,omitempty"`
	BlackLevel float64               `protobuf:"fixed64,4,opt,name=black_level,json=blackLevel,proto3" json:"black_level,omitempty"`
	Mode       EdgeBlend_Screen_Mode `protobuf:"varint,5,opt,name=mode,proto3,enum=rv.data.EdgeBlend_Screen_Mode" json:"mode,omitempty"`
	Radius     float64               `protobuf:"fixed64,6,opt,name=radius,proto3" json:"radius,omitempty"`
	Intensity  float64               `protobuf:"fixed64,7,opt,name=intensity,proto3" json:"intensity,omitempty"`
}

func (x *EdgeBlend_Screen) Reset() {
	*x = EdgeBlend_Screen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_screens_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeBlend_Screen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeBlend_Screen) ProtoMessage() {}

func (x *EdgeBlend_Screen) ProtoReflect() protoreflect.Message {
	mi := &file_screens_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeBlend_Screen.ProtoReflect.Descriptor instead.
func (*EdgeBlend_Screen) Descriptor() ([]byte, []int) {
	return file_screens_proto_rawDescGZIP(), []int{4, 0}
}

func (x *EdgeBlend_Screen) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *EdgeBlend_Screen) GetEdge() EdgeBlend_Screen_Edge {
	if x != nil {
		return x.Edge
	}
	return EdgeBlend_Screen_EDGE_UNKNOWN
}

func (x *EdgeBlend_Screen) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *EdgeBlend_Screen) GetBlackLevel() float64 {
	if x != nil {
		return x.BlackLevel
	}
	return 0
}

func (x *EdgeBlend_Screen) GetMode() EdgeBlend_Screen_Mode {
	if x != nil {
		return x.Mode
	}
	return EdgeBlend_Screen_MODE_LINEAR
}

func (x *EdgeBlend_Screen) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *EdgeBlend_Screen) GetIntensity() float64 {
	if x != nil {
		return x.Intensity
	}
	return 0
}

var File_screens_proto protoreflect.FileDescriptor

var file_screens_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd,
	0x08, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x41,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x11, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61,
	0x6d, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e,
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe1, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x1a, 0x34, 0x0a, 0x11, 0x42, 0x6c, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xee,
	0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x08, 0x74, 0x6f, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x92, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x22, 0xaf, 0x06, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e,
	0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x77, 0x0a, 0x1e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x48, 0x00, 0x52, 0x1a, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a,
	0xe6, 0x01, 0x0a, 0x1a, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4b, 0x65,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x37, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x45,
	0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x22, 0x68, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45,
	0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x44, 0x49, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x50, 0x48, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x10, 0x05, 0x42, 0x12, 0x0a, 0x10, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xd8, 0x07, 0x0a, 0x09, 0x45, 0x64, 0x67, 0x65, 0x42,
	0x6c, 0x65, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42,
	0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0b, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x6c,
	0x65, 0x6e, 0x64, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x65, 0x6e,
	0x64, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x0d,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0c,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x1a, 0x95, 0x03, 0x0a,
	0x06, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x65, 0x64,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67,
	0x61, 0x6d, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x22,
	0x56, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x44, 0x47, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x47,
	0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x44, 0x47, 0x45,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x44, 0x47, 0x45,
	0x5f, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42,
	0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x22, 0x3b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x55, 0x42, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x44, 0x52, 0x41, 0x54,
	0x49, 0x43, 0x10, 0x02, 0x22, 0x3b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x55, 0x42, 0x49, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x44, 0x52, 0x41, 0x54, 0x49, 0x43, 0x10,
	0x02, 0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_screens_proto_rawDescOnce sync.Once
	file_screens_proto_rawDescData = file_screens_proto_rawDesc
)

func file_screens_proto_rawDescGZIP() []byte {
	file_screens_proto_rawDescOnce.Do(func() {
		file_screens_proto_rawDescData = protoimpl.X.CompressGZIP(file_screens_proto_rawDescData)
	})
	return file_screens_proto_rawDescData
}

var file_screens_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_screens_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_screens_proto_goTypes = []interface{}{
	(OutputDisplay_Type)(0),                               // 0: rv.data.OutputDisplay.Type
	(OutputDisplay_BlackmagicAlphaKeySettings_KeyMode)(0), // 1: rv.data.OutputDisplay.BlackmagicAlphaKeySettings.KeyMode
	(EdgeBlend_Mode)(0),                                   // 2: rv.data.EdgeBlend.Mode
	(EdgeBlend_Screen_Edge)(0),                            // 3: rv.data.EdgeBlend.Screen.Edge
	(EdgeBlend_Screen_Mode)(0),                            // 4: rv.data.EdgeBlend.Screen.Mode
	(*Screen)(nil),                                        // 5: rv.data.Screen
	(*CornerValues)(nil),                                  // 6: rv.data.CornerValues
	(*DisplayMode)(nil),                                   // 7: rv.data.DisplayMode
	(*OutputDisplay)(nil),                                 // 8: rv.data.OutputDisplay
	(*EdgeBlend)(nil),                                     // 9: rv.data.EdgeBlend
	(*Screen_ColorAdjustment)(nil),                        // 10: rv.data.Screen.ColorAdjustment
	(*Screen_BlendCompensation)(nil),                      // 11: rv.data.Screen.BlendCompensation
	(*OutputDisplay_BlackmagicAlphaKeySettings)(nil),      // 12: rv.data.OutputDisplay.BlackmagicAlphaKeySettings
	(*EdgeBlend_Screen)(nil),                              // 13: rv.data.EdgeBlend.Screen
	(*UUID)(nil),                                          // 14: rv.data.UUID
	(*Color)(nil),                                         // 15: rv.data.Color
	(*Graphics_Rect)(nil),                                 // 16: rv.data.Graphics.Rect
	(*Graphics_Point)(nil),                                // 17: rv.data.Graphics.Point
}
var file_screens_proto_depIdxs = []int32{
	14, // 0: rv.data.Screen.uuid:type_name -> rv.data.UUID
	15, // 1: rv.data.Screen.color:type_name -> rv.data.Color
	16, // 2: rv.data.Screen.bounds:type_name -> rv.data.Graphics.Rect
	16, // 3: rv.data.Screen.subscreen_unit_rect:type_name -> rv.data.Graphics.Rect
	6,  // 4: rv.data.Screen.corner_values:type_name -> rv.data.CornerValues
	8,  // 5: rv.data.Screen.output_display:type_name -> rv.data.OutputDisplay
	10, // 6: rv.data.Screen.color_adjustment:type_name -> rv.data.Screen.ColorAdjustment
	11, // 7: rv.data.Screen.blend_compensation:type_name -> rv.data.Screen.BlendCompensation
	17, // 8: rv.data.CornerValues.top_left:type_name -> rv.data.Graphics.Point
	17, // 9: rv.data.CornerValues.top_right:type_name -> rv.data.Graphics.Point
	17, // 10: rv.data.CornerValues.bottom_left:type_name -> rv.data.Graphics.Point
	17, // 11: rv.data.CornerValues.bottom_right:type_name -> rv.data.Graphics.Point
	16, // 12: rv.data.OutputDisplay.bounds:type_name -> rv.data.Graphics.Rect
	0,  // 13: rv.data.OutputDisplay.type:type_name -> rv.data.OutputDisplay.Type
	7,  // 14: rv.data.OutputDisplay.mode:type_name -> rv.data.DisplayMode
	12, // 15: rv.data.OutputDisplay.black_magic_alpha_key_settings:type_name -> rv.data.OutputDisplay.BlackmagicAlphaKeySettings
	14, // 16: rv.data.EdgeBlend.uuid:type_name -> rv.data.UUID
	2,  // 17: rv.data.EdgeBlend.mode:type_name -> rv.data.EdgeBlend.Mode
	13, // 18: rv.data.EdgeBlend.first_screen:type_name -> rv.data.EdgeBlend.Screen
	13, // 19: rv.data.EdgeBlend.second_screen:type_name -> rv.data.EdgeBlend.Screen
	13, // 20: rv.data.EdgeBlend.left_screen:type_name -> rv.data.EdgeBlend.Screen
	13, // 21: rv.data.EdgeBlend.right_screen:type_name -> rv.data.EdgeBlend.Screen
	13, // 22: rv.data.EdgeBlend.top_screen:type_name -> rv.data.EdgeBlend.Screen
	13, // 23: rv.data.EdgeBlend.bottom_screen:type_name -> rv.data.EdgeBlend.Screen
	1,  // 24: rv.data.OutputDisplay.BlackmagicAlphaKeySettings.key_mode:type_name -> rv.data.OutputDisplay.BlackmagicAlphaKeySettings.KeyMode
	14, // 25: rv.data.EdgeBlend.Screen.uuid:type_name -> rv.data.UUID
	3,  // 26: rv.data.EdgeBlend.Screen.edge:type_name -> rv.data.EdgeBlend.Screen.Edge
	4,  // 27: rv.data.EdgeBlend.Screen.mode:type_name -> rv.data.EdgeBlend.Screen.Mode
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_screens_proto_init() }
func file_screens_proto_init() {
	if File_screens_proto != nil {
		return
	}
	file_basicTypes_proto_init()
	file_graphicsData_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_screens_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Screen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_screens_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CornerValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_screens_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_screens_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_screens_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeBlend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_screens_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Screen_ColorAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_screens_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Screen_BlendCompensation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_screens_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputDisplay_BlackmagicAlphaKeySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_screens_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeBlend_Screen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_screens_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*OutputDisplay_BlackMagicAlphaKeySettings)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_screens_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_screens_proto_goTypes,
		DependencyIndexes: file_screens_proto_depIdxs,
		EnumInfos:         file_screens_proto_enumTypes,
		MessageInfos:      file_screens_proto_msgTypes,
	}.Build()
	File_screens_proto = out.File
	file_screens_proto_rawDesc = nil
	file_screens_proto_goTypes = nil
	file_screens_proto_depIdxs = nil
}
