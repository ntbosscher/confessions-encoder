// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: audio.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Audio_Device_Format_Type int32

const (
	Audio_Device_Format_TYPE_INT   Audio_Device_Format_Type = 0
	Audio_Device_Format_TYPE_FLOAT Audio_Device_Format_Type = 1
)

// Enum value maps for Audio_Device_Format_Type.
var (
	Audio_Device_Format_Type_name = map[int32]string{
		0: "TYPE_INT",
		1: "TYPE_FLOAT",
	}
	Audio_Device_Format_Type_value = map[string]int32{
		"TYPE_INT":   0,
		"TYPE_FLOAT": 1,
	}
)

func (x Audio_Device_Format_Type) Enum() *Audio_Device_Format_Type {
	p := new(Audio_Device_Format_Type)
	*p = x
	return p
}

func (x Audio_Device_Format_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Audio_Device_Format_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_proto_enumTypes[0].Descriptor()
}

func (Audio_Device_Format_Type) Type() protoreflect.EnumType {
	return &file_audio_proto_enumTypes[0]
}

func (x Audio_Device_Format_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Audio_Device_Format_Type.Descriptor instead.
func (Audio_Device_Format_Type) EnumDescriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

type Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Audio) Reset() {
	*x = Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0}
}

type Audio_SettingsDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputSetup    *Audio_OutputSetup `protobuf:"bytes,1,opt,name=output_setup,json=outputSetup,proto3" json:"output_setup,omitempty"`
	MonitorDevice  *Audio_Device      `protobuf:"bytes,2,opt,name=monitor_device,json=monitorDevice,proto3" json:"monitor_device,omitempty"`
	MonitorOnMains bool               `protobuf:"varint,3,opt,name=monitor_on_mains,json=monitorOnMains,proto3" json:"monitor_on_mains,omitempty"`
}

func (x *Audio_SettingsDocument) Reset() {
	*x = Audio_SettingsDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio_SettingsDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio_SettingsDocument) ProtoMessage() {}

func (x *Audio_SettingsDocument) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio_SettingsDocument.ProtoReflect.Descriptor instead.
func (*Audio_SettingsDocument) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Audio_SettingsDocument) GetOutputSetup() *Audio_OutputSetup {
	if x != nil {
		return x.OutputSetup
	}
	return nil
}

func (x *Audio_SettingsDocument) GetMonitorDevice() *Audio_Device {
	if x != nil {
		return x.MonitorDevice
	}
	return nil
}

func (x *Audio_SettingsDocument) GetMonitorOnMains() bool {
	if x != nil {
		return x.MonitorOnMains
	}
	return false
}

type Audio_OutputSetup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            *UUID                    `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AudioDevice     *Audio_Device            `protobuf:"bytes,2,opt,name=audio_device,json=audioDevice,proto3" json:"audio_device,omitempty"`
	LogicalChannels []*Audio_LogicalChannel  `protobuf:"bytes,3,rep,name=logical_channels,json=logicalChannels,proto3" json:"logical_channels,omitempty"`
	AudioDelay      float64                  `protobuf:"fixed64,4,opt,name=audio_delay,json=audioDelay,proto3" json:"audio_delay,omitempty"`
	MasterLevel     float64                  `protobuf:"fixed64,5,opt,name=master_level,json=masterLevel,proto3" json:"master_level,omitempty"`
	PhysicalChanels []*Audio_PhysicalChannel `protobuf:"bytes,6,rep,name=physical_chanels,json=physicalChanels,proto3" json:"physical_chanels,omitempty"`
}

func (x *Audio_OutputSetup) Reset() {
	*x = Audio_OutputSetup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio_OutputSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio_OutputSetup) ProtoMessage() {}

func (x *Audio_OutputSetup) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio_OutputSetup.ProtoReflect.Descriptor instead.
func (*Audio_OutputSetup) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Audio_OutputSetup) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Audio_OutputSetup) GetAudioDevice() *Audio_Device {
	if x != nil {
		return x.AudioDevice
	}
	return nil
}

func (x *Audio_OutputSetup) GetLogicalChannels() []*Audio_LogicalChannel {
	if x != nil {
		return x.LogicalChannels
	}
	return nil
}

func (x *Audio_OutputSetup) GetAudioDelay() float64 {
	if x != nil {
		return x.AudioDelay
	}
	return 0
}

func (x *Audio_OutputSetup) GetMasterLevel() float64 {
	if x != nil {
		return x.MasterLevel
	}
	return 0
}

func (x *Audio_OutputSetup) GetPhysicalChanels() []*Audio_PhysicalChannel {
	if x != nil {
		return x.PhysicalChanels
	}
	return nil
}

type Audio_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RenderID           string                 `protobuf:"bytes,2,opt,name=renderID,proto3" json:"renderID,omitempty"`
	InputChannelCount  uint32                 `protobuf:"varint,3,opt,name=input_channel_count,json=inputChannelCount,proto3" json:"input_channel_count,omitempty"`
	OutputChannelCount uint32                 `protobuf:"varint,4,opt,name=output_channel_count,json=outputChannelCount,proto3" json:"output_channel_count,omitempty"`
	Formats            []*Audio_Device_Format `protobuf:"bytes,5,rep,name=formats,proto3" json:"formats,omitempty"`
}

func (x *Audio_Device) Reset() {
	*x = Audio_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio_Device) ProtoMessage() {}

func (x *Audio_Device) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio_Device.ProtoReflect.Descriptor instead.
func (*Audio_Device) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Audio_Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Audio_Device) GetRenderID() string {
	if x != nil {
		return x.RenderID
	}
	return ""
}

func (x *Audio_Device) GetInputChannelCount() uint32 {
	if x != nil {
		return x.InputChannelCount
	}
	return 0
}

func (x *Audio_Device) GetOutputChannelCount() uint32 {
	if x != nil {
		return x.OutputChannelCount
	}
	return 0
}

func (x *Audio_Device) GetFormats() []*Audio_Device_Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

type Audio_LogicalChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                  *UUID                                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                  string                                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Index                 uint32                                `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Muted                 bool                                  `protobuf:"varint,4,opt,name=muted,proto3" json:"muted,omitempty"`
	PhysicalAudioChannels []*Audio_LogicalChannel_OutputChannel `protobuf:"bytes,5,rep,name=physical_audio_channels,json=physicalAudioChannels,proto3" json:"physical_audio_channels,omitempty"`
	Solo                  bool                                  `protobuf:"varint,6,opt,name=solo,proto3" json:"solo,omitempty"`
	TestTone              bool                                  `protobuf:"varint,7,opt,name=test_tone,json=testTone,proto3" json:"test_tone,omitempty"`
}

func (x *Audio_LogicalChannel) Reset() {
	*x = Audio_LogicalChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio_LogicalChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio_LogicalChannel) ProtoMessage() {}

func (x *Audio_LogicalChannel) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio_LogicalChannel.ProtoReflect.Descriptor instead.
func (*Audio_LogicalChannel) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Audio_LogicalChannel) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Audio_LogicalChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Audio_LogicalChannel) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Audio_LogicalChannel) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *Audio_LogicalChannel) GetPhysicalAudioChannels() []*Audio_LogicalChannel_OutputChannel {
	if x != nil {
		return x.PhysicalAudioChannels
	}
	return nil
}

func (x *Audio_LogicalChannel) GetSolo() bool {
	if x != nil {
		return x.Solo
	}
	return false
}

func (x *Audio_LogicalChannel) GetTestTone() bool {
	if x != nil {
		return x.TestTone
	}
	return false
}

type Audio_PhysicalChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	MuteEnable bool   `protobuf:"varint,2,opt,name=mute_enable,json=muteEnable,proto3" json:"mute_enable,omitempty"`
	SoloEnable bool   `protobuf:"varint,3,opt,name=solo_enable,json=soloEnable,proto3" json:"solo_enable,omitempty"`
	ToneEnable bool   `protobuf:"varint,4,opt,name=tone_enable,json=toneEnable,proto3" json:"tone_enable,omitempty"`
}

func (x *Audio_PhysicalChannel) Reset() {
	*x = Audio_PhysicalChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio_PhysicalChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio_PhysicalChannel) ProtoMessage() {}

func (x *Audio_PhysicalChannel) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio_PhysicalChannel.ProtoReflect.Descriptor instead.
func (*Audio_PhysicalChannel) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Audio_PhysicalChannel) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Audio_PhysicalChannel) GetMuteEnable() bool {
	if x != nil {
		return x.MuteEnable
	}
	return false
}

func (x *Audio_PhysicalChannel) GetSoloEnable() bool {
	if x != nil {
		return x.SoloEnable
	}
	return false
}

func (x *Audio_PhysicalChannel) GetToneEnable() bool {
	if x != nil {
		return x.ToneEnable
	}
	return false
}

type Audio_Device_Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleRate uint32                   `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	BitDepth   uint32                   `protobuf:"varint,2,opt,name=bit_depth,json=bitDepth,proto3" json:"bit_depth,omitempty"`
	Type       Audio_Device_Format_Type `protobuf:"varint,3,opt,name=type,proto3,enum=rv.data.Audio_Device_Format_Type" json:"type,omitempty"`
}

func (x *Audio_Device_Format) Reset() {
	*x = Audio_Device_Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio_Device_Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio_Device_Format) ProtoMessage() {}

func (x *Audio_Device_Format) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio_Device_Format.ProtoReflect.Descriptor instead.
func (*Audio_Device_Format) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Audio_Device_Format) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *Audio_Device_Format) GetBitDepth() uint32 {
	if x != nil {
		return x.BitDepth
	}
	return 0
}

func (x *Audio_Device_Format) GetType() Audio_Device_Format_Type {
	if x != nil {
		return x.Type
	}
	return Audio_Device_Format_TYPE_INT
}

type Audio_LogicalChannel_OutputChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Muted    bool   `protobuf:"varint,2,opt,name=muted,proto3" json:"muted,omitempty"`
	Solo     bool   `protobuf:"varint,3,opt,name=solo,proto3" json:"solo,omitempty"`
	TestTone bool   `protobuf:"varint,4,opt,name=test_tone,json=testTone,proto3" json:"test_tone,omitempty"`
}

func (x *Audio_LogicalChannel_OutputChannel) Reset() {
	*x = Audio_LogicalChannel_OutputChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio_LogicalChannel_OutputChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio_LogicalChannel_OutputChannel) ProtoMessage() {}

func (x *Audio_LogicalChannel_OutputChannel) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio_LogicalChannel_OutputChannel.ProtoReflect.Descriptor instead.
func (*Audio_LogicalChannel_OutputChannel) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Audio_LogicalChannel_OutputChannel) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Audio_LogicalChannel_OutputChannel) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *Audio_LogicalChannel_OutputChannel) GetSolo() bool {
	if x != nil {
		return x.Solo
	}
	return false
}

func (x *Audio_LogicalChannel_OutputChannel) GetTestTone() bool {
	if x != nil {
		return x.TestTone
	}
	return false
}

var File_audio_proto protoreflect.FileDescriptor

var file_audio_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x0b, 0x0a, 0x05, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x1a, 0xb9, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x73, 0x1a, 0xc3,
	0x02, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x21,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x65, 0x6c, 0x73, 0x1a, 0xf8, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x1a, 0xa3, 0x01, 0x0a, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x74, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x01, 0x1a,
	0xf7, 0x02, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x17, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x15, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x6c, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6e, 0x65, 0x1a, 0x6c, 0x0a, 0x0d, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6c, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6e, 0x65, 0x1a, 0x8a, 0x01, 0x0a, 0x0f, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x6f, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6f, 0x6e, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audio_proto_rawDescOnce sync.Once
	file_audio_proto_rawDescData = file_audio_proto_rawDesc
)

func file_audio_proto_rawDescGZIP() []byte {
	file_audio_proto_rawDescOnce.Do(func() {
		file_audio_proto_rawDescData = protoimpl.X.CompressGZIP(file_audio_proto_rawDescData)
	})
	return file_audio_proto_rawDescData
}

var file_audio_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_audio_proto_goTypes = []interface{}{
	(Audio_Device_Format_Type)(0),              // 0: rv.data.Audio.Device.Format.Type
	(*Audio)(nil),                              // 1: rv.data.Audio
	(*Audio_SettingsDocument)(nil),             // 2: rv.data.Audio.SettingsDocument
	(*Audio_OutputSetup)(nil),                  // 3: rv.data.Audio.OutputSetup
	(*Audio_Device)(nil),                       // 4: rv.data.Audio.Device
	(*Audio_LogicalChannel)(nil),               // 5: rv.data.Audio.LogicalChannel
	(*Audio_PhysicalChannel)(nil),              // 6: rv.data.Audio.PhysicalChannel
	(*Audio_Device_Format)(nil),                // 7: rv.data.Audio.Device.Format
	(*Audio_LogicalChannel_OutputChannel)(nil), // 8: rv.data.Audio.LogicalChannel.OutputChannel
	(*UUID)(nil),                               // 9: rv.data.UUID
}
var file_audio_proto_depIdxs = []int32{
	3,  // 0: rv.data.Audio.SettingsDocument.output_setup:type_name -> rv.data.Audio.OutputSetup
	4,  // 1: rv.data.Audio.SettingsDocument.monitor_device:type_name -> rv.data.Audio.Device
	9,  // 2: rv.data.Audio.OutputSetup.uuid:type_name -> rv.data.UUID
	4,  // 3: rv.data.Audio.OutputSetup.audio_device:type_name -> rv.data.Audio.Device
	5,  // 4: rv.data.Audio.OutputSetup.logical_channels:type_name -> rv.data.Audio.LogicalChannel
	6,  // 5: rv.data.Audio.OutputSetup.physical_chanels:type_name -> rv.data.Audio.PhysicalChannel
	7,  // 6: rv.data.Audio.Device.formats:type_name -> rv.data.Audio.Device.Format
	9,  // 7: rv.data.Audio.LogicalChannel.uuid:type_name -> rv.data.UUID
	8,  // 8: rv.data.Audio.LogicalChannel.physical_audio_channels:type_name -> rv.data.Audio.LogicalChannel.OutputChannel
	0,  // 9: rv.data.Audio.Device.Format.type:type_name -> rv.data.Audio.Device.Format.Type
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_audio_proto_init() }
func file_audio_proto_init() {
	if File_audio_proto != nil {
		return
	}
	file_basicTypes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_audio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio_SettingsDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio_OutputSetup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio_LogicalChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio_PhysicalChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio_Device_Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio_LogicalChannel_OutputChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audio_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_audio_proto_goTypes,
		DependencyIndexes: file_audio_proto_depIdxs,
		EnumInfos:         file_audio_proto_enumTypes,
		MessageInfos:      file_audio_proto_msgTypes,
	}.Build()
	File_audio_proto = out.File
	file_audio_proto_rawDesc = nil
	file_audio_proto_goTypes = nil
	file_audio_proto_depIdxs = nil
}
