// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: timers.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Clock_Format_DateFormatterStyle int32

const (
	Clock_Format_DATE_FORMATTER_STYLE_NONE   Clock_Format_DateFormatterStyle = 0
	Clock_Format_DATE_FORMATTER_STYLE_SHORT  Clock_Format_DateFormatterStyle = 1
	Clock_Format_DATE_FORMATTER_STYLE_MEDIUM Clock_Format_DateFormatterStyle = 2
	Clock_Format_DATE_FORMATTER_STYLE_LONG   Clock_Format_DateFormatterStyle = 3
	Clock_Format_DATE_FORMATTER_STYLE_FULL   Clock_Format_DateFormatterStyle = 4
)

// Enum value maps for Clock_Format_DateFormatterStyle.
var (
	Clock_Format_DateFormatterStyle_name = map[int32]string{
		0: "DATE_FORMATTER_STYLE_NONE",
		1: "DATE_FORMATTER_STYLE_SHORT",
		2: "DATE_FORMATTER_STYLE_MEDIUM",
		3: "DATE_FORMATTER_STYLE_LONG",
		4: "DATE_FORMATTER_STYLE_FULL",
	}
	Clock_Format_DateFormatterStyle_value = map[string]int32{
		"DATE_FORMATTER_STYLE_NONE":   0,
		"DATE_FORMATTER_STYLE_SHORT":  1,
		"DATE_FORMATTER_STYLE_MEDIUM": 2,
		"DATE_FORMATTER_STYLE_LONG":   3,
		"DATE_FORMATTER_STYLE_FULL":   4,
	}
)

func (x Clock_Format_DateFormatterStyle) Enum() *Clock_Format_DateFormatterStyle {
	p := new(Clock_Format_DateFormatterStyle)
	*p = x
	return p
}

func (x Clock_Format_DateFormatterStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Clock_Format_DateFormatterStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_timers_proto_enumTypes[0].Descriptor()
}

func (Clock_Format_DateFormatterStyle) Type() protoreflect.EnumType {
	return &file_timers_proto_enumTypes[0]
}

func (x Clock_Format_DateFormatterStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Clock_Format_DateFormatterStyle.Descriptor instead.
func (Clock_Format_DateFormatterStyle) EnumDescriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Timer_Format_Style int32

const (
	Timer_Format_STYE_NONE          Timer_Format_Style = 0
	Timer_Format_STYLE_SHORT        Timer_Format_Style = 1
	Timer_Format_STYLE_LONG         Timer_Format_Style = 2
	Timer_Format_STYLE_REMOVE_SHORT Timer_Format_Style = 3
	Timer_Format_STYLE_REMOVE_LONG  Timer_Format_Style = 4
)

// Enum value maps for Timer_Format_Style.
var (
	Timer_Format_Style_name = map[int32]string{
		0: "STYE_NONE",
		1: "STYLE_SHORT",
		2: "STYLE_LONG",
		3: "STYLE_REMOVE_SHORT",
		4: "STYLE_REMOVE_LONG",
	}
	Timer_Format_Style_value = map[string]int32{
		"STYE_NONE":          0,
		"STYLE_SHORT":        1,
		"STYLE_LONG":         2,
		"STYLE_REMOVE_SHORT": 3,
		"STYLE_REMOVE_LONG":  4,
	}
)

func (x Timer_Format_Style) Enum() *Timer_Format_Style {
	p := new(Timer_Format_Style)
	*p = x
	return p
}

func (x Timer_Format_Style) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Timer_Format_Style) Descriptor() protoreflect.EnumDescriptor {
	return file_timers_proto_enumTypes[1].Descriptor()
}

func (Timer_Format_Style) Type() protoreflect.EnumType {
	return &file_timers_proto_enumTypes[1]
}

func (x Timer_Format_Style) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Timer_Format_Style.Descriptor instead.
func (Timer_Format_Style) EnumDescriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{1, 0, 0}
}

type Timer_Configuration_TimerTypeCountdownToTime_TimePeriod int32

const (
	Timer_Configuration_TimerTypeCountdownToTime_TIME_PERIOD_AM Timer_Configuration_TimerTypeCountdownToTime_TimePeriod = 0
	Timer_Configuration_TimerTypeCountdownToTime_TIME_PERIOD_PM Timer_Configuration_TimerTypeCountdownToTime_TimePeriod = 1
	Timer_Configuration_TimerTypeCountdownToTime_TIME_PERIOD_24 Timer_Configuration_TimerTypeCountdownToTime_TimePeriod = 2
)

// Enum value maps for Timer_Configuration_TimerTypeCountdownToTime_TimePeriod.
var (
	Timer_Configuration_TimerTypeCountdownToTime_TimePeriod_name = map[int32]string{
		0: "TIME_PERIOD_AM",
		1: "TIME_PERIOD_PM",
		2: "TIME_PERIOD_24",
	}
	Timer_Configuration_TimerTypeCountdownToTime_TimePeriod_value = map[string]int32{
		"TIME_PERIOD_AM": 0,
		"TIME_PERIOD_PM": 1,
		"TIME_PERIOD_24": 2,
	}
)

func (x Timer_Configuration_TimerTypeCountdownToTime_TimePeriod) Enum() *Timer_Configuration_TimerTypeCountdownToTime_TimePeriod {
	p := new(Timer_Configuration_TimerTypeCountdownToTime_TimePeriod)
	*p = x
	return p
}

func (x Timer_Configuration_TimerTypeCountdownToTime_TimePeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Timer_Configuration_TimerTypeCountdownToTime_TimePeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_timers_proto_enumTypes[2].Descriptor()
}

func (Timer_Configuration_TimerTypeCountdownToTime_TimePeriod) Type() protoreflect.EnumType {
	return &file_timers_proto_enumTypes[2]
}

func (x Timer_Configuration_TimerTypeCountdownToTime_TimePeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Timer_Configuration_TimerTypeCountdownToTime_TimePeriod.Descriptor instead.
func (Timer_Configuration_TimerTypeCountdownToTime_TimePeriod) EnumDescriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{1, 1, 1, 0}
}

type Clock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Clock) Reset() {
	*x = Clock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clock) ProtoMessage() {}

func (x *Clock) ProtoReflect() protoreflect.Message {
	mi := &file_timers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clock.ProtoReflect.Descriptor instead.
func (*Clock) Descriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{0}
}

func (x *Clock) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type Timer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid          *UUID                `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name          string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Configuration *Timer_Configuration `protobuf:"bytes,10,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *Timer) Reset() {
	*x = Timer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_timers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{1}
}

func (x *Timer) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Timer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Timer) GetConfiguration() *Timer_Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type TimersDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationInfo *ApplicationInfo `protobuf:"bytes,1,opt,name=application_info,json=applicationInfo,proto3" json:"application_info,omitempty"`
	Clock           *Clock           `protobuf:"bytes,2,opt,name=clock,proto3" json:"clock,omitempty"`
	Timers          []*Timer         `protobuf:"bytes,3,rep,name=timers,proto3" json:"timers,omitempty"`
}

func (x *TimersDocument) Reset() {
	*x = TimersDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimersDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimersDocument) ProtoMessage() {}

func (x *TimersDocument) ProtoReflect() protoreflect.Message {
	mi := &file_timers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimersDocument.ProtoReflect.Descriptor instead.
func (*TimersDocument) Descriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{2}
}

func (x *TimersDocument) GetApplicationInfo() *ApplicationInfo {
	if x != nil {
		return x.ApplicationInfo
	}
	return nil
}

func (x *TimersDocument) GetClock() *Clock {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *TimersDocument) GetTimers() []*Timer {
	if x != nil {
		return x.Timers
	}
	return nil
}

type Clock_Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateType            Clock_Format_DateFormatterStyle `protobuf:"varint,2,opt,name=date_type,json=dateType,proto3,enum=rv.data.Clock_Format_DateFormatterStyle" json:"date_type,omitempty"`
	TimeFormat          Clock_Format_DateFormatterStyle `protobuf:"varint,3,opt,name=time_format,json=timeFormat,proto3,enum=rv.data.Clock_Format_DateFormatterStyle" json:"time_format,omitempty"`
	MilitaryTimeEnabled bool                            `protobuf:"varint,4,opt,name=military_time_enabled,json=militaryTimeEnabled,proto3" json:"military_time_enabled,omitempty"`
}

func (x *Clock_Format) Reset() {
	*x = Clock_Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clock_Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clock_Format) ProtoMessage() {}

func (x *Clock_Format) ProtoReflect() protoreflect.Message {
	mi := &file_timers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clock_Format.ProtoReflect.Descriptor instead.
func (*Clock_Format) Descriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Clock_Format) GetDateType() Clock_Format_DateFormatterStyle {
	if x != nil {
		return x.DateType
	}
	return Clock_Format_DATE_FORMATTER_STYLE_NONE
}

func (x *Clock_Format) GetTimeFormat() Clock_Format_DateFormatterStyle {
	if x != nil {
		return x.TimeFormat
	}
	return Clock_Format_DATE_FORMATTER_STYLE_NONE
}

func (x *Clock_Format) GetMilitaryTimeEnabled() bool {
	if x != nil {
		return x.MilitaryTimeEnabled
	}
	return false
}

type Timer_Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour                            Timer_Format_Style `protobuf:"varint,1,opt,name=hour,proto3,enum=rv.data.Timer_Format_Style" json:"hour,omitempty"`
	Minute                          Timer_Format_Style `protobuf:"varint,2,opt,name=minute,proto3,enum=rv.data.Timer_Format_Style" json:"minute,omitempty"`
	Second                          Timer_Format_Style `protobuf:"varint,3,opt,name=second,proto3,enum=rv.data.Timer_Format_Style" json:"second,omitempty"`
	Millisecond                     Timer_Format_Style `protobuf:"varint,4,opt,name=millisecond,proto3,enum=rv.data.Timer_Format_Style" json:"millisecond,omitempty"`
	IsWallClockTime                 bool               `protobuf:"varint,5,opt,name=is_wall_clock_time,json=isWallClockTime,proto3" json:"is_wall_clock_time,omitempty"`
	Is_24HourTime                   bool               `protobuf:"varint,6,opt,name=is_24_hour_time,json=is24HourTime,proto3" json:"is_24_hour_time,omitempty"`
	ShowMillisecondsUnderMinuteOnly bool               `protobuf:"varint,7,opt,name=show_milliseconds_under_minute_only,json=showMillisecondsUnderMinuteOnly,proto3" json:"show_milliseconds_under_minute_only,omitempty"`
}

func (x *Timer_Format) Reset() {
	*x = Timer_Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer_Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer_Format) ProtoMessage() {}

func (x *Timer_Format) ProtoReflect() protoreflect.Message {
	mi := &file_timers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer_Format.ProtoReflect.Descriptor instead.
func (*Timer_Format) Descriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Timer_Format) GetHour() Timer_Format_Style {
	if x != nil {
		return x.Hour
	}
	return Timer_Format_STYE_NONE
}

func (x *Timer_Format) GetMinute() Timer_Format_Style {
	if x != nil {
		return x.Minute
	}
	return Timer_Format_STYE_NONE
}

func (x *Timer_Format) GetSecond() Timer_Format_Style {
	if x != nil {
		return x.Second
	}
	return Timer_Format_STYE_NONE
}

func (x *Timer_Format) GetMillisecond() Timer_Format_Style {
	if x != nil {
		return x.Millisecond
	}
	return Timer_Format_STYE_NONE
}

func (x *Timer_Format) GetIsWallClockTime() bool {
	if x != nil {
		return x.IsWallClockTime
	}
	return false
}

func (x *Timer_Format) GetIs_24HourTime() bool {
	if x != nil {
		return x.Is_24HourTime
	}
	return false
}

func (x *Timer_Format) GetShowMillisecondsUnderMinuteOnly() bool {
	if x != nil {
		return x.ShowMillisecondsUnderMinuteOnly
	}
	return false
}

type Timer_Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowsOverrun bool `protobuf:"varint,4,opt,name=allows_overrun,json=allowsOverrun,proto3" json:"allows_overrun,omitempty"`
	// Types that are assignable to TimerType:
	//	*Timer_Configuration_Countdown
	//	*Timer_Configuration_CountdownToTime
	//	*Timer_Configuration_ElapsedTime
	TimerType isTimer_Configuration_TimerType `protobuf_oneof:"TimerType"`
}

func (x *Timer_Configuration) Reset() {
	*x = Timer_Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer_Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer_Configuration) ProtoMessage() {}

func (x *Timer_Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_timers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer_Configuration.ProtoReflect.Descriptor instead.
func (*Timer_Configuration) Descriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Timer_Configuration) GetAllowsOverrun() bool {
	if x != nil {
		return x.AllowsOverrun
	}
	return false
}

func (m *Timer_Configuration) GetTimerType() isTimer_Configuration_TimerType {
	if m != nil {
		return m.TimerType
	}
	return nil
}

func (x *Timer_Configuration) GetCountdown() *Timer_Configuration_TimerTypeCountdown {
	if x, ok := x.GetTimerType().(*Timer_Configuration_Countdown); ok {
		return x.Countdown
	}
	return nil
}

func (x *Timer_Configuration) GetCountdownToTime() *Timer_Configuration_TimerTypeCountdownToTime {
	if x, ok := x.GetTimerType().(*Timer_Configuration_CountdownToTime); ok {
		return x.CountdownToTime
	}
	return nil
}

func (x *Timer_Configuration) GetElapsedTime() *Timer_Configuration_TimerTypeElapsedTime {
	if x, ok := x.GetTimerType().(*Timer_Configuration_ElapsedTime); ok {
		return x.ElapsedTime
	}
	return nil
}

type isTimer_Configuration_TimerType interface {
	isTimer_Configuration_TimerType()
}

type Timer_Configuration_Countdown struct {
	Countdown *Timer_Configuration_TimerTypeCountdown `protobuf:"bytes,1,opt,name=countdown,proto3,oneof"`
}

type Timer_Configuration_CountdownToTime struct {
	CountdownToTime *Timer_Configuration_TimerTypeCountdownToTime `protobuf:"bytes,2,opt,name=countdown_to_time,json=countdownToTime,proto3,oneof"`
}

type Timer_Configuration_ElapsedTime struct {
	ElapsedTime *Timer_Configuration_TimerTypeElapsedTime `protobuf:"bytes,3,opt,name=elapsed_time,json=elapsedTime,proto3,oneof"`
}

func (*Timer_Configuration_Countdown) isTimer_Configuration_TimerType() {}

func (*Timer_Configuration_CountdownToTime) isTimer_Configuration_TimerType() {}

func (*Timer_Configuration_ElapsedTime) isTimer_Configuration_TimerType() {}

type Timer_Configuration_TimerTypeCountdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Timer_Configuration_TimerTypeCountdown) Reset() {
	*x = Timer_Configuration_TimerTypeCountdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer_Configuration_TimerTypeCountdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer_Configuration_TimerTypeCountdown) ProtoMessage() {}

func (x *Timer_Configuration_TimerTypeCountdown) ProtoReflect() protoreflect.Message {
	mi := &file_timers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer_Configuration_TimerTypeCountdown.ProtoReflect.Descriptor instead.
func (*Timer_Configuration_TimerTypeCountdown) Descriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *Timer_Configuration_TimerTypeCountdown) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type Timer_Configuration_TimerTypeCountdownToTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeOfDay float64                                                 `protobuf:"fixed64,1,opt,name=time_of_day,json=timeOfDay,proto3" json:"time_of_day,omitempty"`
	Period    Timer_Configuration_TimerTypeCountdownToTime_TimePeriod `protobuf:"varint,2,opt,name=period,proto3,enum=rv.data.Timer_Configuration_TimerTypeCountdownToTime_TimePeriod" json:"period,omitempty"`
}

func (x *Timer_Configuration_TimerTypeCountdownToTime) Reset() {
	*x = Timer_Configuration_TimerTypeCountdownToTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer_Configuration_TimerTypeCountdownToTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer_Configuration_TimerTypeCountdownToTime) ProtoMessage() {}

func (x *Timer_Configuration_TimerTypeCountdownToTime) ProtoReflect() protoreflect.Message {
	mi := &file_timers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer_Configuration_TimerTypeCountdownToTime.ProtoReflect.Descriptor instead.
func (*Timer_Configuration_TimerTypeCountdownToTime) Descriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *Timer_Configuration_TimerTypeCountdownToTime) GetTimeOfDay() float64 {
	if x != nil {
		return x.TimeOfDay
	}
	return 0
}

func (x *Timer_Configuration_TimerTypeCountdownToTime) GetPeriod() Timer_Configuration_TimerTypeCountdownToTime_TimePeriod {
	if x != nil {
		return x.Period
	}
	return Timer_Configuration_TimerTypeCountdownToTime_TIME_PERIOD_AM
}

type Timer_Configuration_TimerTypeElapsedTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  float64 `protobuf:"fixed64,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    float64 `protobuf:"fixed64,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	HasEndTime bool    `protobuf:"varint,3,opt,name=has_end_time,json=hasEndTime,proto3" json:"has_end_time,omitempty"`
}

func (x *Timer_Configuration_TimerTypeElapsedTime) Reset() {
	*x = Timer_Configuration_TimerTypeElapsedTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer_Configuration_TimerTypeElapsedTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer_Configuration_TimerTypeElapsedTime) ProtoMessage() {}

func (x *Timer_Configuration_TimerTypeElapsedTime) ProtoReflect() protoreflect.Message {
	mi := &file_timers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer_Configuration_TimerTypeElapsedTime.ProtoReflect.Descriptor instead.
func (*Timer_Configuration_TimerTypeElapsedTime) Descriptor() ([]byte, []int) {
	return file_timers_proto_rawDescGZIP(), []int{1, 1, 2}
}

func (x *Timer_Configuration_TimerTypeElapsedTime) GetStartTime() float64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Timer_Configuration_TimerTypeElapsedTime) GetEndTime() float64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Timer_Configuration_TimerTypeElapsedTime) GetHasEndTime() bool {
	if x != nil {
		return x.HasEndTime
	}
	return false
}

var File_timers_proto protoreflect.FileDescriptor

var file_timers_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x03, 0x0a, 0x05, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x83, 0x03, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6c, 0x69,
	0x74, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb2, 0x01, 0x0a,
	0x12, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x04, 0x22, 0xcc, 0x0a, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xec, 0x03, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0b,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0b,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69,
	0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x32,
	0x34, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x32, 0x34, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4c, 0x0a, 0x23, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x73, 0x68,
	0x6f, 0x77, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x66, 0x0a,
	0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x59, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f,
	0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4c,
	0x4f, 0x4e, 0x47, 0x10, 0x04, 0x1a, 0xd8, 0x05, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x4f,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x63, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x6f,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x30, 0x0a, 0x12,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xde,
	0x01, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x58, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x48, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x41, 0x4d, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x50, 0x4d, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x32, 0x34, 0x10, 0x02, 0x1a,
	0x72, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26,
	0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x06,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_timers_proto_rawDescOnce sync.Once
	file_timers_proto_rawDescData = file_timers_proto_rawDesc
)

func file_timers_proto_rawDescGZIP() []byte {
	file_timers_proto_rawDescOnce.Do(func() {
		file_timers_proto_rawDescData = protoimpl.X.CompressGZIP(file_timers_proto_rawDescData)
	})
	return file_timers_proto_rawDescData
}

var file_timers_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_timers_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_timers_proto_goTypes = []interface{}{
	(Clock_Format_DateFormatterStyle)(0),                         // 0: rv.data.Clock.Format.DateFormatterStyle
	(Timer_Format_Style)(0),                                      // 1: rv.data.Timer.Format.Style
	(Timer_Configuration_TimerTypeCountdownToTime_TimePeriod)(0), // 2: rv.data.Timer.Configuration.TimerTypeCountdownToTime.TimePeriod
	(*Clock)(nil),                                        // 3: rv.data.Clock
	(*Timer)(nil),                                        // 4: rv.data.Timer
	(*TimersDocument)(nil),                               // 5: rv.data.TimersDocument
	(*Clock_Format)(nil),                                 // 6: rv.data.Clock.Format
	(*Timer_Format)(nil),                                 // 7: rv.data.Timer.Format
	(*Timer_Configuration)(nil),                          // 8: rv.data.Timer.Configuration
	(*Timer_Configuration_TimerTypeCountdown)(nil),       // 9: rv.data.Timer.Configuration.TimerTypeCountdown
	(*Timer_Configuration_TimerTypeCountdownToTime)(nil), // 10: rv.data.Timer.Configuration.TimerTypeCountdownToTime
	(*Timer_Configuration_TimerTypeElapsedTime)(nil),     // 11: rv.data.Timer.Configuration.TimerTypeElapsedTime
	(*UUID)(nil),                                         // 12: rv.data.UUID
	(*ApplicationInfo)(nil),                              // 13: rv.data.ApplicationInfo
}
var file_timers_proto_depIdxs = []int32{
	12, // 0: rv.data.Timer.uuid:type_name -> rv.data.UUID
	8,  // 1: rv.data.Timer.configuration:type_name -> rv.data.Timer.Configuration
	13, // 2: rv.data.TimersDocument.application_info:type_name -> rv.data.ApplicationInfo
	3,  // 3: rv.data.TimersDocument.clock:type_name -> rv.data.Clock
	4,  // 4: rv.data.TimersDocument.timers:type_name -> rv.data.Timer
	0,  // 5: rv.data.Clock.Format.date_type:type_name -> rv.data.Clock.Format.DateFormatterStyle
	0,  // 6: rv.data.Clock.Format.time_format:type_name -> rv.data.Clock.Format.DateFormatterStyle
	1,  // 7: rv.data.Timer.Format.hour:type_name -> rv.data.Timer.Format.Style
	1,  // 8: rv.data.Timer.Format.minute:type_name -> rv.data.Timer.Format.Style
	1,  // 9: rv.data.Timer.Format.second:type_name -> rv.data.Timer.Format.Style
	1,  // 10: rv.data.Timer.Format.millisecond:type_name -> rv.data.Timer.Format.Style
	9,  // 11: rv.data.Timer.Configuration.countdown:type_name -> rv.data.Timer.Configuration.TimerTypeCountdown
	10, // 12: rv.data.Timer.Configuration.countdown_to_time:type_name -> rv.data.Timer.Configuration.TimerTypeCountdownToTime
	11, // 13: rv.data.Timer.Configuration.elapsed_time:type_name -> rv.data.Timer.Configuration.TimerTypeElapsedTime
	2,  // 14: rv.data.Timer.Configuration.TimerTypeCountdownToTime.period:type_name -> rv.data.Timer.Configuration.TimerTypeCountdownToTime.TimePeriod
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_timers_proto_init() }
func file_timers_proto_init() {
	if File_timers_proto != nil {
		return
	}
	file_basicTypes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_timers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimersDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clock_Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer_Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer_Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer_Configuration_TimerTypeCountdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer_Configuration_TimerTypeCountdownToTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer_Configuration_TimerTypeElapsedTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_timers_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Timer_Configuration_Countdown)(nil),
		(*Timer_Configuration_CountdownToTime)(nil),
		(*Timer_Configuration_ElapsedTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_timers_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_timers_proto_goTypes,
		DependencyIndexes: file_timers_proto_depIdxs,
		EnumInfos:         file_timers_proto_enumTypes,
		MessageInfos:      file_timers_proto_msgTypes,
	}.Build()
	File_timers_proto = out.File
	file_timers_proto_rawDesc = nil
	file_timers_proto_goTypes = nil
	file_timers_proto_depIdxs = nil
}
