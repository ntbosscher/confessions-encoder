// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: playlist.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Playlist_Type int32

const (
	Playlist_TYPE_UNKNOWN  Playlist_Type = 0
	Playlist_TYPE_PLAYLIST Playlist_Type = 1
	Playlist_TYPE_GROUP    Playlist_Type = 2
	Playlist_TYPE_SMART    Playlist_Type = 3
	Playlist_TYPE_ROOT     Playlist_Type = 4
)

// Enum value maps for Playlist_Type.
var (
	Playlist_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_PLAYLIST",
		2: "TYPE_GROUP",
		3: "TYPE_SMART",
		4: "TYPE_ROOT",
	}
	Playlist_Type_value = map[string]int32{
		"TYPE_UNKNOWN":  0,
		"TYPE_PLAYLIST": 1,
		"TYPE_GROUP":    2,
		"TYPE_SMART":    3,
		"TYPE_ROOT":     4,
	}
)

func (x Playlist_Type) Enum() *Playlist_Type {
	p := new(Playlist_Type)
	*p = x
	return p
}

func (x Playlist_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Playlist_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_playlist_proto_enumTypes[0].Descriptor()
}

func (Playlist_Type) Type() protoreflect.EnumType {
	return &file_playlist_proto_enumTypes[0]
}

func (x Playlist_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Playlist_Type.Descriptor instead.
func (Playlist_Type) EnumDescriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{0, 0}
}

type Playlist_TimingType int32

const (
	Playlist_TIMING_TYPE_NONE        Playlist_TimingType = 0
	Playlist_TIMING_TYPE_TIMECODE    Playlist_TimingType = 1
	Playlist_TIMING_TYPE_TIME_OF_DAY Playlist_TimingType = 2
)

// Enum value maps for Playlist_TimingType.
var (
	Playlist_TimingType_name = map[int32]string{
		0: "TIMING_TYPE_NONE",
		1: "TIMING_TYPE_TIMECODE",
		2: "TIMING_TYPE_TIME_OF_DAY",
	}
	Playlist_TimingType_value = map[string]int32{
		"TIMING_TYPE_NONE":        0,
		"TIMING_TYPE_TIMECODE":    1,
		"TIMING_TYPE_TIME_OF_DAY": 2,
	}
)

func (x Playlist_TimingType) Enum() *Playlist_TimingType {
	p := new(Playlist_TimingType)
	*p = x
	return p
}

func (x Playlist_TimingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Playlist_TimingType) Descriptor() protoreflect.EnumDescriptor {
	return file_playlist_proto_enumTypes[1].Descriptor()
}

func (Playlist_TimingType) Type() protoreflect.EnumType {
	return &file_playlist_proto_enumTypes[1]
}

func (x Playlist_TimingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Playlist_TimingType.Descriptor instead.
func (Playlist_TimingType) EnumDescriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{0, 1}
}

type Playlist_FolderDirectory_ImportBehavior int32

const (
	Playlist_FolderDirectory_IMPORT_BEHAVIOR_BACKGROUND Playlist_FolderDirectory_ImportBehavior = 0
	Playlist_FolderDirectory_IMPORT_BEHAVIOR_FOREGROUND Playlist_FolderDirectory_ImportBehavior = 1
)

// Enum value maps for Playlist_FolderDirectory_ImportBehavior.
var (
	Playlist_FolderDirectory_ImportBehavior_name = map[int32]string{
		0: "IMPORT_BEHAVIOR_BACKGROUND",
		1: "IMPORT_BEHAVIOR_FOREGROUND",
	}
	Playlist_FolderDirectory_ImportBehavior_value = map[string]int32{
		"IMPORT_BEHAVIOR_BACKGROUND": 0,
		"IMPORT_BEHAVIOR_FOREGROUND": 1,
	}
)

func (x Playlist_FolderDirectory_ImportBehavior) Enum() *Playlist_FolderDirectory_ImportBehavior {
	p := new(Playlist_FolderDirectory_ImportBehavior)
	*p = x
	return p
}

func (x Playlist_FolderDirectory_ImportBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Playlist_FolderDirectory_ImportBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_playlist_proto_enumTypes[2].Descriptor()
}

func (Playlist_FolderDirectory_ImportBehavior) Type() protoreflect.EnumType {
	return &file_playlist_proto_enumTypes[2]
}

func (x Playlist_FolderDirectory_ImportBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Playlist_FolderDirectory_ImportBehavior.Descriptor instead.
func (Playlist_FolderDirectory_ImportBehavior) EnumDescriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{0, 2, 0}
}

type PlaylistItem_Presentation_ContentDestination int32

const (
	PlaylistItem_Presentation_CONTENT_DESTINATION_GLOBAL        PlaylistItem_Presentation_ContentDestination = 0
	PlaylistItem_Presentation_CONTENT_DESTINATION_ANNOUNCEMENTS PlaylistItem_Presentation_ContentDestination = 1
)

// Enum value maps for PlaylistItem_Presentation_ContentDestination.
var (
	PlaylistItem_Presentation_ContentDestination_name = map[int32]string{
		0: "CONTENT_DESTINATION_GLOBAL",
		1: "CONTENT_DESTINATION_ANNOUNCEMENTS",
	}
	PlaylistItem_Presentation_ContentDestination_value = map[string]int32{
		"CONTENT_DESTINATION_GLOBAL":        0,
		"CONTENT_DESTINATION_ANNOUNCEMENTS": 1,
	}
)

func (x PlaylistItem_Presentation_ContentDestination) Enum() *PlaylistItem_Presentation_ContentDestination {
	p := new(PlaylistItem_Presentation_ContentDestination)
	*p = x
	return p
}

func (x PlaylistItem_Presentation_ContentDestination) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaylistItem_Presentation_ContentDestination) Descriptor() protoreflect.EnumDescriptor {
	return file_playlist_proto_enumTypes[3].Descriptor()
}

func (PlaylistItem_Presentation_ContentDestination) Type() protoreflect.EnumType {
	return &file_playlist_proto_enumTypes[3]
}

func (x PlaylistItem_Presentation_ContentDestination) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaylistItem_Presentation_ContentDestination.Descriptor instead.
func (PlaylistItem_Presentation_ContentDestination) EnumDescriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{1, 1, 0}
}

type Playlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               *UUID                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name               string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type               Playlist_Type         `protobuf:"varint,3,opt,name=type,proto3,enum=rv.data.Playlist_Type" json:"type,omitempty"`
	Expanded           bool                  `protobuf:"varint,4,opt,name=expanded,proto3" json:"expanded,omitempty"`
	TargetedLayerUuid  *UUID                 `protobuf:"bytes,5,opt,name=targeted_layer_uuid,json=targetedLayerUuid,proto3" json:"targeted_layer_uuid,omitempty"`
	SmartDirectoryPath *URL                  `protobuf:"bytes,6,opt,name=smart_directory_path,json=smartDirectoryPath,proto3" json:"smart_directory_path,omitempty"`
	HotKey             *HotKey               `protobuf:"bytes,7,opt,name=hot_key,json=hotKey,proto3" json:"hot_key,omitempty"`
	Cues               []*Cue                `protobuf:"bytes,8,rep,name=cues,proto3" json:"cues,omitempty"`
	Children           []*Playlist           `protobuf:"bytes,9,rep,name=children,proto3" json:"children,omitempty"`
	TimecodeEnabled    bool                  `protobuf:"varint,10,opt,name=timecode_enabled,json=timecodeEnabled,proto3" json:"timecode_enabled,omitempty"`
	Timing             Playlist_TimingType   `protobuf:"varint,11,opt,name=timing,proto3,enum=rv.data.Playlist_TimingType" json:"timing,omitempty"`
	StartupInfo        *Playlist_StartupInfo `protobuf:"bytes,16,opt,name=startup_info,json=startupInfo,proto3" json:"startup_info,omitempty"`
	// Types that are assignable to ChildrenType:
	//	*Playlist_Playlists
	//	*Playlist_Items
	ChildrenType isPlaylist_ChildrenType `protobuf_oneof:"ChildrenType"`
	// Types that are assignable to LinkData:
	//	*Playlist_SmartDirectory
	//	*Playlist_PcoPlan
	LinkData isPlaylist_LinkData `protobuf_oneof:"LinkData"`
}

func (x *Playlist) Reset() {
	*x = Playlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Playlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist) ProtoMessage() {}

func (x *Playlist) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist.ProtoReflect.Descriptor instead.
func (*Playlist) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{0}
}

func (x *Playlist) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Playlist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Playlist) GetType() Playlist_Type {
	if x != nil {
		return x.Type
	}
	return Playlist_TYPE_UNKNOWN
}

func (x *Playlist) GetExpanded() bool {
	if x != nil {
		return x.Expanded
	}
	return false
}

func (x *Playlist) GetTargetedLayerUuid() *UUID {
	if x != nil {
		return x.TargetedLayerUuid
	}
	return nil
}

func (x *Playlist) GetSmartDirectoryPath() *URL {
	if x != nil {
		return x.SmartDirectoryPath
	}
	return nil
}

func (x *Playlist) GetHotKey() *HotKey {
	if x != nil {
		return x.HotKey
	}
	return nil
}

func (x *Playlist) GetCues() []*Cue {
	if x != nil {
		return x.Cues
	}
	return nil
}

func (x *Playlist) GetChildren() []*Playlist {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Playlist) GetTimecodeEnabled() bool {
	if x != nil {
		return x.TimecodeEnabled
	}
	return false
}

func (x *Playlist) GetTiming() Playlist_TimingType {
	if x != nil {
		return x.Timing
	}
	return Playlist_TIMING_TYPE_NONE
}

func (x *Playlist) GetStartupInfo() *Playlist_StartupInfo {
	if x != nil {
		return x.StartupInfo
	}
	return nil
}

func (m *Playlist) GetChildrenType() isPlaylist_ChildrenType {
	if m != nil {
		return m.ChildrenType
	}
	return nil
}

func (x *Playlist) GetPlaylists() *Playlist_PlaylistArray {
	if x, ok := x.GetChildrenType().(*Playlist_Playlists); ok {
		return x.Playlists
	}
	return nil
}

func (x *Playlist) GetItems() *Playlist_PlaylistItems {
	if x, ok := x.GetChildrenType().(*Playlist_Items); ok {
		return x.Items
	}
	return nil
}

func (m *Playlist) GetLinkData() isPlaylist_LinkData {
	if m != nil {
		return m.LinkData
	}
	return nil
}

func (x *Playlist) GetSmartDirectory() *Playlist_FolderDirectory {
	if x, ok := x.GetLinkData().(*Playlist_SmartDirectory); ok {
		return x.SmartDirectory
	}
	return nil
}

func (x *Playlist) GetPcoPlan() *PlanningCenterPlan {
	if x, ok := x.GetLinkData().(*Playlist_PcoPlan); ok {
		return x.PcoPlan
	}
	return nil
}

type isPlaylist_ChildrenType interface {
	isPlaylist_ChildrenType()
}

type Playlist_Playlists struct {
	Playlists *Playlist_PlaylistArray `protobuf:"bytes,12,opt,name=playlists,proto3,oneof"`
}

type Playlist_Items struct {
	Items *Playlist_PlaylistItems `protobuf:"bytes,13,opt,name=items,proto3,oneof"`
}

func (*Playlist_Playlists) isPlaylist_ChildrenType() {}

func (*Playlist_Items) isPlaylist_ChildrenType() {}

type isPlaylist_LinkData interface {
	isPlaylist_LinkData()
}

type Playlist_SmartDirectory struct {
	SmartDirectory *Playlist_FolderDirectory `protobuf:"bytes,14,opt,name=smart_directory,json=smartDirectory,proto3,oneof"`
}

type Playlist_PcoPlan struct {
	PcoPlan *PlanningCenterPlan `protobuf:"bytes,15,opt,name=pco_plan,json=pcoPlan,proto3,oneof"`
}

func (*Playlist_SmartDirectory) isPlaylist_LinkData() {}

func (*Playlist_PcoPlan) isPlaylist_LinkData() {}

type PlaylistItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     *UUID   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags     []*UUID `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	IsHidden bool    `protobuf:"varint,9,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	// Types that are assignable to ItemType:
	//	*PlaylistItem_Header_
	//	*PlaylistItem_Presentation_
	//	*PlaylistItem_Cue
	//	*PlaylistItem_PlanningCenter_
	//	*PlaylistItem_Placeholder_
	ItemType isPlaylistItem_ItemType `protobuf_oneof:"ItemType"`
}

func (x *PlaylistItem) Reset() {
	*x = PlaylistItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistItem) ProtoMessage() {}

func (x *PlaylistItem) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistItem.ProtoReflect.Descriptor instead.
func (*PlaylistItem) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{1}
}

func (x *PlaylistItem) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *PlaylistItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlaylistItem) GetTags() []*UUID {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PlaylistItem) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (m *PlaylistItem) GetItemType() isPlaylistItem_ItemType {
	if m != nil {
		return m.ItemType
	}
	return nil
}

func (x *PlaylistItem) GetHeader() *PlaylistItem_Header {
	if x, ok := x.GetItemType().(*PlaylistItem_Header_); ok {
		return x.Header
	}
	return nil
}

func (x *PlaylistItem) GetPresentation() *PlaylistItem_Presentation {
	if x, ok := x.GetItemType().(*PlaylistItem_Presentation_); ok {
		return x.Presentation
	}
	return nil
}

func (x *PlaylistItem) GetCue() *Cue {
	if x, ok := x.GetItemType().(*PlaylistItem_Cue); ok {
		return x.Cue
	}
	return nil
}

func (x *PlaylistItem) GetPlanningCenter() *PlaylistItem_PlanningCenter {
	if x, ok := x.GetItemType().(*PlaylistItem_PlanningCenter_); ok {
		return x.PlanningCenter
	}
	return nil
}

func (x *PlaylistItem) GetPlaceholder() *PlaylistItem_Placeholder {
	if x, ok := x.GetItemType().(*PlaylistItem_Placeholder_); ok {
		return x.Placeholder
	}
	return nil
}

type isPlaylistItem_ItemType interface {
	isPlaylistItem_ItemType()
}

type PlaylistItem_Header_ struct {
	Header *PlaylistItem_Header `protobuf:"bytes,3,opt,name=header,proto3,oneof"`
}

type PlaylistItem_Presentation_ struct {
	Presentation *PlaylistItem_Presentation `protobuf:"bytes,4,opt,name=presentation,proto3,oneof"`
}

type PlaylistItem_Cue struct {
	Cue *Cue `protobuf:"bytes,5,opt,name=cue,proto3,oneof"`
}

type PlaylistItem_PlanningCenter_ struct {
	PlanningCenter *PlaylistItem_PlanningCenter `protobuf:"bytes,6,opt,name=planning_center,json=planningCenter,proto3,oneof"`
}

type PlaylistItem_Placeholder_ struct {
	Placeholder *PlaylistItem_Placeholder `protobuf:"bytes,8,opt,name=placeholder,proto3,oneof"`
}

func (*PlaylistItem_Header_) isPlaylistItem_ItemType() {}

func (*PlaylistItem_Presentation_) isPlaylistItem_ItemType() {}

func (*PlaylistItem_Cue) isPlaylistItem_ItemType() {}

func (*PlaylistItem_PlanningCenter_) isPlaylistItem_ItemType() {}

func (*PlaylistItem_Placeholder_) isPlaylistItem_ItemType() {}

type Playlist_PlaylistArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*Playlist `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
}

func (x *Playlist_PlaylistArray) Reset() {
	*x = Playlist_PlaylistArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Playlist_PlaylistArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist_PlaylistArray) ProtoMessage() {}

func (x *Playlist_PlaylistArray) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist_PlaylistArray.ProtoReflect.Descriptor instead.
func (*Playlist_PlaylistArray) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Playlist_PlaylistArray) GetPlaylists() []*Playlist {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type Playlist_PlaylistItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PlaylistItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Playlist_PlaylistItems) Reset() {
	*x = Playlist_PlaylistItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Playlist_PlaylistItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist_PlaylistItems) ProtoMessage() {}

func (x *Playlist_PlaylistItems) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist_PlaylistItems.ProtoReflect.Descriptor instead.
func (*Playlist_PlaylistItems) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Playlist_PlaylistItems) GetItems() []*PlaylistItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type Playlist_FolderDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmartDirectory *URL                                    `protobuf:"bytes,1,opt,name=smart_directory,json=smartDirectory,proto3" json:"smart_directory,omitempty"`
	ImportBehavior Playlist_FolderDirectory_ImportBehavior `protobuf:"varint,2,opt,name=import_behavior,json=importBehavior,proto3,enum=rv.data.Playlist_FolderDirectory_ImportBehavior" json:"import_behavior,omitempty"`
}

func (x *Playlist_FolderDirectory) Reset() {
	*x = Playlist_FolderDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Playlist_FolderDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist_FolderDirectory) ProtoMessage() {}

func (x *Playlist_FolderDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist_FolderDirectory.ProtoReflect.Descriptor instead.
func (*Playlist_FolderDirectory) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Playlist_FolderDirectory) GetSmartDirectory() *URL {
	if x != nil {
		return x.SmartDirectory
	}
	return nil
}

func (x *Playlist_FolderDirectory) GetImportBehavior() Playlist_FolderDirectory_ImportBehavior {
	if x != nil {
		return x.ImportBehavior
	}
	return Playlist_FolderDirectory_IMPORT_BEHAVIOR_BACKGROUND
}

type Playlist_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color *Color `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Uuid  *UUID  `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Playlist_Tag) Reset() {
	*x = Playlist_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Playlist_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist_Tag) ProtoMessage() {}

func (x *Playlist_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist_Tag.ProtoReflect.Descriptor instead.
func (*Playlist_Tag) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Playlist_Tag) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Playlist_Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Playlist_Tag) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type Playlist_StartupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerOnStartup bool `protobuf:"varint,1,opt,name=trigger_on_startup,json=triggerOnStartup,proto3" json:"trigger_on_startup,omitempty"`
}

func (x *Playlist_StartupInfo) Reset() {
	*x = Playlist_StartupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Playlist_StartupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist_StartupInfo) ProtoMessage() {}

func (x *Playlist_StartupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist_StartupInfo.ProtoReflect.Descriptor instead.
func (*Playlist_StartupInfo) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Playlist_StartupInfo) GetTriggerOnStartup() bool {
	if x != nil {
		return x.TriggerOnStartup
	}
	return false
}

type PlaylistItem_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color   *Color    `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Actions []*Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *PlaylistItem_Header) Reset() {
	*x = PlaylistItem_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistItem_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistItem_Header) ProtoMessage() {}

func (x *PlaylistItem_Header) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistItem_Header.ProtoReflect.Descriptor instead.
func (*PlaylistItem_Header) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PlaylistItem_Header) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *PlaylistItem_Header) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type PlaylistItem_Presentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentPath       *URL                                         `protobuf:"bytes,1,opt,name=document_path,json=documentPath,proto3" json:"document_path,omitempty"`
	Arrangement        *UUID                                        `protobuf:"bytes,2,opt,name=arrangement,proto3" json:"arrangement,omitempty"`
	ContentDestination PlaylistItem_Presentation_ContentDestination `protobuf:"varint,3,opt,name=content_destination,json=contentDestination,proto3,enum=rv.data.PlaylistItem_Presentation_ContentDestination" json:"content_destination,omitempty"`
	UserMusicKey       *MusicKeyScale                               `protobuf:"bytes,4,opt,name=user_music_key,json=userMusicKey,proto3" json:"user_music_key,omitempty"`
}

func (x *PlaylistItem_Presentation) Reset() {
	*x = PlaylistItem_Presentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistItem_Presentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistItem_Presentation) ProtoMessage() {}

func (x *PlaylistItem_Presentation) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistItem_Presentation.ProtoReflect.Descriptor instead.
func (*PlaylistItem_Presentation) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{1, 1}
}

func (x *PlaylistItem_Presentation) GetDocumentPath() *URL {
	if x != nil {
		return x.DocumentPath
	}
	return nil
}

func (x *PlaylistItem_Presentation) GetArrangement() *UUID {
	if x != nil {
		return x.Arrangement
	}
	return nil
}

func (x *PlaylistItem_Presentation) GetContentDestination() PlaylistItem_Presentation_ContentDestination {
	if x != nil {
		return x.ContentDestination
	}
	return PlaylistItem_Presentation_CONTENT_DESTINATION_GLOBAL
}

func (x *PlaylistItem_Presentation) GetUserMusicKey() *MusicKeyScale {
	if x != nil {
		return x.UserMusicKey
	}
	return nil
}

type PlaylistItem_PlanningCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item       *PlanningCenterPlan_PlanItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	LinkedData *PlaylistItem                `protobuf:"bytes,2,opt,name=linked_data,json=linkedData,proto3" json:"linked_data,omitempty"`
}

func (x *PlaylistItem_PlanningCenter) Reset() {
	*x = PlaylistItem_PlanningCenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistItem_PlanningCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistItem_PlanningCenter) ProtoMessage() {}

func (x *PlaylistItem_PlanningCenter) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistItem_PlanningCenter.ProtoReflect.Descriptor instead.
func (*PlaylistItem_PlanningCenter) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{1, 2}
}

func (x *PlaylistItem_PlanningCenter) GetItem() *PlanningCenterPlan_PlanItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *PlaylistItem_PlanningCenter) GetLinkedData() *PlaylistItem {
	if x != nil {
		return x.LinkedData
	}
	return nil
}

type PlaylistItem_Placeholder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedData *PlaylistItem `protobuf:"bytes,1,opt,name=linked_data,json=linkedData,proto3" json:"linked_data,omitempty"`
}

func (x *PlaylistItem_Placeholder) Reset() {
	*x = PlaylistItem_Placeholder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistItem_Placeholder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistItem_Placeholder) ProtoMessage() {}

func (x *PlaylistItem_Placeholder) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistItem_Placeholder.ProtoReflect.Descriptor instead.
func (*PlaylistItem_Placeholder) Descriptor() ([]byte, []int) {
	return file_playlist_proto_rawDescGZIP(), []int{1, 3}
}

func (x *PlaylistItem_Placeholder) GetLinkedData() *PlaylistItem {
	if x != nil {
		return x.LinkedData
	}
	return nil
}

var File_playlist_proto protoreflect.FileDescriptor

var file_playlist_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x68, 0x6f, 0x74, 0x4b, 0x65,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x63, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x0c, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x14, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x52, 0x4c, 0x52,
	0x12, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x07, 0x68, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x48,
	0x6f, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x68, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x04, 0x63, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x75, 0x65, 0x52, 0x04, 0x63, 0x75, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x40, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x48, 0x00, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x63, 0x6f,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x01, 0x52, 0x07, 0x70, 0x63, 0x6f, 0x50,
	0x6c, 0x61, 0x6e, 0x1a, 0x40, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0xf5, 0x01, 0x0a, 0x0f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x0e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x59,
	0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x0e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46,
	0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x62, 0x0a, 0x03, 0x54,
	0x61, 0x67, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x1a,
	0x3b, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x22, 0x5a, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x04, 0x22, 0x59, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xec, 0x08, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x63, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x63, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x1a, 0x59, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xf5,
	0x02, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x55, 0x52, 0x4c, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2f, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x5b, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x01, 0x1a, 0x82, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x45, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1c,
	0x5a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_playlist_proto_rawDescOnce sync.Once
	file_playlist_proto_rawDescData = file_playlist_proto_rawDesc
)

func file_playlist_proto_rawDescGZIP() []byte {
	file_playlist_proto_rawDescOnce.Do(func() {
		file_playlist_proto_rawDescData = protoimpl.X.CompressGZIP(file_playlist_proto_rawDescData)
	})
	return file_playlist_proto_rawDescData
}

var file_playlist_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_playlist_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_playlist_proto_goTypes = []interface{}{
	(Playlist_Type)(0),                                // 0: rv.data.Playlist.Type
	(Playlist_TimingType)(0),                          // 1: rv.data.Playlist.TimingType
	(Playlist_FolderDirectory_ImportBehavior)(0),      // 2: rv.data.Playlist.FolderDirectory.ImportBehavior
	(PlaylistItem_Presentation_ContentDestination)(0), // 3: rv.data.PlaylistItem.Presentation.ContentDestination
	(*Playlist)(nil),                                  // 4: rv.data.Playlist
	(*PlaylistItem)(nil),                              // 5: rv.data.PlaylistItem
	(*Playlist_PlaylistArray)(nil),                    // 6: rv.data.Playlist.PlaylistArray
	(*Playlist_PlaylistItems)(nil),                    // 7: rv.data.Playlist.PlaylistItems
	(*Playlist_FolderDirectory)(nil),                  // 8: rv.data.Playlist.FolderDirectory
	(*Playlist_Tag)(nil),                              // 9: rv.data.Playlist.Tag
	(*Playlist_StartupInfo)(nil),                      // 10: rv.data.Playlist.StartupInfo
	(*PlaylistItem_Header)(nil),                       // 11: rv.data.PlaylistItem.Header
	(*PlaylistItem_Presentation)(nil),                 // 12: rv.data.PlaylistItem.Presentation
	(*PlaylistItem_PlanningCenter)(nil),               // 13: rv.data.PlaylistItem.PlanningCenter
	(*PlaylistItem_Placeholder)(nil),                  // 14: rv.data.PlaylistItem.Placeholder
	(*UUID)(nil),                                      // 15: rv.data.UUID
	(*URL)(nil),                                       // 16: rv.data.URL
	(*HotKey)(nil),                                    // 17: rv.data.HotKey
	(*Cue)(nil),                                       // 18: rv.data.Cue
	(*PlanningCenterPlan)(nil),                        // 19: rv.data.PlanningCenterPlan
	(*Color)(nil),                                     // 20: rv.data.Color
	(*Action)(nil),                                    // 21: rv.data.Action
	(*MusicKeyScale)(nil),                             // 22: rv.data.MusicKeyScale
	(*PlanningCenterPlan_PlanItem)(nil),               // 23: rv.data.PlanningCenterPlan.PlanItem
}
var file_playlist_proto_depIdxs = []int32{
	15, // 0: rv.data.Playlist.uuid:type_name -> rv.data.UUID
	0,  // 1: rv.data.Playlist.type:type_name -> rv.data.Playlist.Type
	15, // 2: rv.data.Playlist.targeted_layer_uuid:type_name -> rv.data.UUID
	16, // 3: rv.data.Playlist.smart_directory_path:type_name -> rv.data.URL
	17, // 4: rv.data.Playlist.hot_key:type_name -> rv.data.HotKey
	18, // 5: rv.data.Playlist.cues:type_name -> rv.data.Cue
	4,  // 6: rv.data.Playlist.children:type_name -> rv.data.Playlist
	1,  // 7: rv.data.Playlist.timing:type_name -> rv.data.Playlist.TimingType
	10, // 8: rv.data.Playlist.startup_info:type_name -> rv.data.Playlist.StartupInfo
	6,  // 9: rv.data.Playlist.playlists:type_name -> rv.data.Playlist.PlaylistArray
	7,  // 10: rv.data.Playlist.items:type_name -> rv.data.Playlist.PlaylistItems
	8,  // 11: rv.data.Playlist.smart_directory:type_name -> rv.data.Playlist.FolderDirectory
	19, // 12: rv.data.Playlist.pco_plan:type_name -> rv.data.PlanningCenterPlan
	15, // 13: rv.data.PlaylistItem.uuid:type_name -> rv.data.UUID
	15, // 14: rv.data.PlaylistItem.tags:type_name -> rv.data.UUID
	11, // 15: rv.data.PlaylistItem.header:type_name -> rv.data.PlaylistItem.Header
	12, // 16: rv.data.PlaylistItem.presentation:type_name -> rv.data.PlaylistItem.Presentation
	18, // 17: rv.data.PlaylistItem.cue:type_name -> rv.data.Cue
	13, // 18: rv.data.PlaylistItem.planning_center:type_name -> rv.data.PlaylistItem.PlanningCenter
	14, // 19: rv.data.PlaylistItem.placeholder:type_name -> rv.data.PlaylistItem.Placeholder
	4,  // 20: rv.data.Playlist.PlaylistArray.playlists:type_name -> rv.data.Playlist
	5,  // 21: rv.data.Playlist.PlaylistItems.items:type_name -> rv.data.PlaylistItem
	16, // 22: rv.data.Playlist.FolderDirectory.smart_directory:type_name -> rv.data.URL
	2,  // 23: rv.data.Playlist.FolderDirectory.import_behavior:type_name -> rv.data.Playlist.FolderDirectory.ImportBehavior
	20, // 24: rv.data.Playlist.Tag.color:type_name -> rv.data.Color
	15, // 25: rv.data.Playlist.Tag.uuid:type_name -> rv.data.UUID
	20, // 26: rv.data.PlaylistItem.Header.color:type_name -> rv.data.Color
	21, // 27: rv.data.PlaylistItem.Header.actions:type_name -> rv.data.Action
	16, // 28: rv.data.PlaylistItem.Presentation.document_path:type_name -> rv.data.URL
	15, // 29: rv.data.PlaylistItem.Presentation.arrangement:type_name -> rv.data.UUID
	3,  // 30: rv.data.PlaylistItem.Presentation.content_destination:type_name -> rv.data.PlaylistItem.Presentation.ContentDestination
	22, // 31: rv.data.PlaylistItem.Presentation.user_music_key:type_name -> rv.data.MusicKeyScale
	23, // 32: rv.data.PlaylistItem.PlanningCenter.item:type_name -> rv.data.PlanningCenterPlan.PlanItem
	5,  // 33: rv.data.PlaylistItem.PlanningCenter.linked_data:type_name -> rv.data.PlaylistItem
	5,  // 34: rv.data.PlaylistItem.Placeholder.linked_data:type_name -> rv.data.PlaylistItem
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_playlist_proto_init() }
func file_playlist_proto_init() {
	if File_playlist_proto != nil {
		return
	}
	file_hotKey_proto_init()
	file_cue_proto_init()
	file_basicTypes_proto_init()
	file_action_proto_init()
	file_planningCenter_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_playlist_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Playlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Playlist_PlaylistArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Playlist_PlaylistItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Playlist_FolderDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Playlist_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Playlist_StartupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistItem_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistItem_Presentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistItem_PlanningCenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistItem_Placeholder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_playlist_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Playlist_Playlists)(nil),
		(*Playlist_Items)(nil),
		(*Playlist_SmartDirectory)(nil),
		(*Playlist_PcoPlan)(nil),
	}
	file_playlist_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PlaylistItem_Header_)(nil),
		(*PlaylistItem_Presentation_)(nil),
		(*PlaylistItem_Cue)(nil),
		(*PlaylistItem_PlanningCenter_)(nil),
		(*PlaylistItem_Placeholder_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_playlist_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_playlist_proto_goTypes,
		DependencyIndexes: file_playlist_proto_depIdxs,
		EnumInfos:         file_playlist_proto_enumTypes,
		MessageInfos:      file_playlist_proto_msgTypes,
	}.Build()
	File_playlist_proto = out.File
	file_playlist_proto_rawDesc = nil
	file_playlist_proto_goTypes = nil
	file_playlist_proto_depIdxs = nil
}
