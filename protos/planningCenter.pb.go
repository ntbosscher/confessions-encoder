// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: planningCenter.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlanningCenterPlan_PlanItem_PlanItemType int32

const (
	PlanningCenterPlan_PlanItem_PLAN_ITEM_TYPE_ITEM   PlanningCenterPlan_PlanItem_PlanItemType = 0
	PlanningCenterPlan_PlanItem_PLAN_ITEM_TYPE_SONG   PlanningCenterPlan_PlanItem_PlanItemType = 1
	PlanningCenterPlan_PlanItem_PLAN_ITEM_TYPE_MEDIA  PlanningCenterPlan_PlanItem_PlanItemType = 2
	PlanningCenterPlan_PlanItem_PLAN_ITEM_TYPE_HEADER PlanningCenterPlan_PlanItem_PlanItemType = 3
)

// Enum value maps for PlanningCenterPlan_PlanItem_PlanItemType.
var (
	PlanningCenterPlan_PlanItem_PlanItemType_name = map[int32]string{
		0: "PLAN_ITEM_TYPE_ITEM",
		1: "PLAN_ITEM_TYPE_SONG",
		2: "PLAN_ITEM_TYPE_MEDIA",
		3: "PLAN_ITEM_TYPE_HEADER",
	}
	PlanningCenterPlan_PlanItem_PlanItemType_value = map[string]int32{
		"PLAN_ITEM_TYPE_ITEM":   0,
		"PLAN_ITEM_TYPE_SONG":   1,
		"PLAN_ITEM_TYPE_MEDIA":  2,
		"PLAN_ITEM_TYPE_HEADER": 3,
	}
)

func (x PlanningCenterPlan_PlanItem_PlanItemType) Enum() *PlanningCenterPlan_PlanItem_PlanItemType {
	p := new(PlanningCenterPlan_PlanItem_PlanItemType)
	*p = x
	return p
}

func (x PlanningCenterPlan_PlanItem_PlanItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanningCenterPlan_PlanItem_PlanItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_planningCenter_proto_enumTypes[0].Descriptor()
}

func (PlanningCenterPlan_PlanItem_PlanItemType) Type() protoreflect.EnumType {
	return &file_planningCenter_proto_enumTypes[0]
}

func (x PlanningCenterPlan_PlanItem_PlanItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanningCenterPlan_PlanItem_PlanItemType.Descriptor instead.
func (PlanningCenterPlan_PlanItem_PlanItemType) EnumDescriptor() ([]byte, []int) {
	return file_planningCenter_proto_rawDescGZIP(), []int{0, 0, 0}
}

type PlanningCenterPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanIdNum           uint32     `protobuf:"varint,1,opt,name=plan_id_num,json=planIdNum,proto3" json:"plan_id_num,omitempty"`
	ParentIdNum         uint32     `protobuf:"varint,2,opt,name=parent_id_num,json=parentIdNum,proto3" json:"parent_id_num,omitempty"`
	SeriesTitle         string     `protobuf:"bytes,3,opt,name=series_title,json=seriesTitle,proto3" json:"series_title,omitempty"`
	PlanTitle           string     `protobuf:"bytes,4,opt,name=plan_title,json=planTitle,proto3" json:"plan_title,omitempty"`
	DateList            string     `protobuf:"bytes,5,opt,name=date_list,json=dateList,proto3" json:"date_list,omitempty"`
	CreatedDate         *Timestamp `protobuf:"bytes,6,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	UpdateDate          *Timestamp `protobuf:"bytes,7,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	LastUpdateCheckDate *Timestamp `protobuf:"bytes,8,opt,name=last_update_check_date,json=lastUpdateCheckDate,proto3" json:"last_update_check_date,omitempty"`
	PlanIdStr           string     `protobuf:"bytes,9,opt,name=plan_id_str,json=planIdStr,proto3" json:"plan_id_str,omitempty"`
	ParentIdStr         string     `protobuf:"bytes,10,opt,name=parent_id_str,json=parentIdStr,proto3" json:"parent_id_str,omitempty"`
}

func (x *PlanningCenterPlan) Reset() {
	*x = PlanningCenterPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planningCenter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanningCenterPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanningCenterPlan) ProtoMessage() {}

func (x *PlanningCenterPlan) ProtoReflect() protoreflect.Message {
	mi := &file_planningCenter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanningCenterPlan.ProtoReflect.Descriptor instead.
func (*PlanningCenterPlan) Descriptor() ([]byte, []int) {
	return file_planningCenter_proto_rawDescGZIP(), []int{0}
}

func (x *PlanningCenterPlan) GetPlanIdNum() uint32 {
	if x != nil {
		return x.PlanIdNum
	}
	return 0
}

func (x *PlanningCenterPlan) GetParentIdNum() uint32 {
	if x != nil {
		return x.ParentIdNum
	}
	return 0
}

func (x *PlanningCenterPlan) GetSeriesTitle() string {
	if x != nil {
		return x.SeriesTitle
	}
	return ""
}

func (x *PlanningCenterPlan) GetPlanTitle() string {
	if x != nil {
		return x.PlanTitle
	}
	return ""
}

func (x *PlanningCenterPlan) GetDateList() string {
	if x != nil {
		return x.DateList
	}
	return ""
}

func (x *PlanningCenterPlan) GetCreatedDate() *Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *PlanningCenterPlan) GetUpdateDate() *Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *PlanningCenterPlan) GetLastUpdateCheckDate() *Timestamp {
	if x != nil {
		return x.LastUpdateCheckDate
	}
	return nil
}

func (x *PlanningCenterPlan) GetPlanIdStr() string {
	if x != nil {
		return x.PlanIdStr
	}
	return ""
}

func (x *PlanningCenterPlan) GetParentIdStr() string {
	if x != nil {
		return x.ParentIdStr
	}
	return ""
}

type PlanningCenterPlan_PlanItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType     PlanningCenterPlan_PlanItem_PlanItemType  `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=rv.data.PlanningCenterPlan_PlanItem_PlanItemType" json:"item_type,omitempty"`
	PcoIdNum     uint32                                    `protobuf:"varint,2,opt,name=pco_id_num,json=pcoIdNum,proto3" json:"pco_id_num,omitempty"`
	ServiceIdNum uint32                                    `protobuf:"varint,3,opt,name=service_id_num,json=serviceIdNum,proto3" json:"service_id_num,omitempty"`
	ParentIdNum  uint32                                    `protobuf:"varint,4,opt,name=parent_id_num,json=parentIdNum,proto3" json:"parent_id_num,omitempty"`
	Name         string                                    `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Attachments  []*PlanningCenterPlan_PlanItem_Attachment `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
	UpdateDate   *Timestamp                                `protobuf:"bytes,7,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	LinkedSong   *PlanningCenterPlan_PlanItem_SongItem     `protobuf:"bytes,8,opt,name=linked_song,json=linkedSong,proto3" json:"linked_song,omitempty"`
	PcoIdStr     string                                    `protobuf:"bytes,9,opt,name=pco_id_str,json=pcoIdStr,proto3" json:"pco_id_str,omitempty"`
	ServiceIdStr string                                    `protobuf:"bytes,10,opt,name=service_id_str,json=serviceIdStr,proto3" json:"service_id_str,omitempty"`
	ParentIdStr  string                                    `protobuf:"bytes,11,opt,name=parent_id_str,json=parentIdStr,proto3" json:"parent_id_str,omitempty"`
}

func (x *PlanningCenterPlan_PlanItem) Reset() {
	*x = PlanningCenterPlan_PlanItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planningCenter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanningCenterPlan_PlanItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanningCenterPlan_PlanItem) ProtoMessage() {}

func (x *PlanningCenterPlan_PlanItem) ProtoReflect() protoreflect.Message {
	mi := &file_planningCenter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanningCenterPlan_PlanItem.ProtoReflect.Descriptor instead.
func (*PlanningCenterPlan_PlanItem) Descriptor() ([]byte, []int) {
	return file_planningCenter_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PlanningCenterPlan_PlanItem) GetItemType() PlanningCenterPlan_PlanItem_PlanItemType {
	if x != nil {
		return x.ItemType
	}
	return PlanningCenterPlan_PlanItem_PLAN_ITEM_TYPE_ITEM
}

func (x *PlanningCenterPlan_PlanItem) GetPcoIdNum() uint32 {
	if x != nil {
		return x.PcoIdNum
	}
	return 0
}

func (x *PlanningCenterPlan_PlanItem) GetServiceIdNum() uint32 {
	if x != nil {
		return x.ServiceIdNum
	}
	return 0
}

func (x *PlanningCenterPlan_PlanItem) GetParentIdNum() uint32 {
	if x != nil {
		return x.ParentIdNum
	}
	return 0
}

func (x *PlanningCenterPlan_PlanItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanningCenterPlan_PlanItem) GetAttachments() []*PlanningCenterPlan_PlanItem_Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *PlanningCenterPlan_PlanItem) GetUpdateDate() *Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *PlanningCenterPlan_PlanItem) GetLinkedSong() *PlanningCenterPlan_PlanItem_SongItem {
	if x != nil {
		return x.LinkedSong
	}
	return nil
}

func (x *PlanningCenterPlan_PlanItem) GetPcoIdStr() string {
	if x != nil {
		return x.PcoIdStr
	}
	return ""
}

func (x *PlanningCenterPlan_PlanItem) GetServiceIdStr() string {
	if x != nil {
		return x.ServiceIdStr
	}
	return ""
}

func (x *PlanningCenterPlan_PlanItem) GetParentIdStr() string {
	if x != nil {
		return x.ParentIdStr
	}
	return ""
}

type PlanningCenterPlan_PlanItem_Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url         *URL       `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	CreatedDate *Timestamp `protobuf:"bytes,3,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	LinkedPath  *URL       `protobuf:"bytes,4,opt,name=linked_path,json=linkedPath,proto3" json:"linked_path,omitempty"`
	PcoIdNum    uint32     `protobuf:"varint,5,opt,name=pco_id_num,json=pcoIdNum,proto3" json:"pco_id_num,omitempty"`
	NeedsUpdate bool       `protobuf:"varint,6,opt,name=needs_update,json=needsUpdate,proto3" json:"needs_update,omitempty"`
	UpdateDate  *Timestamp `protobuf:"bytes,7,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	PcoIdStr    string     `protobuf:"bytes,8,opt,name=pco_id_str,json=pcoIdStr,proto3" json:"pco_id_str,omitempty"`
}

func (x *PlanningCenterPlan_PlanItem_Attachment) Reset() {
	*x = PlanningCenterPlan_PlanItem_Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planningCenter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanningCenterPlan_PlanItem_Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanningCenterPlan_PlanItem_Attachment) ProtoMessage() {}

func (x *PlanningCenterPlan_PlanItem_Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_planningCenter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanningCenterPlan_PlanItem_Attachment.ProtoReflect.Descriptor instead.
func (*PlanningCenterPlan_PlanItem_Attachment) Descriptor() ([]byte, []int) {
	return file_planningCenter_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *PlanningCenterPlan_PlanItem_Attachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanningCenterPlan_PlanItem_Attachment) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *PlanningCenterPlan_PlanItem_Attachment) GetCreatedDate() *Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *PlanningCenterPlan_PlanItem_Attachment) GetLinkedPath() *URL {
	if x != nil {
		return x.LinkedPath
	}
	return nil
}

func (x *PlanningCenterPlan_PlanItem_Attachment) GetPcoIdNum() uint32 {
	if x != nil {
		return x.PcoIdNum
	}
	return 0
}

func (x *PlanningCenterPlan_PlanItem_Attachment) GetNeedsUpdate() bool {
	if x != nil {
		return x.NeedsUpdate
	}
	return false
}

func (x *PlanningCenterPlan_PlanItem_Attachment) GetUpdateDate() *Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *PlanningCenterPlan_PlanItem_Attachment) GetPcoIdStr() string {
	if x != nil {
		return x.PcoIdStr
	}
	return ""
}

type PlanningCenterPlan_PlanItem_SongItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PcoIdNum         uint32                                         `protobuf:"varint,1,opt,name=pco_id_num,json=pcoIdNum,proto3" json:"pco_id_num,omitempty"`
	ArrangementIdNum uint32                                         `protobuf:"varint,2,opt,name=arrangement_id_num,json=arrangementIdNum,proto3" json:"arrangement_id_num,omitempty"`
	Ccli             *Presentation_CCLI                             `protobuf:"bytes,3,opt,name=ccli,proto3" json:"ccli,omitempty"`
	Sequence         *PlanningCenterPlan_PlanItem_SongItem_Sequence `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	PcoIdStr         string                                         `protobuf:"bytes,5,opt,name=pco_id_str,json=pcoIdStr,proto3" json:"pco_id_str,omitempty"`
	ArrangementIdStr string                                         `protobuf:"bytes,6,opt,name=arrangement_id_str,json=arrangementIdStr,proto3" json:"arrangement_id_str,omitempty"`
}

func (x *PlanningCenterPlan_PlanItem_SongItem) Reset() {
	*x = PlanningCenterPlan_PlanItem_SongItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planningCenter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanningCenterPlan_PlanItem_SongItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanningCenterPlan_PlanItem_SongItem) ProtoMessage() {}

func (x *PlanningCenterPlan_PlanItem_SongItem) ProtoReflect() protoreflect.Message {
	mi := &file_planningCenter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanningCenterPlan_PlanItem_SongItem.ProtoReflect.Descriptor instead.
func (*PlanningCenterPlan_PlanItem_SongItem) Descriptor() ([]byte, []int) {
	return file_planningCenter_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *PlanningCenterPlan_PlanItem_SongItem) GetPcoIdNum() uint32 {
	if x != nil {
		return x.PcoIdNum
	}
	return 0
}

func (x *PlanningCenterPlan_PlanItem_SongItem) GetArrangementIdNum() uint32 {
	if x != nil {
		return x.ArrangementIdNum
	}
	return 0
}

func (x *PlanningCenterPlan_PlanItem_SongItem) GetCcli() *Presentation_CCLI {
	if x != nil {
		return x.Ccli
	}
	return nil
}

func (x *PlanningCenterPlan_PlanItem_SongItem) GetSequence() *PlanningCenterPlan_PlanItem_SongItem_Sequence {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *PlanningCenterPlan_PlanItem_SongItem) GetPcoIdStr() string {
	if x != nil {
		return x.PcoIdStr
	}
	return ""
}

func (x *PlanningCenterPlan_PlanItem_SongItem) GetArrangementIdStr() string {
	if x != nil {
		return x.ArrangementIdStr
	}
	return ""
}

type PlanningCenterPlan_PlanItem_SongItem_Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PcoIdNum   uint32   `protobuf:"varint,1,opt,name=pco_id_num,json=pcoIdNum,proto3" json:"pco_id_num,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GroupNames []string `protobuf:"bytes,3,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	PcoIdStr   string   `protobuf:"bytes,4,opt,name=pco_id_str,json=pcoIdStr,proto3" json:"pco_id_str,omitempty"`
}

func (x *PlanningCenterPlan_PlanItem_SongItem_Sequence) Reset() {
	*x = PlanningCenterPlan_PlanItem_SongItem_Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planningCenter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanningCenterPlan_PlanItem_SongItem_Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanningCenterPlan_PlanItem_SongItem_Sequence) ProtoMessage() {}

func (x *PlanningCenterPlan_PlanItem_SongItem_Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_planningCenter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanningCenterPlan_PlanItem_SongItem_Sequence.ProtoReflect.Descriptor instead.
func (*PlanningCenterPlan_PlanItem_SongItem_Sequence) Descriptor() ([]byte, []int) {
	return file_planningCenter_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *PlanningCenterPlan_PlanItem_SongItem_Sequence) GetPcoIdNum() uint32 {
	if x != nil {
		return x.PcoIdNum
	}
	return 0
}

func (x *PlanningCenterPlan_PlanItem_SongItem_Sequence) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanningCenterPlan_PlanItem_SongItem_Sequence) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *PlanningCenterPlan_PlanItem_SongItem_Sequence) GetPcoIdStr() string {
	if x != nil {
		return x.PcoIdStr
	}
	return ""
}

var File_planningCenter_proto protoreflect.FileDescriptor

var file_planningCenter_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x0e, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x16,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x1a, 0xf0, 0x0a, 0x0a, 0x08, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4e, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x63, 0x6f, 0x5f, 0x69, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x63, 0x6f, 0x49,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x63,
	0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x63, 0x6f, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x53,
	0x74, 0x72, 0x1a, 0xba, 0x02, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x52, 0x4c,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x52, 0x4c, 0x52,
	0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x0a, 0x70,
	0x63, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x63, 0x6f, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65,
	0x64, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x63, 0x6f, 0x49, 0x64, 0x53, 0x74, 0x72, 0x1a,
	0xa3, 0x03, 0x0a, 0x08, 0x53, 0x6f, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x0a,
	0x70, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x63, 0x6f, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x63, 0x6c, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x43,
	0x4c, 0x49, 0x52, 0x04, 0x63, 0x63, 0x6c, 0x69, 0x12, 0x52, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x0a,
	0x70, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x63, 0x6f, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x1a, 0x7b, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x63, 0x6f, 0x49, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x63, 0x6f, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x63, 0x6f,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0x75, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03, 0x42, 0x1c, 0x5a, 0x1a,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_planningCenter_proto_rawDescOnce sync.Once
	file_planningCenter_proto_rawDescData = file_planningCenter_proto_rawDesc
)

func file_planningCenter_proto_rawDescGZIP() []byte {
	file_planningCenter_proto_rawDescOnce.Do(func() {
		file_planningCenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_planningCenter_proto_rawDescData)
	})
	return file_planningCenter_proto_rawDescData
}

var file_planningCenter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_planningCenter_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_planningCenter_proto_goTypes = []interface{}{
	(PlanningCenterPlan_PlanItem_PlanItemType)(0),         // 0: rv.data.PlanningCenterPlan.PlanItem.PlanItemType
	(*PlanningCenterPlan)(nil),                            // 1: rv.data.PlanningCenterPlan
	(*PlanningCenterPlan_PlanItem)(nil),                   // 2: rv.data.PlanningCenterPlan.PlanItem
	(*PlanningCenterPlan_PlanItem_Attachment)(nil),        // 3: rv.data.PlanningCenterPlan.PlanItem.Attachment
	(*PlanningCenterPlan_PlanItem_SongItem)(nil),          // 4: rv.data.PlanningCenterPlan.PlanItem.SongItem
	(*PlanningCenterPlan_PlanItem_SongItem_Sequence)(nil), // 5: rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence
	(*Timestamp)(nil),                                     // 6: rv.data.Timestamp
	(*URL)(nil),                                           // 7: rv.data.URL
	(*Presentation_CCLI)(nil),                             // 8: rv.data.Presentation.CCLI
}
var file_planningCenter_proto_depIdxs = []int32{
	6,  // 0: rv.data.PlanningCenterPlan.created_date:type_name -> rv.data.Timestamp
	6,  // 1: rv.data.PlanningCenterPlan.update_date:type_name -> rv.data.Timestamp
	6,  // 2: rv.data.PlanningCenterPlan.last_update_check_date:type_name -> rv.data.Timestamp
	0,  // 3: rv.data.PlanningCenterPlan.PlanItem.item_type:type_name -> rv.data.PlanningCenterPlan.PlanItem.PlanItemType
	3,  // 4: rv.data.PlanningCenterPlan.PlanItem.attachments:type_name -> rv.data.PlanningCenterPlan.PlanItem.Attachment
	6,  // 5: rv.data.PlanningCenterPlan.PlanItem.update_date:type_name -> rv.data.Timestamp
	4,  // 6: rv.data.PlanningCenterPlan.PlanItem.linked_song:type_name -> rv.data.PlanningCenterPlan.PlanItem.SongItem
	7,  // 7: rv.data.PlanningCenterPlan.PlanItem.Attachment.url:type_name -> rv.data.URL
	6,  // 8: rv.data.PlanningCenterPlan.PlanItem.Attachment.created_date:type_name -> rv.data.Timestamp
	7,  // 9: rv.data.PlanningCenterPlan.PlanItem.Attachment.linked_path:type_name -> rv.data.URL
	6,  // 10: rv.data.PlanningCenterPlan.PlanItem.Attachment.update_date:type_name -> rv.data.Timestamp
	8,  // 11: rv.data.PlanningCenterPlan.PlanItem.SongItem.ccli:type_name -> rv.data.Presentation.CCLI
	5,  // 12: rv.data.PlanningCenterPlan.PlanItem.SongItem.sequence:type_name -> rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_planningCenter_proto_init() }
func file_planningCenter_proto_init() {
	if File_planningCenter_proto != nil {
		return
	}
	file_basicTypes_proto_init()
	file_timestamp_proto_init()
	file_presentation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_planningCenter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanningCenterPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planningCenter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanningCenterPlan_PlanItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planningCenter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanningCenterPlan_PlanItem_Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planningCenter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanningCenterPlan_PlanItem_SongItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planningCenter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanningCenterPlan_PlanItem_SongItem_Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_planningCenter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_planningCenter_proto_goTypes,
		DependencyIndexes: file_planningCenter_proto_depIdxs,
		EnumInfos:         file_planningCenter_proto_enumTypes,
		MessageInfos:      file_planningCenter_proto_msgTypes,
	}.Build()
	File_planningCenter_proto = out.File
	file_planningCenter_proto_rawDesc = nil
	file_planningCenter_proto_goTypes = nil
	file_planningCenter_proto_depIdxs = nil
}
