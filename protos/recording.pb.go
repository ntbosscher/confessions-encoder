// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: recording.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Recording_Stream_Encoder_Codec int32

const (
	Recording_Stream_Encoder_CODEC_AUTOMATIC        Recording_Stream_Encoder_Codec = 0
	Recording_Stream_Encoder_CODEC_H264             Recording_Stream_Encoder_Codec = 1
	Recording_Stream_Encoder_CODEC_H265             Recording_Stream_Encoder_Codec = 2
	Recording_Stream_Encoder_CODEC_PRORES_422_PROXY Recording_Stream_Encoder_Codec = 3
	Recording_Stream_Encoder_CODEC_PRORES_422_LT    Recording_Stream_Encoder_Codec = 4
	Recording_Stream_Encoder_CODEC_PRORES_422       Recording_Stream_Encoder_Codec = 5
	Recording_Stream_Encoder_CODEC_PRORES_422_HQ    Recording_Stream_Encoder_Codec = 6
	Recording_Stream_Encoder_CODEC_PRORES_4444      Recording_Stream_Encoder_Codec = 7
	Recording_Stream_Encoder_CODEC_PRORES_4444_XQ   Recording_Stream_Encoder_Codec = 8
	Recording_Stream_Encoder_CODEC_HAP              Recording_Stream_Encoder_Codec = 9
	Recording_Stream_Encoder_CODEC_HAP_ALPHA        Recording_Stream_Encoder_Codec = 10
	Recording_Stream_Encoder_CODEC_HAP_Q            Recording_Stream_Encoder_Codec = 11
	Recording_Stream_Encoder_CODEC_HAP_Q_ALPHA      Recording_Stream_Encoder_Codec = 12
	Recording_Stream_Encoder_CODEC_NOTCH            Recording_Stream_Encoder_Codec = 13
	Recording_Stream_Encoder_CODEC_H264_SOFTWARE    Recording_Stream_Encoder_Codec = 14
	Recording_Stream_Encoder_CODEC_H265_SOFTWARE    Recording_Stream_Encoder_Codec = 15
)

// Enum value maps for Recording_Stream_Encoder_Codec.
var (
	Recording_Stream_Encoder_Codec_name = map[int32]string{
		0:  "CODEC_AUTOMATIC",
		1:  "CODEC_H264",
		2:  "CODEC_H265",
		3:  "CODEC_PRORES_422_PROXY",
		4:  "CODEC_PRORES_422_LT",
		5:  "CODEC_PRORES_422",
		6:  "CODEC_PRORES_422_HQ",
		7:  "CODEC_PRORES_4444",
		8:  "CODEC_PRORES_4444_XQ",
		9:  "CODEC_HAP",
		10: "CODEC_HAP_ALPHA",
		11: "CODEC_HAP_Q",
		12: "CODEC_HAP_Q_ALPHA",
		13: "CODEC_NOTCH",
		14: "CODEC_H264_SOFTWARE",
		15: "CODEC_H265_SOFTWARE",
	}
	Recording_Stream_Encoder_Codec_value = map[string]int32{
		"CODEC_AUTOMATIC":        0,
		"CODEC_H264":             1,
		"CODEC_H265":             2,
		"CODEC_PRORES_422_PROXY": 3,
		"CODEC_PRORES_422_LT":    4,
		"CODEC_PRORES_422":       5,
		"CODEC_PRORES_422_HQ":    6,
		"CODEC_PRORES_4444":      7,
		"CODEC_PRORES_4444_XQ":   8,
		"CODEC_HAP":              9,
		"CODEC_HAP_ALPHA":        10,
		"CODEC_HAP_Q":            11,
		"CODEC_HAP_Q_ALPHA":      12,
		"CODEC_NOTCH":            13,
		"CODEC_H264_SOFTWARE":    14,
		"CODEC_H265_SOFTWARE":    15,
	}
)

func (x Recording_Stream_Encoder_Codec) Enum() *Recording_Stream_Encoder_Codec {
	p := new(Recording_Stream_Encoder_Codec)
	*p = x
	return p
}

func (x Recording_Stream_Encoder_Codec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Recording_Stream_Encoder_Codec) Descriptor() protoreflect.EnumDescriptor {
	return file_recording_proto_enumTypes[0].Descriptor()
}

func (Recording_Stream_Encoder_Codec) Type() protoreflect.EnumType {
	return &file_recording_proto_enumTypes[0]
}

func (x Recording_Stream_Encoder_Codec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Recording_Stream_Encoder_Codec.Descriptor instead.
func (Recording_Stream_Encoder_Codec) EnumDescriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Recording_Stream_Encoder_FrameRate int32

const (
	Recording_Stream_Encoder_FRAME_RATE_UNKNOWN Recording_Stream_Encoder_FrameRate = 0
	Recording_Stream_Encoder_FRAME_RATE_24      Recording_Stream_Encoder_FrameRate = 1
	Recording_Stream_Encoder_FRAME_RATE_25      Recording_Stream_Encoder_FrameRate = 2
	Recording_Stream_Encoder_FRAME_RATE_29_97   Recording_Stream_Encoder_FrameRate = 3
	Recording_Stream_Encoder_FRAME_RATE_30      Recording_Stream_Encoder_FrameRate = 4
	Recording_Stream_Encoder_FRAME_RATE_50      Recording_Stream_Encoder_FrameRate = 5
	Recording_Stream_Encoder_FRAME_RATE_59_94   Recording_Stream_Encoder_FrameRate = 6
	Recording_Stream_Encoder_FRAME_RATE_60      Recording_Stream_Encoder_FrameRate = 7
)

// Enum value maps for Recording_Stream_Encoder_FrameRate.
var (
	Recording_Stream_Encoder_FrameRate_name = map[int32]string{
		0: "FRAME_RATE_UNKNOWN",
		1: "FRAME_RATE_24",
		2: "FRAME_RATE_25",
		3: "FRAME_RATE_29_97",
		4: "FRAME_RATE_30",
		5: "FRAME_RATE_50",
		6: "FRAME_RATE_59_94",
		7: "FRAME_RATE_60",
	}
	Recording_Stream_Encoder_FrameRate_value = map[string]int32{
		"FRAME_RATE_UNKNOWN": 0,
		"FRAME_RATE_24":      1,
		"FRAME_RATE_25":      2,
		"FRAME_RATE_29_97":   3,
		"FRAME_RATE_30":      4,
		"FRAME_RATE_50":      5,
		"FRAME_RATE_59_94":   6,
		"FRAME_RATE_60":      7,
	}
)

func (x Recording_Stream_Encoder_FrameRate) Enum() *Recording_Stream_Encoder_FrameRate {
	p := new(Recording_Stream_Encoder_FrameRate)
	*p = x
	return p
}

func (x Recording_Stream_Encoder_FrameRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Recording_Stream_Encoder_FrameRate) Descriptor() protoreflect.EnumDescriptor {
	return file_recording_proto_enumTypes[1].Descriptor()
}

func (Recording_Stream_Encoder_FrameRate) Type() protoreflect.EnumType {
	return &file_recording_proto_enumTypes[1]
}

func (x Recording_Stream_Encoder_FrameRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Recording_Stream_Encoder_FrameRate.Descriptor instead.
func (Recording_Stream_Encoder_FrameRate) EnumDescriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

type Recording_Stream_DiskDestination_Container int32

const (
	Recording_Stream_DiskDestination_CONTAINER_UNKNOWN Recording_Stream_DiskDestination_Container = 0
	Recording_Stream_DiskDestination_CONTAINER_MOV     Recording_Stream_DiskDestination_Container = 1
	Recording_Stream_DiskDestination_CONTAINER_MP4     Recording_Stream_DiskDestination_Container = 2
)

// Enum value maps for Recording_Stream_DiskDestination_Container.
var (
	Recording_Stream_DiskDestination_Container_name = map[int32]string{
		0: "CONTAINER_UNKNOWN",
		1: "CONTAINER_MOV",
		2: "CONTAINER_MP4",
	}
	Recording_Stream_DiskDestination_Container_value = map[string]int32{
		"CONTAINER_UNKNOWN": 0,
		"CONTAINER_MOV":     1,
		"CONTAINER_MP4":     2,
	}
)

func (x Recording_Stream_DiskDestination_Container) Enum() *Recording_Stream_DiskDestination_Container {
	p := new(Recording_Stream_DiskDestination_Container)
	*p = x
	return p
}

func (x Recording_Stream_DiskDestination_Container) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Recording_Stream_DiskDestination_Container) Descriptor() protoreflect.EnumDescriptor {
	return file_recording_proto_enumTypes[2].Descriptor()
}

func (Recording_Stream_DiskDestination_Container) Type() protoreflect.EnumType {
	return &file_recording_proto_enumTypes[2]
}

func (x Recording_Stream_DiskDestination_Container) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Recording_Stream_DiskDestination_Container.Descriptor instead.
func (Recording_Stream_DiskDestination_Container) EnumDescriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

type Recording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Recording) Reset() {
	*x = Recording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recording_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording) ProtoMessage() {}

func (x *Recording) ProtoReflect() protoreflect.Message {
	mi := &file_recording_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording.ProtoReflect.Descriptor instead.
func (*Recording) Descriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0}
}

type Recording_SettingsDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams []*Recording_Stream `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (x *Recording_SettingsDocument) Reset() {
	*x = Recording_SettingsDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recording_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording_SettingsDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording_SettingsDocument) ProtoMessage() {}

func (x *Recording_SettingsDocument) ProtoReflect() protoreflect.Message {
	mi := &file_recording_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording_SettingsDocument.ProtoReflect.Descriptor instead.
func (*Recording_SettingsDocument) Descriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Recording_SettingsDocument) GetStreams() []*Recording_Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

type Recording_Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *UUID                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Encoder             *Recording_Stream_Encoder       `protobuf:"bytes,3,opt,name=encoder,proto3" json:"encoder,omitempty"`
	Destinations        []*Recording_Stream_Destination `protobuf:"bytes,4,rep,name=destinations,proto3" json:"destinations,omitempty"`
	AudioMap            []*DigitalAudio_Device_Map      `protobuf:"bytes,5,rep,name=audio_map,json=audioMap,proto3" json:"audio_map,omitempty"`
	IsAudioCustomMapped bool                            `protobuf:"varint,6,opt,name=isAudioCustomMapped,proto3" json:"isAudioCustomMapped,omitempty"`
	// Types that are assignable to Source:
	//	*Recording_Stream_OutputScreen
	Source isRecording_Stream_Source `protobuf_oneof:"Source"`
}

func (x *Recording_Stream) Reset() {
	*x = Recording_Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recording_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording_Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording_Stream) ProtoMessage() {}

func (x *Recording_Stream) ProtoReflect() protoreflect.Message {
	mi := &file_recording_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording_Stream.ProtoReflect.Descriptor instead.
func (*Recording_Stream) Descriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Recording_Stream) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Recording_Stream) GetEncoder() *Recording_Stream_Encoder {
	if x != nil {
		return x.Encoder
	}
	return nil
}

func (x *Recording_Stream) GetDestinations() []*Recording_Stream_Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *Recording_Stream) GetAudioMap() []*DigitalAudio_Device_Map {
	if x != nil {
		return x.AudioMap
	}
	return nil
}

func (x *Recording_Stream) GetIsAudioCustomMapped() bool {
	if x != nil {
		return x.IsAudioCustomMapped
	}
	return false
}

func (m *Recording_Stream) GetSource() isRecording_Stream_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Recording_Stream) GetOutputScreen() *Recording_Stream_OutputScreenSource {
	if x, ok := x.GetSource().(*Recording_Stream_OutputScreen); ok {
		return x.OutputScreen
	}
	return nil
}

type isRecording_Stream_Source interface {
	isRecording_Stream_Source()
}

type Recording_Stream_OutputScreen struct {
	OutputScreen *Recording_Stream_OutputScreenSource `protobuf:"bytes,2,opt,name=output_screen,json=outputScreen,proto3,oneof"`
}

func (*Recording_Stream_OutputScreen) isRecording_Stream_Source() {}

type Recording_Stream_Encoder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codec        Recording_Stream_Encoder_Codec     `protobuf:"varint,1,opt,name=codec,proto3,enum=rv.data.Recording_Stream_Encoder_Codec" json:"codec,omitempty"`
	VideoWidth   uint32                             `protobuf:"varint,2,opt,name=video_width,json=videoWidth,proto3" json:"video_width,omitempty"`
	VideoHeight  uint32                             `protobuf:"varint,3,opt,name=video_height,json=videoHeight,proto3" json:"video_height,omitempty"`
	IsInterlaced bool                               `protobuf:"varint,4,opt,name=is_interlaced,json=isInterlaced,proto3" json:"is_interlaced,omitempty"`
	FrameRate    Recording_Stream_Encoder_FrameRate `protobuf:"varint,5,opt,name=frameRate,proto3,enum=rv.data.Recording_Stream_Encoder_FrameRate" json:"frameRate,omitempty"`
	VideoBitrate uint32                             `protobuf:"varint,6,opt,name=video_bitrate,json=videoBitrate,proto3" json:"video_bitrate,omitempty"`
}

func (x *Recording_Stream_Encoder) Reset() {
	*x = Recording_Stream_Encoder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recording_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording_Stream_Encoder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording_Stream_Encoder) ProtoMessage() {}

func (x *Recording_Stream_Encoder) ProtoReflect() protoreflect.Message {
	mi := &file_recording_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording_Stream_Encoder.ProtoReflect.Descriptor instead.
func (*Recording_Stream_Encoder) Descriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Recording_Stream_Encoder) GetCodec() Recording_Stream_Encoder_Codec {
	if x != nil {
		return x.Codec
	}
	return Recording_Stream_Encoder_CODEC_AUTOMATIC
}

func (x *Recording_Stream_Encoder) GetVideoWidth() uint32 {
	if x != nil {
		return x.VideoWidth
	}
	return 0
}

func (x *Recording_Stream_Encoder) GetVideoHeight() uint32 {
	if x != nil {
		return x.VideoHeight
	}
	return 0
}

func (x *Recording_Stream_Encoder) GetIsInterlaced() bool {
	if x != nil {
		return x.IsInterlaced
	}
	return false
}

func (x *Recording_Stream_Encoder) GetFrameRate() Recording_Stream_Encoder_FrameRate {
	if x != nil {
		return x.FrameRate
	}
	return Recording_Stream_Encoder_FRAME_RATE_UNKNOWN
}

func (x *Recording_Stream_Encoder) GetVideoBitrate() uint32 {
	if x != nil {
		return x.VideoBitrate
	}
	return 0
}

type Recording_Stream_OutputScreenSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenId   *UUID  `protobuf:"bytes,1,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
	ScreenName string `protobuf:"bytes,2,opt,name=screen_name,json=screenName,proto3" json:"screen_name,omitempty"`
}

func (x *Recording_Stream_OutputScreenSource) Reset() {
	*x = Recording_Stream_OutputScreenSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recording_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording_Stream_OutputScreenSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording_Stream_OutputScreenSource) ProtoMessage() {}

func (x *Recording_Stream_OutputScreenSource) ProtoReflect() protoreflect.Message {
	mi := &file_recording_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording_Stream_OutputScreenSource.ProtoReflect.Descriptor instead.
func (*Recording_Stream_OutputScreenSource) Descriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Recording_Stream_OutputScreenSource) GetScreenId() *UUID {
	if x != nil {
		return x.ScreenId
	}
	return nil
}

func (x *Recording_Stream_OutputScreenSource) GetScreenName() string {
	if x != nil {
		return x.ScreenName
	}
	return ""
}

type Recording_Stream_DiskDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location  *URL                                       `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Container Recording_Stream_DiskDestination_Container `protobuf:"varint,2,opt,name=container,proto3,enum=rv.data.Recording_Stream_DiskDestination_Container" json:"container,omitempty"`
}

func (x *Recording_Stream_DiskDestination) Reset() {
	*x = Recording_Stream_DiskDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recording_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording_Stream_DiskDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording_Stream_DiskDestination) ProtoMessage() {}

func (x *Recording_Stream_DiskDestination) ProtoReflect() protoreflect.Message {
	mi := &file_recording_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording_Stream_DiskDestination.ProtoReflect.Descriptor instead.
func (*Recording_Stream_DiskDestination) Descriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *Recording_Stream_DiskDestination) GetLocation() *URL {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Recording_Stream_DiskDestination) GetContainer() Recording_Stream_DiskDestination_Container {
	if x != nil {
		return x.Container
	}
	return Recording_Stream_DiskDestination_CONTAINER_UNKNOWN
}

type Recording_Stream_RTMPDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Recording_Stream_RTMPDestination) Reset() {
	*x = Recording_Stream_RTMPDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recording_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording_Stream_RTMPDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording_Stream_RTMPDestination) ProtoMessage() {}

func (x *Recording_Stream_RTMPDestination) ProtoReflect() protoreflect.Message {
	mi := &file_recording_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording_Stream_RTMPDestination.ProtoReflect.Descriptor instead.
func (*Recording_Stream_RTMPDestination) Descriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *Recording_Stream_RTMPDestination) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Recording_Stream_RTMPDestination) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Recording_Stream_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Destination:
	//	*Recording_Stream_Destination_Disk
	//	*Recording_Stream_Destination_Rtmp
	//	*Recording_Stream_Destination_Resi_
	Destination isRecording_Stream_Destination_Destination `protobuf_oneof:"Destination"`
}

func (x *Recording_Stream_Destination) Reset() {
	*x = Recording_Stream_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recording_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording_Stream_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording_Stream_Destination) ProtoMessage() {}

func (x *Recording_Stream_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_recording_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording_Stream_Destination.ProtoReflect.Descriptor instead.
func (*Recording_Stream_Destination) Descriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (m *Recording_Stream_Destination) GetDestination() isRecording_Stream_Destination_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *Recording_Stream_Destination) GetDisk() *Recording_Stream_DiskDestination {
	if x, ok := x.GetDestination().(*Recording_Stream_Destination_Disk); ok {
		return x.Disk
	}
	return nil
}

func (x *Recording_Stream_Destination) GetRtmp() *Recording_Stream_RTMPDestination {
	if x, ok := x.GetDestination().(*Recording_Stream_Destination_Rtmp); ok {
		return x.Rtmp
	}
	return nil
}

func (x *Recording_Stream_Destination) GetResi() *Recording_Stream_Destination_Resi {
	if x, ok := x.GetDestination().(*Recording_Stream_Destination_Resi_); ok {
		return x.Resi
	}
	return nil
}

type isRecording_Stream_Destination_Destination interface {
	isRecording_Stream_Destination_Destination()
}

type Recording_Stream_Destination_Disk struct {
	Disk *Recording_Stream_DiskDestination `protobuf:"bytes,1,opt,name=disk,proto3,oneof"`
}

type Recording_Stream_Destination_Rtmp struct {
	Rtmp *Recording_Stream_RTMPDestination `protobuf:"bytes,2,opt,name=rtmp,proto3,oneof"`
}

type Recording_Stream_Destination_Resi_ struct {
	Resi *Recording_Stream_Destination_Resi `protobuf:"bytes,3,opt,name=resi,proto3,oneof"`
}

func (*Recording_Stream_Destination_Disk) isRecording_Stream_Destination_Destination() {}

func (*Recording_Stream_Destination_Rtmp) isRecording_Stream_Destination_Destination() {}

func (*Recording_Stream_Destination_Resi_) isRecording_Stream_Destination_Destination() {}

type Recording_Stream_Destination_Resi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationGroupId *UUID `protobuf:"bytes,1,opt,name=destination_group_id,json=destinationGroupId,proto3" json:"destination_group_id,omitempty"`
	EncoderProfileId   *UUID `protobuf:"bytes,2,opt,name=encoder_profile_id,json=encoderProfileId,proto3" json:"encoder_profile_id,omitempty"`
}

func (x *Recording_Stream_Destination_Resi) Reset() {
	*x = Recording_Stream_Destination_Resi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recording_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording_Stream_Destination_Resi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording_Stream_Destination_Resi) ProtoMessage() {}

func (x *Recording_Stream_Destination_Resi) ProtoReflect() protoreflect.Message {
	mi := &file_recording_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording_Stream_Destination_Resi.ProtoReflect.Descriptor instead.
func (*Recording_Stream_Destination_Resi) Descriptor() ([]byte, []int) {
	return file_recording_proto_rawDescGZIP(), []int{0, 1, 4, 0}
}

func (x *Recording_Stream_Destination_Resi) GetDestinationGroupId() *UUID {
	if x != nil {
		return x.DestinationGroupId
	}
	return nil
}

func (x *Recording_Stream_Destination_Resi) GetEncoderProfileId() *UUID {
	if x != nil {
		return x.EncoderProfileId
	}
	return nil
}

var File_recording_proto protoreflect.FileDescriptor

var file_recording_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf5, 0x0f, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x47,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x9e, 0x0f, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x49,
	0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x1a,
	0xb5, 0x06, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x48, 0x32, 0x36, 0x34,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x48, 0x32, 0x36, 0x35,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x52,
	0x45, 0x53, 0x5f, 0x34, 0x32, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x34,
	0x32, 0x32, 0x5f, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x43,
	0x5f, 0x50, 0x52, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x34, 0x32, 0x32, 0x10, 0x05, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x34, 0x32,
	0x32, 0x5f, 0x48, 0x51, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f,
	0x50, 0x52, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x34, 0x34, 0x34, 0x34, 0x10, 0x07, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x34, 0x34,
	0x34, 0x34, 0x5f, 0x58, 0x51, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x44, 0x45, 0x43,
	0x5f, 0x48, 0x41, 0x50, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f,
	0x48, 0x41, 0x50, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x4f, 0x44, 0x45, 0x43, 0x5f, 0x48, 0x41, 0x50, 0x5f, 0x51, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x48, 0x41, 0x50, 0x5f, 0x51, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x4e, 0x4f, 0x54,
	0x43, 0x48, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x48, 0x32,
	0x36, 0x34, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x48, 0x32, 0x36, 0x35, 0x5f, 0x53, 0x4f, 0x46, 0x54,
	0x57, 0x41, 0x52, 0x45, 0x10, 0x0f, 0x22, 0xae, 0x01, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x34, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x35,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x32, 0x39, 0x5f, 0x39, 0x37, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x33, 0x30, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x35, 0x30, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x35, 0x39, 0x5f,
	0x39, 0x34, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x36, 0x30, 0x10, 0x07, 0x1a, 0x61, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x09, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xd8, 0x01, 0x0a, 0x0f, 0x44,
	0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f,
	0x4d, 0x50, 0x34, 0x10, 0x02, 0x1a, 0x3d, 0x0a, 0x0f, 0x52, 0x54, 0x4d, 0x50, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x1a, 0xe7, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x04, 0x72, 0x74, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52,
	0x54, 0x4d, 0x50, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x74, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x69,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x73, 0x69, 0x1a, 0x84, 0x01, 0x0a, 0x04, 0x52, 0x65, 0x73,
	0x69, 0x12, 0x3f, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recording_proto_rawDescOnce sync.Once
	file_recording_proto_rawDescData = file_recording_proto_rawDesc
)

func file_recording_proto_rawDescGZIP() []byte {
	file_recording_proto_rawDescOnce.Do(func() {
		file_recording_proto_rawDescData = protoimpl.X.CompressGZIP(file_recording_proto_rawDescData)
	})
	return file_recording_proto_rawDescData
}

var file_recording_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_recording_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_recording_proto_goTypes = []interface{}{
	(Recording_Stream_Encoder_Codec)(0),             // 0: rv.data.Recording.Stream.Encoder.Codec
	(Recording_Stream_Encoder_FrameRate)(0),         // 1: rv.data.Recording.Stream.Encoder.FrameRate
	(Recording_Stream_DiskDestination_Container)(0), // 2: rv.data.Recording.Stream.DiskDestination.Container
	(*Recording)(nil),                               // 3: rv.data.Recording
	(*Recording_SettingsDocument)(nil),              // 4: rv.data.Recording.SettingsDocument
	(*Recording_Stream)(nil),                        // 5: rv.data.Recording.Stream
	(*Recording_Stream_Encoder)(nil),                // 6: rv.data.Recording.Stream.Encoder
	(*Recording_Stream_OutputScreenSource)(nil),     // 7: rv.data.Recording.Stream.OutputScreenSource
	(*Recording_Stream_DiskDestination)(nil),        // 8: rv.data.Recording.Stream.DiskDestination
	(*Recording_Stream_RTMPDestination)(nil),        // 9: rv.data.Recording.Stream.RTMPDestination
	(*Recording_Stream_Destination)(nil),            // 10: rv.data.Recording.Stream.Destination
	(*Recording_Stream_Destination_Resi)(nil),       // 11: rv.data.Recording.Stream.Destination.Resi
	(*UUID)(nil),                    // 12: rv.data.UUID
	(*DigitalAudio_Device_Map)(nil), // 13: rv.data.DigitalAudio.Device.Map
	(*URL)(nil),                     // 14: rv.data.URL
}
var file_recording_proto_depIdxs = []int32{
	5,  // 0: rv.data.Recording.SettingsDocument.streams:type_name -> rv.data.Recording.Stream
	12, // 1: rv.data.Recording.Stream.id:type_name -> rv.data.UUID
	6,  // 2: rv.data.Recording.Stream.encoder:type_name -> rv.data.Recording.Stream.Encoder
	10, // 3: rv.data.Recording.Stream.destinations:type_name -> rv.data.Recording.Stream.Destination
	13, // 4: rv.data.Recording.Stream.audio_map:type_name -> rv.data.DigitalAudio.Device.Map
	7,  // 5: rv.data.Recording.Stream.output_screen:type_name -> rv.data.Recording.Stream.OutputScreenSource
	0,  // 6: rv.data.Recording.Stream.Encoder.codec:type_name -> rv.data.Recording.Stream.Encoder.Codec
	1,  // 7: rv.data.Recording.Stream.Encoder.frameRate:type_name -> rv.data.Recording.Stream.Encoder.FrameRate
	12, // 8: rv.data.Recording.Stream.OutputScreenSource.screen_id:type_name -> rv.data.UUID
	14, // 9: rv.data.Recording.Stream.DiskDestination.location:type_name -> rv.data.URL
	2,  // 10: rv.data.Recording.Stream.DiskDestination.container:type_name -> rv.data.Recording.Stream.DiskDestination.Container
	8,  // 11: rv.data.Recording.Stream.Destination.disk:type_name -> rv.data.Recording.Stream.DiskDestination
	9,  // 12: rv.data.Recording.Stream.Destination.rtmp:type_name -> rv.data.Recording.Stream.RTMPDestination
	11, // 13: rv.data.Recording.Stream.Destination.resi:type_name -> rv.data.Recording.Stream.Destination.Resi
	12, // 14: rv.data.Recording.Stream.Destination.Resi.destination_group_id:type_name -> rv.data.UUID
	12, // 15: rv.data.Recording.Stream.Destination.Resi.encoder_profile_id:type_name -> rv.data.UUID
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_recording_proto_init() }
func file_recording_proto_init() {
	if File_recording_proto != nil {
		return
	}
	file_basicTypes_proto_init()
	file_digitalAudio_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_recording_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recording_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording_SettingsDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recording_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording_Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recording_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording_Stream_Encoder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recording_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording_Stream_OutputScreenSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recording_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording_Stream_DiskDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recording_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording_Stream_RTMPDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recording_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording_Stream_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recording_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording_Stream_Destination_Resi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_recording_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Recording_Stream_OutputScreen)(nil),
	}
	file_recording_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Recording_Stream_Destination_Disk)(nil),
		(*Recording_Stream_Destination_Rtmp)(nil),
		(*Recording_Stream_Destination_Resi_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recording_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_recording_proto_goTypes,
		DependencyIndexes: file_recording_proto_depIdxs,
		EnumInfos:         file_recording_proto_enumTypes,
		MessageInfos:      file_recording_proto_msgTypes,
	}.Build()
	File_recording_proto = out.File
	file_recording_proto_rawDesc = nil
	file_recording_proto_goTypes = nil
	file_recording_proto_depIdxs = nil
}
