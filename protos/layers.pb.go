// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: layers.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Layer_BlendMode int32

const (
	Layer_BLEND_MODE_NORMAL        Layer_BlendMode = 0
	Layer_BLEND_MODE_DISSOLVE      Layer_BlendMode = 1
	Layer_BLEND_MODE_DARKEN        Layer_BlendMode = 2
	Layer_BLEND_MODE_MULTIPLY      Layer_BlendMode = 3
	Layer_BLEND_MODE_COLOR_BURN    Layer_BlendMode = 4
	Layer_BLEND_MODE_LINEAR_BURN   Layer_BlendMode = 5
	Layer_BLEND_MODE_DARKER_COLOR  Layer_BlendMode = 6
	Layer_BLEND_MODE_LIGHTEN       Layer_BlendMode = 7
	Layer_BLEND_MODE_SCREEN        Layer_BlendMode = 8
	Layer_BLEND_MODE_COLOR_DODGE   Layer_BlendMode = 9
	Layer_BLEND_MODE_LINEAR_DODGE  Layer_BlendMode = 10
	Layer_BLEND_MODE_LIGHTER_COLOR Layer_BlendMode = 11
	Layer_BLEND_MODE_OVERLAY       Layer_BlendMode = 12
	Layer_BLEND_MODE_SOFT_LIGHT    Layer_BlendMode = 13
	Layer_BLEND_MODE_HARD_LIGHT    Layer_BlendMode = 14
	Layer_BLEND_MODE_VIVID_LIGHT   Layer_BlendMode = 15
	Layer_BLEND_MODE_LINEAR_LIGHT  Layer_BlendMode = 16
	Layer_BLEND_MODE_PIN_LIGHT     Layer_BlendMode = 17
	Layer_BLEND_MODE_HARD_MIX      Layer_BlendMode = 18
	Layer_BLEND_MODE_DIFFERENCE    Layer_BlendMode = 19
	Layer_BLEND_MODE_EXCLUSION     Layer_BlendMode = 20
	Layer_BLEND_MODE_SUBTRACT      Layer_BlendMode = 21
	Layer_BLEND_MODE_DIVIDE        Layer_BlendMode = 22
	Layer_BLEND_MODE_HUE           Layer_BlendMode = 23
	Layer_BLEND_MODE_SATURATION    Layer_BlendMode = 24
	Layer_BLEND_MODE_COLOR         Layer_BlendMode = 25
	Layer_BLEND_MODE_LUMINOSITY    Layer_BlendMode = 26
)

// Enum value maps for Layer_BlendMode.
var (
	Layer_BlendMode_name = map[int32]string{
		0:  "BLEND_MODE_NORMAL",
		1:  "BLEND_MODE_DISSOLVE",
		2:  "BLEND_MODE_DARKEN",
		3:  "BLEND_MODE_MULTIPLY",
		4:  "BLEND_MODE_COLOR_BURN",
		5:  "BLEND_MODE_LINEAR_BURN",
		6:  "BLEND_MODE_DARKER_COLOR",
		7:  "BLEND_MODE_LIGHTEN",
		8:  "BLEND_MODE_SCREEN",
		9:  "BLEND_MODE_COLOR_DODGE",
		10: "BLEND_MODE_LINEAR_DODGE",
		11: "BLEND_MODE_LIGHTER_COLOR",
		12: "BLEND_MODE_OVERLAY",
		13: "BLEND_MODE_SOFT_LIGHT",
		14: "BLEND_MODE_HARD_LIGHT",
		15: "BLEND_MODE_VIVID_LIGHT",
		16: "BLEND_MODE_LINEAR_LIGHT",
		17: "BLEND_MODE_PIN_LIGHT",
		18: "BLEND_MODE_HARD_MIX",
		19: "BLEND_MODE_DIFFERENCE",
		20: "BLEND_MODE_EXCLUSION",
		21: "BLEND_MODE_SUBTRACT",
		22: "BLEND_MODE_DIVIDE",
		23: "BLEND_MODE_HUE",
		24: "BLEND_MODE_SATURATION",
		25: "BLEND_MODE_COLOR",
		26: "BLEND_MODE_LUMINOSITY",
	}
	Layer_BlendMode_value = map[string]int32{
		"BLEND_MODE_NORMAL":        0,
		"BLEND_MODE_DISSOLVE":      1,
		"BLEND_MODE_DARKEN":        2,
		"BLEND_MODE_MULTIPLY":      3,
		"BLEND_MODE_COLOR_BURN":    4,
		"BLEND_MODE_LINEAR_BURN":   5,
		"BLEND_MODE_DARKER_COLOR":  6,
		"BLEND_MODE_LIGHTEN":       7,
		"BLEND_MODE_SCREEN":        8,
		"BLEND_MODE_COLOR_DODGE":   9,
		"BLEND_MODE_LINEAR_DODGE":  10,
		"BLEND_MODE_LIGHTER_COLOR": 11,
		"BLEND_MODE_OVERLAY":       12,
		"BLEND_MODE_SOFT_LIGHT":    13,
		"BLEND_MODE_HARD_LIGHT":    14,
		"BLEND_MODE_VIVID_LIGHT":   15,
		"BLEND_MODE_LINEAR_LIGHT":  16,
		"BLEND_MODE_PIN_LIGHT":     17,
		"BLEND_MODE_HARD_MIX":      18,
		"BLEND_MODE_DIFFERENCE":    19,
		"BLEND_MODE_EXCLUSION":     20,
		"BLEND_MODE_SUBTRACT":      21,
		"BLEND_MODE_DIVIDE":        22,
		"BLEND_MODE_HUE":           23,
		"BLEND_MODE_SATURATION":    24,
		"BLEND_MODE_COLOR":         25,
		"BLEND_MODE_LUMINOSITY":    26,
	}
)

func (x Layer_BlendMode) Enum() *Layer_BlendMode {
	p := new(Layer_BlendMode)
	*p = x
	return p
}

func (x Layer_BlendMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Layer_BlendMode) Descriptor() protoreflect.EnumDescriptor {
	return file_layers_proto_enumTypes[0].Descriptor()
}

func (Layer_BlendMode) Type() protoreflect.EnumType {
	return &file_layers_proto_enumTypes[0]
}

func (x Layer_BlendMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Layer_BlendMode.Descriptor instead.
func (Layer_BlendMode) EnumDescriptor() ([]byte, []int) {
	return file_layers_proto_rawDescGZIP(), []int{0, 0}
}

type Layer_Blending_Standard_BlendMode int32

const (
	Layer_Blending_Standard_BLEND_MODE_NORMAL        Layer_Blending_Standard_BlendMode = 0
	Layer_Blending_Standard_BLEND_MODE_DISSOLVE      Layer_Blending_Standard_BlendMode = 1
	Layer_Blending_Standard_BLEND_MODE_DARKEN        Layer_Blending_Standard_BlendMode = 2
	Layer_Blending_Standard_BLEND_MODE_MULTIPLY      Layer_Blending_Standard_BlendMode = 3
	Layer_Blending_Standard_BLEND_MODE_COLOR_BURN    Layer_Blending_Standard_BlendMode = 4
	Layer_Blending_Standard_BLEND_MODE_LINEAR_BURN   Layer_Blending_Standard_BlendMode = 5
	Layer_Blending_Standard_BLEND_MODE_DARKER_COLOR  Layer_Blending_Standard_BlendMode = 6
	Layer_Blending_Standard_BLEND_MODE_LIGHTEN       Layer_Blending_Standard_BlendMode = 7
	Layer_Blending_Standard_BLEND_MODE_SCREEN        Layer_Blending_Standard_BlendMode = 8
	Layer_Blending_Standard_BLEND_MODE_COLOR_DODGE   Layer_Blending_Standard_BlendMode = 9
	Layer_Blending_Standard_BLEND_MODE_LINEAR_DODGE  Layer_Blending_Standard_BlendMode = 10
	Layer_Blending_Standard_BLEND_MODE_LIGHTER_COLOR Layer_Blending_Standard_BlendMode = 11
	Layer_Blending_Standard_BLEND_MODE_OVERLAY       Layer_Blending_Standard_BlendMode = 12
	Layer_Blending_Standard_BLEND_MODE_SOFT_LIGHT    Layer_Blending_Standard_BlendMode = 13
	Layer_Blending_Standard_BLEND_MODE_HARD_LIGHT    Layer_Blending_Standard_BlendMode = 14
	Layer_Blending_Standard_BLEND_MODE_VIVID_LIGHT   Layer_Blending_Standard_BlendMode = 15
	Layer_Blending_Standard_BLEND_MODE_LINEAR_LIGHT  Layer_Blending_Standard_BlendMode = 16
	Layer_Blending_Standard_BLEND_MODE_PIN_LIGHT     Layer_Blending_Standard_BlendMode = 17
	Layer_Blending_Standard_BLEND_MODE_HARD_MIX      Layer_Blending_Standard_BlendMode = 18
	Layer_Blending_Standard_BLEND_MODE_DIFFERENCE    Layer_Blending_Standard_BlendMode = 19
	Layer_Blending_Standard_BLEND_MODE_EXCLUSION     Layer_Blending_Standard_BlendMode = 20
	Layer_Blending_Standard_BLEND_MODE_SUBTRACT      Layer_Blending_Standard_BlendMode = 21
	Layer_Blending_Standard_BLEND_MODE_DIVIDE        Layer_Blending_Standard_BlendMode = 22
	Layer_Blending_Standard_BLEND_MODE_HUE           Layer_Blending_Standard_BlendMode = 23
	Layer_Blending_Standard_BLEND_MODE_SATURATION    Layer_Blending_Standard_BlendMode = 24
	Layer_Blending_Standard_BLEND_MODE_COLOR         Layer_Blending_Standard_BlendMode = 25
	Layer_Blending_Standard_BLEND_MODE_LUMINOSITY    Layer_Blending_Standard_BlendMode = 26
)

// Enum value maps for Layer_Blending_Standard_BlendMode.
var (
	Layer_Blending_Standard_BlendMode_name = map[int32]string{
		0:  "BLEND_MODE_NORMAL",
		1:  "BLEND_MODE_DISSOLVE",
		2:  "BLEND_MODE_DARKEN",
		3:  "BLEND_MODE_MULTIPLY",
		4:  "BLEND_MODE_COLOR_BURN",
		5:  "BLEND_MODE_LINEAR_BURN",
		6:  "BLEND_MODE_DARKER_COLOR",
		7:  "BLEND_MODE_LIGHTEN",
		8:  "BLEND_MODE_SCREEN",
		9:  "BLEND_MODE_COLOR_DODGE",
		10: "BLEND_MODE_LINEAR_DODGE",
		11: "BLEND_MODE_LIGHTER_COLOR",
		12: "BLEND_MODE_OVERLAY",
		13: "BLEND_MODE_SOFT_LIGHT",
		14: "BLEND_MODE_HARD_LIGHT",
		15: "BLEND_MODE_VIVID_LIGHT",
		16: "BLEND_MODE_LINEAR_LIGHT",
		17: "BLEND_MODE_PIN_LIGHT",
		18: "BLEND_MODE_HARD_MIX",
		19: "BLEND_MODE_DIFFERENCE",
		20: "BLEND_MODE_EXCLUSION",
		21: "BLEND_MODE_SUBTRACT",
		22: "BLEND_MODE_DIVIDE",
		23: "BLEND_MODE_HUE",
		24: "BLEND_MODE_SATURATION",
		25: "BLEND_MODE_COLOR",
		26: "BLEND_MODE_LUMINOSITY",
	}
	Layer_Blending_Standard_BlendMode_value = map[string]int32{
		"BLEND_MODE_NORMAL":        0,
		"BLEND_MODE_DISSOLVE":      1,
		"BLEND_MODE_DARKEN":        2,
		"BLEND_MODE_MULTIPLY":      3,
		"BLEND_MODE_COLOR_BURN":    4,
		"BLEND_MODE_LINEAR_BURN":   5,
		"BLEND_MODE_DARKER_COLOR":  6,
		"BLEND_MODE_LIGHTEN":       7,
		"BLEND_MODE_SCREEN":        8,
		"BLEND_MODE_COLOR_DODGE":   9,
		"BLEND_MODE_LINEAR_DODGE":  10,
		"BLEND_MODE_LIGHTER_COLOR": 11,
		"BLEND_MODE_OVERLAY":       12,
		"BLEND_MODE_SOFT_LIGHT":    13,
		"BLEND_MODE_HARD_LIGHT":    14,
		"BLEND_MODE_VIVID_LIGHT":   15,
		"BLEND_MODE_LINEAR_LIGHT":  16,
		"BLEND_MODE_PIN_LIGHT":     17,
		"BLEND_MODE_HARD_MIX":      18,
		"BLEND_MODE_DIFFERENCE":    19,
		"BLEND_MODE_EXCLUSION":     20,
		"BLEND_MODE_SUBTRACT":      21,
		"BLEND_MODE_DIVIDE":        22,
		"BLEND_MODE_HUE":           23,
		"BLEND_MODE_SATURATION":    24,
		"BLEND_MODE_COLOR":         25,
		"BLEND_MODE_LUMINOSITY":    26,
	}
)

func (x Layer_Blending_Standard_BlendMode) Enum() *Layer_Blending_Standard_BlendMode {
	p := new(Layer_Blending_Standard_BlendMode)
	*p = x
	return p
}

func (x Layer_Blending_Standard_BlendMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Layer_Blending_Standard_BlendMode) Descriptor() protoreflect.EnumDescriptor {
	return file_layers_proto_enumTypes[1].Descriptor()
}

func (Layer_Blending_Standard_BlendMode) Type() protoreflect.EnumType {
	return &file_layers_proto_enumTypes[1]
}

func (x Layer_Blending_Standard_BlendMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Layer_Blending_Standard_BlendMode.Descriptor instead.
func (Layer_Blending_Standard_BlendMode) EnumDescriptor() ([]byte, []int) {
	return file_layers_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Layer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                  *UUID           `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                  string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color                 *Color          `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Muted                 bool            `protobuf:"varint,4,opt,name=muted,proto3" json:"muted,omitempty"`
	Hidden                bool            `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	BlendMode             Layer_BlendMode `protobuf:"varint,6,opt,name=blend_mode,json=blendMode,proto3,enum=rv.data.Layer_BlendMode" json:"blend_mode,omitempty"`
	Opacity               float64         `protobuf:"fixed64,7,opt,name=opacity,proto3" json:"opacity,omitempty"`
	SelectedTargetSetUuid *UUID           `protobuf:"bytes,8,opt,name=selected_target_set_uuid,json=selectedTargetSetUuid,proto3" json:"selected_target_set_uuid,omitempty"`
	EffectsPresetUuid     *UUID           `protobuf:"bytes,9,opt,name=effects_preset_uuid,json=effectsPresetUuid,proto3" json:"effects_preset_uuid,omitempty"`
	EffectsBuildDuration  float64         `protobuf:"fixed64,10,opt,name=effects_build_duration,json=effectsBuildDuration,proto3" json:"effects_build_duration,omitempty"`
	LayerPresetUuid       *UUID           `protobuf:"bytes,11,opt,name=layer_preset_uuid,json=layerPresetUuid,proto3" json:"layer_preset_uuid,omitempty"`
	HotKey                *HotKey         `protobuf:"bytes,12,opt,name=hot_key,json=hotKey,proto3" json:"hot_key,omitempty"`
	Transition            *Transition     `protobuf:"bytes,13,opt,name=transition,proto3" json:"transition,omitempty"`
	Effects               []*Effect       `protobuf:"bytes,14,rep,name=effects,proto3" json:"effects,omitempty"`
	Blend                 *Layer_Blending `protobuf:"bytes,15,opt,name=blend,proto3" json:"blend,omitempty"`
}

func (x *Layer) Reset() {
	*x = Layer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer) ProtoMessage() {}

func (x *Layer) ProtoReflect() protoreflect.Message {
	mi := &file_layers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer.ProtoReflect.Descriptor instead.
func (*Layer) Descriptor() ([]byte, []int) {
	return file_layers_proto_rawDescGZIP(), []int{0}
}

func (x *Layer) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Layer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Layer) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Layer) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *Layer) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Layer) GetBlendMode() Layer_BlendMode {
	if x != nil {
		return x.BlendMode
	}
	return Layer_BLEND_MODE_NORMAL
}

func (x *Layer) GetOpacity() float64 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *Layer) GetSelectedTargetSetUuid() *UUID {
	if x != nil {
		return x.SelectedTargetSetUuid
	}
	return nil
}

func (x *Layer) GetEffectsPresetUuid() *UUID {
	if x != nil {
		return x.EffectsPresetUuid
	}
	return nil
}

func (x *Layer) GetEffectsBuildDuration() float64 {
	if x != nil {
		return x.EffectsBuildDuration
	}
	return 0
}

func (x *Layer) GetLayerPresetUuid() *UUID {
	if x != nil {
		return x.LayerPresetUuid
	}
	return nil
}

func (x *Layer) GetHotKey() *HotKey {
	if x != nil {
		return x.HotKey
	}
	return nil
}

func (x *Layer) GetTransition() *Transition {
	if x != nil {
		return x.Transition
	}
	return nil
}

func (x *Layer) GetEffects() []*Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *Layer) GetBlend() *Layer_Blending {
	if x != nil {
		return x.Blend
	}
	return nil
}

type Layer_Preset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  *UUID  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Layer *Layer `protobuf:"bytes,3,opt,name=layer,proto3" json:"layer,omitempty"`
}

func (x *Layer_Preset) Reset() {
	*x = Layer_Preset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer_Preset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer_Preset) ProtoMessage() {}

func (x *Layer_Preset) ProtoReflect() protoreflect.Message {
	mi := &file_layers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer_Preset.ProtoReflect.Descriptor instead.
func (*Layer_Preset) Descriptor() ([]byte, []int) {
	return file_layers_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Layer_Preset) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Layer_Preset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Layer_Preset) GetLayer() *Layer {
	if x != nil {
		return x.Layer
	}
	return nil
}

type Layer_Blending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BlendingType:
	//	*Layer_Blending_Standard_
	//	*Layer_Blending_Matte_
	BlendingType isLayer_Blending_BlendingType `protobuf_oneof:"BlendingType"`
}

func (x *Layer_Blending) Reset() {
	*x = Layer_Blending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer_Blending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer_Blending) ProtoMessage() {}

func (x *Layer_Blending) ProtoReflect() protoreflect.Message {
	mi := &file_layers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer_Blending.ProtoReflect.Descriptor instead.
func (*Layer_Blending) Descriptor() ([]byte, []int) {
	return file_layers_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Layer_Blending) GetBlendingType() isLayer_Blending_BlendingType {
	if m != nil {
		return m.BlendingType
	}
	return nil
}

func (x *Layer_Blending) GetStandard() *Layer_Blending_Standard {
	if x, ok := x.GetBlendingType().(*Layer_Blending_Standard_); ok {
		return x.Standard
	}
	return nil
}

func (x *Layer_Blending) GetMatte() *Layer_Blending_Matte {
	if x, ok := x.GetBlendingType().(*Layer_Blending_Matte_); ok {
		return x.Matte
	}
	return nil
}

type isLayer_Blending_BlendingType interface {
	isLayer_Blending_BlendingType()
}

type Layer_Blending_Standard_ struct {
	Standard *Layer_Blending_Standard `protobuf:"bytes,1,opt,name=standard,proto3,oneof"`
}

type Layer_Blending_Matte_ struct {
	Matte *Layer_Blending_Matte `protobuf:"bytes,2,opt,name=matte,proto3,oneof"`
}

func (*Layer_Blending_Standard_) isLayer_Blending_BlendingType() {}

func (*Layer_Blending_Matte_) isLayer_Blending_BlendingType() {}

type Layer_Blending_Standard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    Layer_Blending_Standard_BlendMode `protobuf:"varint,1,opt,name=mode,proto3,enum=rv.data.Layer_Blending_Standard_BlendMode" json:"mode,omitempty"`
	Opacity float64                           `protobuf:"fixed64,2,opt,name=opacity,proto3" json:"opacity,omitempty"`
}

func (x *Layer_Blending_Standard) Reset() {
	*x = Layer_Blending_Standard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer_Blending_Standard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer_Blending_Standard) ProtoMessage() {}

func (x *Layer_Blending_Standard) ProtoReflect() protoreflect.Message {
	mi := &file_layers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer_Blending_Standard.ProtoReflect.Descriptor instead.
func (*Layer_Blending_Standard) Descriptor() ([]byte, []int) {
	return file_layers_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Layer_Blending_Standard) GetMode() Layer_Blending_Standard_BlendMode {
	if x != nil {
		return x.Mode
	}
	return Layer_Blending_Standard_BLEND_MODE_NORMAL
}

func (x *Layer_Blending_Standard) GetOpacity() float64 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

type Layer_Blending_Matte struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MatteType:
	//	*Layer_Blending_Matte_Alpha_
	//	*Layer_Blending_Matte_Luma_
	//	*Layer_Blending_Matte_White_
	MatteType isLayer_Blending_Matte_MatteType `protobuf_oneof:"MatteType"`
}

func (x *Layer_Blending_Matte) Reset() {
	*x = Layer_Blending_Matte{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer_Blending_Matte) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer_Blending_Matte) ProtoMessage() {}

func (x *Layer_Blending_Matte) ProtoReflect() protoreflect.Message {
	mi := &file_layers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer_Blending_Matte.ProtoReflect.Descriptor instead.
func (*Layer_Blending_Matte) Descriptor() ([]byte, []int) {
	return file_layers_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *Layer_Blending_Matte) GetMatteType() isLayer_Blending_Matte_MatteType {
	if m != nil {
		return m.MatteType
	}
	return nil
}

func (x *Layer_Blending_Matte) GetAlpha() *Layer_Blending_Matte_Alpha {
	if x, ok := x.GetMatteType().(*Layer_Blending_Matte_Alpha_); ok {
		return x.Alpha
	}
	return nil
}

func (x *Layer_Blending_Matte) GetLuma() *Layer_Blending_Matte_Luma {
	if x, ok := x.GetMatteType().(*Layer_Blending_Matte_Luma_); ok {
		return x.Luma
	}
	return nil
}

func (x *Layer_Blending_Matte) GetWhite() *Layer_Blending_Matte_White {
	if x, ok := x.GetMatteType().(*Layer_Blending_Matte_White_); ok {
		return x.White
	}
	return nil
}

type isLayer_Blending_Matte_MatteType interface {
	isLayer_Blending_Matte_MatteType()
}

type Layer_Blending_Matte_Alpha_ struct {
	Alpha *Layer_Blending_Matte_Alpha `protobuf:"bytes,1,opt,name=alpha,proto3,oneof"`
}

type Layer_Blending_Matte_Luma_ struct {
	Luma *Layer_Blending_Matte_Luma `protobuf:"bytes,2,opt,name=luma,proto3,oneof"`
}

type Layer_Blending_Matte_White_ struct {
	White *Layer_Blending_Matte_White `protobuf:"bytes,4,opt,name=white,proto3,oneof"`
}

func (*Layer_Blending_Matte_Alpha_) isLayer_Blending_Matte_MatteType() {}

func (*Layer_Blending_Matte_Luma_) isLayer_Blending_Matte_MatteType() {}

func (*Layer_Blending_Matte_White_) isLayer_Blending_Matte_MatteType() {}

type Layer_Blending_Matte_Alpha struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inverted bool `protobuf:"varint,1,opt,name=inverted,proto3" json:"inverted,omitempty"`
}

func (x *Layer_Blending_Matte_Alpha) Reset() {
	*x = Layer_Blending_Matte_Alpha{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer_Blending_Matte_Alpha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer_Blending_Matte_Alpha) ProtoMessage() {}

func (x *Layer_Blending_Matte_Alpha) ProtoReflect() protoreflect.Message {
	mi := &file_layers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer_Blending_Matte_Alpha.ProtoReflect.Descriptor instead.
func (*Layer_Blending_Matte_Alpha) Descriptor() ([]byte, []int) {
	return file_layers_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (x *Layer_Blending_Matte_Alpha) GetInverted() bool {
	if x != nil {
		return x.Inverted
	}
	return false
}

type Layer_Blending_Matte_Luma struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inverted bool `protobuf:"varint,1,opt,name=inverted,proto3" json:"inverted,omitempty"`
}

func (x *Layer_Blending_Matte_Luma) Reset() {
	*x = Layer_Blending_Matte_Luma{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer_Blending_Matte_Luma) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer_Blending_Matte_Luma) ProtoMessage() {}

func (x *Layer_Blending_Matte_Luma) ProtoReflect() protoreflect.Message {
	mi := &file_layers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer_Blending_Matte_Luma.ProtoReflect.Descriptor instead.
func (*Layer_Blending_Matte_Luma) Descriptor() ([]byte, []int) {
	return file_layers_proto_rawDescGZIP(), []int{0, 1, 1, 1}
}

func (x *Layer_Blending_Matte_Luma) GetInverted() bool {
	if x != nil {
		return x.Inverted
	}
	return false
}

type Layer_Blending_Matte_White struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Layer_Blending_Matte_White) Reset() {
	*x = Layer_Blending_Matte_White{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer_Blending_Matte_White) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer_Blending_Matte_White) ProtoMessage() {}

func (x *Layer_Blending_Matte_White) ProtoReflect() protoreflect.Message {
	mi := &file_layers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer_Blending_Matte_White.ProtoReflect.Descriptor instead.
func (*Layer_Blending_Matte_White) Descriptor() ([]byte, []int) {
	return file_layers_proto_rawDescGZIP(), []int{0, 1, 1, 2}
}

var File_layers_proto protoreflect.FileDescriptor

var file_layers_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x68, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x15, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x62,
	0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x65, 0x6e, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x15, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x11, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x68, 0x6f, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x68, 0x6f, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x33, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x2d, 0x0a, 0x05, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x1a,
	0x65, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0xdc, 0x09, 0x0a, 0x08, 0x42, 0x6c, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x1a, 0xab, 0x06, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x22, 0xc4, 0x05, 0x0a, 0x09, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41,
	0x52, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x59, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4c,
	0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f,
	0x42, 0x55, 0x52, 0x4e, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x42,
	0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x44, 0x47, 0x45, 0x10, 0x09, 0x12, 0x1b,
	0x0a, 0x17, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x41, 0x52, 0x5f, 0x44, 0x4f, 0x44, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x42,
	0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x45,
	0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x10,
	0x0c, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x4f, 0x46, 0x54, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x5f,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4c, 0x45, 0x4e, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x56, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x10,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c,
	0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x49,
	0x58, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x13, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x45, 0x4e,
	0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10,
	0x15, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x45, 0x4e,
	0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x55, 0x45, 0x10, 0x17, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x41, 0x54, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x45, 0x4e, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x19, 0x12, 0x19, 0x0a,
	0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x55, 0x4d, 0x49,
	0x4e, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x10, 0x1a, 0x1a, 0x9a, 0x02, 0x0a, 0x05, 0x4d, 0x61, 0x74,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x74, 0x65,
	0x2e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12,
	0x38, 0x0a, 0x04, 0x6c, 0x75, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x42, 0x6c,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x2e, 0x4c, 0x75, 0x6d,
	0x61, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x75, 0x6d, 0x61, 0x12, 0x3b, 0x0a, 0x05, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x77, 0x68, 0x69, 0x74, 0x65, 0x1a, 0x23, 0x0a, 0x05, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x22, 0x0a, 0x04, 0x4c,
	0x75, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x1a,
	0x07, 0x0a, 0x05, 0x57, 0x68, 0x69, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc4, 0x05, 0x0a, 0x09, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c,
	0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c,
	0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c,
	0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x41, 0x52, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c,
	0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x45, 0x4e, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x4e, 0x10, 0x07, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x43,
	0x52, 0x45, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x44, 0x47, 0x45,
	0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x44, 0x4f, 0x44, 0x47, 0x45, 0x10, 0x0a, 0x12,
	0x1c, 0x0a, 0x18, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x4c, 0x41, 0x59, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0d,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48,
	0x41, 0x52, 0x44, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x42,
	0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x56, 0x49, 0x44, 0x5f,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x45, 0x4e, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x11, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x52,
	0x44, 0x5f, 0x4d, 0x49, 0x58, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13,
	0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x55, 0x45, 0x10, 0x17,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x41, 0x54, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10,
	0x19, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4c, 0x55, 0x4d, 0x49, 0x4e, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x10, 0x1a, 0x42, 0x1c, 0x5a, 0x1a,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_layers_proto_rawDescOnce sync.Once
	file_layers_proto_rawDescData = file_layers_proto_rawDesc
)

func file_layers_proto_rawDescGZIP() []byte {
	file_layers_proto_rawDescOnce.Do(func() {
		file_layers_proto_rawDescData = protoimpl.X.CompressGZIP(file_layers_proto_rawDescData)
	})
	return file_layers_proto_rawDescData
}

var file_layers_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_layers_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_layers_proto_goTypes = []interface{}{
	(Layer_BlendMode)(0),                   // 0: rv.data.Layer.BlendMode
	(Layer_Blending_Standard_BlendMode)(0), // 1: rv.data.Layer.Blending.Standard.BlendMode
	(*Layer)(nil),                          // 2: rv.data.Layer
	(*Layer_Preset)(nil),                   // 3: rv.data.Layer.Preset
	(*Layer_Blending)(nil),                 // 4: rv.data.Layer.Blending
	(*Layer_Blending_Standard)(nil),        // 5: rv.data.Layer.Blending.Standard
	(*Layer_Blending_Matte)(nil),           // 6: rv.data.Layer.Blending.Matte
	(*Layer_Blending_Matte_Alpha)(nil),     // 7: rv.data.Layer.Blending.Matte.Alpha
	(*Layer_Blending_Matte_Luma)(nil),      // 8: rv.data.Layer.Blending.Matte.Luma
	(*Layer_Blending_Matte_White)(nil),     // 9: rv.data.Layer.Blending.Matte.White
	(*UUID)(nil),                           // 10: rv.data.UUID
	(*Color)(nil),                          // 11: rv.data.Color
	(*HotKey)(nil),                         // 12: rv.data.HotKey
	(*Transition)(nil),                     // 13: rv.data.Transition
	(*Effect)(nil),                         // 14: rv.data.Effect
}
var file_layers_proto_depIdxs = []int32{
	10, // 0: rv.data.Layer.uuid:type_name -> rv.data.UUID
	11, // 1: rv.data.Layer.color:type_name -> rv.data.Color
	0,  // 2: rv.data.Layer.blend_mode:type_name -> rv.data.Layer.BlendMode
	10, // 3: rv.data.Layer.selected_target_set_uuid:type_name -> rv.data.UUID
	10, // 4: rv.data.Layer.effects_preset_uuid:type_name -> rv.data.UUID
	10, // 5: rv.data.Layer.layer_preset_uuid:type_name -> rv.data.UUID
	12, // 6: rv.data.Layer.hot_key:type_name -> rv.data.HotKey
	13, // 7: rv.data.Layer.transition:type_name -> rv.data.Transition
	14, // 8: rv.data.Layer.effects:type_name -> rv.data.Effect
	4,  // 9: rv.data.Layer.blend:type_name -> rv.data.Layer.Blending
	10, // 10: rv.data.Layer.Preset.uuid:type_name -> rv.data.UUID
	2,  // 11: rv.data.Layer.Preset.layer:type_name -> rv.data.Layer
	5,  // 12: rv.data.Layer.Blending.standard:type_name -> rv.data.Layer.Blending.Standard
	6,  // 13: rv.data.Layer.Blending.matte:type_name -> rv.data.Layer.Blending.Matte
	1,  // 14: rv.data.Layer.Blending.Standard.mode:type_name -> rv.data.Layer.Blending.Standard.BlendMode
	7,  // 15: rv.data.Layer.Blending.Matte.alpha:type_name -> rv.data.Layer.Blending.Matte.Alpha
	8,  // 16: rv.data.Layer.Blending.Matte.luma:type_name -> rv.data.Layer.Blending.Matte.Luma
	9,  // 17: rv.data.Layer.Blending.Matte.white:type_name -> rv.data.Layer.Blending.Matte.White
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_layers_proto_init() }
func file_layers_proto_init() {
	if File_layers_proto != nil {
		return
	}
	file_hotKey_proto_init()
	file_effects_proto_init()
	file_basicTypes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_layers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer_Preset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer_Blending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer_Blending_Standard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer_Blending_Matte); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer_Blending_Matte_Alpha); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer_Blending_Matte_Luma); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer_Blending_Matte_White); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_layers_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Layer_Blending_Standard_)(nil),
		(*Layer_Blending_Matte_)(nil),
	}
	file_layers_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Layer_Blending_Matte_Alpha_)(nil),
		(*Layer_Blending_Matte_Luma_)(nil),
		(*Layer_Blending_Matte_White_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_layers_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_layers_proto_goTypes,
		DependencyIndexes: file_layers_proto_depIdxs,
		EnumInfos:         file_layers_proto_enumTypes,
		MessageInfos:      file_layers_proto_msgTypes,
	}.Build()
	File_layers_proto = out.File
	file_layers_proto_rawDesc = nil
	file_layers_proto_goTypes = nil
	file_layers_proto_depIdxs = nil
}
