// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: digitalAudio.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DigitalAudio_Device_Format_Type int32

const (
	DigitalAudio_Device_Format_TYPE_INT   DigitalAudio_Device_Format_Type = 0
	DigitalAudio_Device_Format_TYPE_FLOAT DigitalAudio_Device_Format_Type = 1
)

// Enum value maps for DigitalAudio_Device_Format_Type.
var (
	DigitalAudio_Device_Format_Type_name = map[int32]string{
		0: "TYPE_INT",
		1: "TYPE_FLOAT",
	}
	DigitalAudio_Device_Format_Type_value = map[string]int32{
		"TYPE_INT":   0,
		"TYPE_FLOAT": 1,
	}
)

func (x DigitalAudio_Device_Format_Type) Enum() *DigitalAudio_Device_Format_Type {
	p := new(DigitalAudio_Device_Format_Type)
	*p = x
	return p
}

func (x DigitalAudio_Device_Format_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitalAudio_Device_Format_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_digitalAudio_proto_enumTypes[0].Descriptor()
}

func (DigitalAudio_Device_Format_Type) Type() protoreflect.EnumType {
	return &file_digitalAudio_proto_enumTypes[0]
}

func (x DigitalAudio_Device_Format_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitalAudio_Device_Format_Type.Descriptor instead.
func (DigitalAudio_Device_Format_Type) EnumDescriptor() ([]byte, []int) {
	return file_digitalAudio_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

type DigitalAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DigitalAudio) Reset() {
	*x = DigitalAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digitalAudio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalAudio) ProtoMessage() {}

func (x *DigitalAudio) ProtoReflect() protoreflect.Message {
	mi := &file_digitalAudio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalAudio.ProtoReflect.Descriptor instead.
func (*DigitalAudio) Descriptor() ([]byte, []int) {
	return file_digitalAudio_proto_rawDescGZIP(), []int{0}
}

type DigitalAudio_Setup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buses                   []*DigitalAudio_Bus  `protobuf:"bytes,1,rep,name=buses,proto3" json:"buses,omitempty"`
	MonitorDevice           *DigitalAudio_Device `protobuf:"bytes,2,opt,name=monitor_device,json=monitorDevice,proto3" json:"monitor_device,omitempty"`
	MainOutputDevice        *DigitalAudio_Device `protobuf:"bytes,3,opt,name=main_output_device,json=mainOutputDevice,proto3" json:"main_output_device,omitempty"`
	EnableSdiNdiDevice      bool                 `protobuf:"varint,4,opt,name=enable_sdi_ndi_device,json=enableSdiNdiDevice,proto3" json:"enable_sdi_ndi_device,omitempty"`
	SdiNdiDevice            *DigitalAudio_Device `protobuf:"bytes,5,opt,name=sdi_ndi_device,json=sdiNdiDevice,proto3" json:"sdi_ndi_device,omitempty"`
	MonitorOnMains          bool                 `protobuf:"varint,6,opt,name=monitor_on_mains,json=monitorOnMains,proto3" json:"monitor_on_mains,omitempty"`
	DisableMainOutputDevice bool                 `protobuf:"varint,7,opt,name=disable_main_output_device,json=disableMainOutputDevice,proto3" json:"disable_main_output_device,omitempty"`
}

func (x *DigitalAudio_Setup) Reset() {
	*x = DigitalAudio_Setup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digitalAudio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalAudio_Setup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalAudio_Setup) ProtoMessage() {}

func (x *DigitalAudio_Setup) ProtoReflect() protoreflect.Message {
	mi := &file_digitalAudio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalAudio_Setup.ProtoReflect.Descriptor instead.
func (*DigitalAudio_Setup) Descriptor() ([]byte, []int) {
	return file_digitalAudio_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DigitalAudio_Setup) GetBuses() []*DigitalAudio_Bus {
	if x != nil {
		return x.Buses
	}
	return nil
}

func (x *DigitalAudio_Setup) GetMonitorDevice() *DigitalAudio_Device {
	if x != nil {
		return x.MonitorDevice
	}
	return nil
}

func (x *DigitalAudio_Setup) GetMainOutputDevice() *DigitalAudio_Device {
	if x != nil {
		return x.MainOutputDevice
	}
	return nil
}

func (x *DigitalAudio_Setup) GetEnableSdiNdiDevice() bool {
	if x != nil {
		return x.EnableSdiNdiDevice
	}
	return false
}

func (x *DigitalAudio_Setup) GetSdiNdiDevice() *DigitalAudio_Device {
	if x != nil {
		return x.SdiNdiDevice
	}
	return nil
}

func (x *DigitalAudio_Setup) GetMonitorOnMains() bool {
	if x != nil {
		return x.MonitorOnMains
	}
	return false
}

func (x *DigitalAudio_Setup) GetDisableMainOutputDevice() bool {
	if x != nil {
		return x.DisableMainOutputDevice
	}
	return false
}

type DigitalAudio_Bus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Muted       bool    `protobuf:"varint,2,opt,name=muted,proto3" json:"muted,omitempty"`
	Solo        bool    `protobuf:"varint,3,opt,name=solo,proto3" json:"solo,omitempty"`
	TestTone    bool    `protobuf:"varint,4,opt,name=test_tone,json=testTone,proto3" json:"test_tone,omitempty"`
	MasterLevel float64 `protobuf:"fixed64,5,opt,name=master_level,json=masterLevel,proto3" json:"master_level,omitempty"`
}

func (x *DigitalAudio_Bus) Reset() {
	*x = DigitalAudio_Bus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digitalAudio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalAudio_Bus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalAudio_Bus) ProtoMessage() {}

func (x *DigitalAudio_Bus) ProtoReflect() protoreflect.Message {
	mi := &file_digitalAudio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalAudio_Bus.ProtoReflect.Descriptor instead.
func (*DigitalAudio_Bus) Descriptor() ([]byte, []int) {
	return file_digitalAudio_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DigitalAudio_Bus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DigitalAudio_Bus) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *DigitalAudio_Bus) GetSolo() bool {
	if x != nil {
		return x.Solo
	}
	return false
}

func (x *DigitalAudio_Bus) GetTestTone() bool {
	if x != nil {
		return x.TestTone
	}
	return false
}

func (x *DigitalAudio_Bus) GetMasterLevel() float64 {
	if x != nil {
		return x.MasterLevel
	}
	return 0
}

type DigitalAudio_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RenderID string                        `protobuf:"bytes,2,opt,name=renderID,proto3" json:"renderID,omitempty"`
	Formats  []*DigitalAudio_Device_Format `protobuf:"bytes,3,rep,name=formats,proto3" json:"formats,omitempty"`
	Routing  *DigitalAudio_Device_Routing  `protobuf:"bytes,4,opt,name=routing,proto3" json:"routing,omitempty"`
}

func (x *DigitalAudio_Device) Reset() {
	*x = DigitalAudio_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digitalAudio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalAudio_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalAudio_Device) ProtoMessage() {}

func (x *DigitalAudio_Device) ProtoReflect() protoreflect.Message {
	mi := &file_digitalAudio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalAudio_Device.ProtoReflect.Descriptor instead.
func (*DigitalAudio_Device) Descriptor() ([]byte, []int) {
	return file_digitalAudio_proto_rawDescGZIP(), []int{0, 2}
}

func (x *DigitalAudio_Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DigitalAudio_Device) GetRenderID() string {
	if x != nil {
		return x.RenderID
	}
	return ""
}

func (x *DigitalAudio_Device) GetFormats() []*DigitalAudio_Device_Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *DigitalAudio_Device) GetRouting() *DigitalAudio_Device_Routing {
	if x != nil {
		return x.Routing
	}
	return nil
}

type DigitalAudio_Device_Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleRate uint32                          `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	BitDepth   uint32                          `protobuf:"varint,2,opt,name=bit_depth,json=bitDepth,proto3" json:"bit_depth,omitempty"`
	Type       DigitalAudio_Device_Format_Type `protobuf:"varint,3,opt,name=type,proto3,enum=rv.data.DigitalAudio_Device_Format_Type" json:"type,omitempty"`
}

func (x *DigitalAudio_Device_Format) Reset() {
	*x = DigitalAudio_Device_Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digitalAudio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalAudio_Device_Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalAudio_Device_Format) ProtoMessage() {}

func (x *DigitalAudio_Device_Format) ProtoReflect() protoreflect.Message {
	mi := &file_digitalAudio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalAudio_Device_Format.ProtoReflect.Descriptor instead.
func (*DigitalAudio_Device_Format) Descriptor() ([]byte, []int) {
	return file_digitalAudio_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *DigitalAudio_Device_Format) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *DigitalAudio_Device_Format) GetBitDepth() uint32 {
	if x != nil {
		return x.BitDepth
	}
	return 0
}

func (x *DigitalAudio_Device_Format) GetType() DigitalAudio_Device_Format_Type {
	if x != nil {
		return x.Type
	}
	return DigitalAudio_Device_Format_TYPE_INT
}

type DigitalAudio_Device_Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIndex  uint32   `protobuf:"varint,1,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
	MappedIndices []uint32 `protobuf:"varint,2,rep,packed,name=mapped_indices,json=mappedIndices,proto3" json:"mapped_indices,omitempty"`
}

func (x *DigitalAudio_Device_Map) Reset() {
	*x = DigitalAudio_Device_Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digitalAudio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalAudio_Device_Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalAudio_Device_Map) ProtoMessage() {}

func (x *DigitalAudio_Device_Map) ProtoReflect() protoreflect.Message {
	mi := &file_digitalAudio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalAudio_Device_Map.ProtoReflect.Descriptor instead.
func (*DigitalAudio_Device_Map) Descriptor() ([]byte, []int) {
	return file_digitalAudio_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *DigitalAudio_Device_Map) GetChannelIndex() uint32 {
	if x != nil {
		return x.ChannelIndex
	}
	return 0
}

func (x *DigitalAudio_Device_Map) GetMappedIndices() []uint32 {
	if x != nil {
		return x.MappedIndices
	}
	return nil
}

type DigitalAudio_Device_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MuteEnable bool    `protobuf:"varint,1,opt,name=mute_enable,json=muteEnable,proto3" json:"mute_enable,omitempty"`
	SoloEnable bool    `protobuf:"varint,2,opt,name=solo_enable,json=soloEnable,proto3" json:"solo_enable,omitempty"`
	ToneEnable bool    `protobuf:"varint,3,opt,name=tone_enable,json=toneEnable,proto3" json:"tone_enable,omitempty"`
	AudioDelay float64 `protobuf:"fixed64,4,opt,name=audio_delay,json=audioDelay,proto3" json:"audio_delay,omitempty"`
	Level      float64 `protobuf:"fixed64,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *DigitalAudio_Device_Channel) Reset() {
	*x = DigitalAudio_Device_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digitalAudio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalAudio_Device_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalAudio_Device_Channel) ProtoMessage() {}

func (x *DigitalAudio_Device_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_digitalAudio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalAudio_Device_Channel.ProtoReflect.Descriptor instead.
func (*DigitalAudio_Device_Channel) Descriptor() ([]byte, []int) {
	return file_digitalAudio_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *DigitalAudio_Device_Channel) GetMuteEnable() bool {
	if x != nil {
		return x.MuteEnable
	}
	return false
}

func (x *DigitalAudio_Device_Channel) GetSoloEnable() bool {
	if x != nil {
		return x.SoloEnable
	}
	return false
}

func (x *DigitalAudio_Device_Channel) GetToneEnable() bool {
	if x != nil {
		return x.ToneEnable
	}
	return false
}

func (x *DigitalAudio_Device_Channel) GetAudioDelay() float64 {
	if x != nil {
		return x.AudioDelay
	}
	return 0
}

func (x *DigitalAudio_Device_Channel) GetLevel() float64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type DigitalAudio_Device_Routing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels      []*DigitalAudio_Device_Channel `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	Map           []*DigitalAudio_Device_Map     `protobuf:"bytes,2,rep,name=map,proto3" json:"map,omitempty"`
	IsCustomMap   bool                           `protobuf:"varint,3,opt,name=is_custom_map,json=isCustomMap,proto3" json:"is_custom_map,omitempty"`
	MasterChannel *DigitalAudio_Device_Channel   `protobuf:"bytes,4,opt,name=master_channel,json=masterChannel,proto3" json:"master_channel,omitempty"`
}

func (x *DigitalAudio_Device_Routing) Reset() {
	*x = DigitalAudio_Device_Routing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digitalAudio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalAudio_Device_Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalAudio_Device_Routing) ProtoMessage() {}

func (x *DigitalAudio_Device_Routing) ProtoReflect() protoreflect.Message {
	mi := &file_digitalAudio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalAudio_Device_Routing.ProtoReflect.Descriptor instead.
func (*DigitalAudio_Device_Routing) Descriptor() ([]byte, []int) {
	return file_digitalAudio_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (x *DigitalAudio_Device_Routing) GetChannels() []*DigitalAudio_Device_Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *DigitalAudio_Device_Routing) GetMap() []*DigitalAudio_Device_Map {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *DigitalAudio_Device_Routing) GetIsCustomMap() bool {
	if x != nil {
		return x.IsCustomMap
	}
	return false
}

func (x *DigitalAudio_Device_Routing) GetMasterChannel() *DigitalAudio_Device_Channel {
	if x != nil {
		return x.MasterChannel
	}
	return nil
}

var File_digitalAudio_proto protoreflect.FileDescriptor

var file_digitalAudio_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x0b,
	0x0a, 0x0c, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x1a, 0xa7,
	0x03, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x42,
	0x75, 0x73, 0x52, 0x05, 0x62, 0x75, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a,
	0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x64, 0x69, 0x5f, 0x6e, 0x64, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x64, 0x69, 0x4e, 0x64, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x0e, 0x73, 0x64, 0x69, 0x5f, 0x6e, 0x64, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x64, 0x69, 0x4e, 0x64, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x83, 0x01, 0x0a, 0x03, 0x42, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x6c, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0xd0,
	0x06, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0xaa, 0x01, 0x0a, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x74, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x24, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c,
	0x4f, 0x41, 0x54, 0x10, 0x01, 0x1a, 0x51, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0xa3, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x6f,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6f, 0x6e,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0xf0,
	0x01, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x03,
	0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4d, 0x61, 0x70, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_digitalAudio_proto_rawDescOnce sync.Once
	file_digitalAudio_proto_rawDescData = file_digitalAudio_proto_rawDesc
)

func file_digitalAudio_proto_rawDescGZIP() []byte {
	file_digitalAudio_proto_rawDescOnce.Do(func() {
		file_digitalAudio_proto_rawDescData = protoimpl.X.CompressGZIP(file_digitalAudio_proto_rawDescData)
	})
	return file_digitalAudio_proto_rawDescData
}

var file_digitalAudio_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_digitalAudio_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_digitalAudio_proto_goTypes = []interface{}{
	(DigitalAudio_Device_Format_Type)(0), // 0: rv.data.DigitalAudio.Device.Format.Type
	(*DigitalAudio)(nil),                 // 1: rv.data.DigitalAudio
	(*DigitalAudio_Setup)(nil),           // 2: rv.data.DigitalAudio.Setup
	(*DigitalAudio_Bus)(nil),             // 3: rv.data.DigitalAudio.Bus
	(*DigitalAudio_Device)(nil),          // 4: rv.data.DigitalAudio.Device
	(*DigitalAudio_Device_Format)(nil),   // 5: rv.data.DigitalAudio.Device.Format
	(*DigitalAudio_Device_Map)(nil),      // 6: rv.data.DigitalAudio.Device.Map
	(*DigitalAudio_Device_Channel)(nil),  // 7: rv.data.DigitalAudio.Device.Channel
	(*DigitalAudio_Device_Routing)(nil),  // 8: rv.data.DigitalAudio.Device.Routing
}
var file_digitalAudio_proto_depIdxs = []int32{
	3,  // 0: rv.data.DigitalAudio.Setup.buses:type_name -> rv.data.DigitalAudio.Bus
	4,  // 1: rv.data.DigitalAudio.Setup.monitor_device:type_name -> rv.data.DigitalAudio.Device
	4,  // 2: rv.data.DigitalAudio.Setup.main_output_device:type_name -> rv.data.DigitalAudio.Device
	4,  // 3: rv.data.DigitalAudio.Setup.sdi_ndi_device:type_name -> rv.data.DigitalAudio.Device
	5,  // 4: rv.data.DigitalAudio.Device.formats:type_name -> rv.data.DigitalAudio.Device.Format
	8,  // 5: rv.data.DigitalAudio.Device.routing:type_name -> rv.data.DigitalAudio.Device.Routing
	0,  // 6: rv.data.DigitalAudio.Device.Format.type:type_name -> rv.data.DigitalAudio.Device.Format.Type
	7,  // 7: rv.data.DigitalAudio.Device.Routing.channels:type_name -> rv.data.DigitalAudio.Device.Channel
	6,  // 8: rv.data.DigitalAudio.Device.Routing.map:type_name -> rv.data.DigitalAudio.Device.Map
	7,  // 9: rv.data.DigitalAudio.Device.Routing.master_channel:type_name -> rv.data.DigitalAudio.Device.Channel
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_digitalAudio_proto_init() }
func file_digitalAudio_proto_init() {
	if File_digitalAudio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_digitalAudio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digitalAudio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalAudio_Setup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digitalAudio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalAudio_Bus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digitalAudio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalAudio_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digitalAudio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalAudio_Device_Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digitalAudio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalAudio_Device_Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digitalAudio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalAudio_Device_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digitalAudio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalAudio_Device_Routing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_digitalAudio_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_digitalAudio_proto_goTypes,
		DependencyIndexes: file_digitalAudio_proto_depIdxs,
		EnumInfos:         file_digitalAudio_proto_enumTypes,
		MessageInfos:      file_digitalAudio_proto_msgTypes,
	}.Build()
	File_digitalAudio_proto = out.File
	file_digitalAudio_proto_rawDesc = nil
	file_digitalAudio_proto_goTypes = nil
	file_digitalAudio_proto_depIdxs = nil
}
