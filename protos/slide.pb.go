// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: slide.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Slide_Element_TextRevealType int32

const (
	Slide_Element_TEXT_REVEAL_TYPE_NONE      Slide_Element_TextRevealType = 0
	Slide_Element_TEXT_REVEAL_TYPE_BULLET    Slide_Element_TextRevealType = 1
	Slide_Element_TEXT_REVEAL_TYPE_UNDERLINE Slide_Element_TextRevealType = 2
)

// Enum value maps for Slide_Element_TextRevealType.
var (
	Slide_Element_TextRevealType_name = map[int32]string{
		0: "TEXT_REVEAL_TYPE_NONE",
		1: "TEXT_REVEAL_TYPE_BULLET",
		2: "TEXT_REVEAL_TYPE_UNDERLINE",
	}
	Slide_Element_TextRevealType_value = map[string]int32{
		"TEXT_REVEAL_TYPE_NONE":      0,
		"TEXT_REVEAL_TYPE_BULLET":    1,
		"TEXT_REVEAL_TYPE_UNDERLINE": 2,
	}
)

func (x Slide_Element_TextRevealType) Enum() *Slide_Element_TextRevealType {
	p := new(Slide_Element_TextRevealType)
	*p = x
	return p
}

func (x Slide_Element_TextRevealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_TextRevealType) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[0].Descriptor()
}

func (Slide_Element_TextRevealType) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[0]
}

func (x Slide_Element_TextRevealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_TextRevealType.Descriptor instead.
func (Slide_Element_TextRevealType) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Slide_Element_Build_Start int32

const (
	Slide_Element_Build_START_ON_CLICK       Slide_Element_Build_Start = 0
	Slide_Element_Build_START_WITH_PREVIOUS  Slide_Element_Build_Start = 1
	Slide_Element_Build_START_AFTER_PREVIOUS Slide_Element_Build_Start = 2
	Slide_Element_Build_START_WITH_SLIDE     Slide_Element_Build_Start = 3
)

// Enum value maps for Slide_Element_Build_Start.
var (
	Slide_Element_Build_Start_name = map[int32]string{
		0: "START_ON_CLICK",
		1: "START_WITH_PREVIOUS",
		2: "START_AFTER_PREVIOUS",
		3: "START_WITH_SLIDE",
	}
	Slide_Element_Build_Start_value = map[string]int32{
		"START_ON_CLICK":       0,
		"START_WITH_PREVIOUS":  1,
		"START_AFTER_PREVIOUS": 2,
		"START_WITH_SLIDE":     3,
	}
)

func (x Slide_Element_Build_Start) Enum() *Slide_Element_Build_Start {
	p := new(Slide_Element_Build_Start)
	*p = x
	return p
}

func (x Slide_Element_Build_Start) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_Build_Start) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[1].Descriptor()
}

func (Slide_Element_Build_Start) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[1]
}

func (x Slide_Element_Build_Start) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_Build_Start.Descriptor instead.
func (Slide_Element_Build_Start) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Slide_Element_ChildBuild_Start int32

const (
	Slide_Element_ChildBuild_START_ON_CLICK       Slide_Element_ChildBuild_Start = 0
	Slide_Element_ChildBuild_START_WITH_PREVIOUS  Slide_Element_ChildBuild_Start = 1
	Slide_Element_ChildBuild_START_AFTER_PREVIOUS Slide_Element_ChildBuild_Start = 2
	Slide_Element_ChildBuild_START_WITH_SLIDE     Slide_Element_ChildBuild_Start = 3
)

// Enum value maps for Slide_Element_ChildBuild_Start.
var (
	Slide_Element_ChildBuild_Start_name = map[int32]string{
		0: "START_ON_CLICK",
		1: "START_WITH_PREVIOUS",
		2: "START_AFTER_PREVIOUS",
		3: "START_WITH_SLIDE",
	}
	Slide_Element_ChildBuild_Start_value = map[string]int32{
		"START_ON_CLICK":       0,
		"START_WITH_PREVIOUS":  1,
		"START_AFTER_PREVIOUS": 2,
		"START_WITH_SLIDE":     3,
	}
)

func (x Slide_Element_ChildBuild_Start) Enum() *Slide_Element_ChildBuild_Start {
	p := new(Slide_Element_ChildBuild_Start)
	*p = x
	return p
}

func (x Slide_Element_ChildBuild_Start) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_ChildBuild_Start) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[2].Descriptor()
}

func (Slide_Element_ChildBuild_Start) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[2]
}

func (x Slide_Element_ChildBuild_Start) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_ChildBuild_Start.Descriptor instead.
func (Slide_Element_ChildBuild_Start) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

type Slide_Element_DataLink_RSSFeed_ContentType int32

const (
	Slide_Element_DataLink_RSSFeed_CONTENT_TYPE_TITLE_ONLY            Slide_Element_DataLink_RSSFeed_ContentType = 0
	Slide_Element_DataLink_RSSFeed_CONTENT_TYPE_TITLE_AND_DESCRIPTION Slide_Element_DataLink_RSSFeed_ContentType = 1
)

// Enum value maps for Slide_Element_DataLink_RSSFeed_ContentType.
var (
	Slide_Element_DataLink_RSSFeed_ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_TITLE_ONLY",
		1: "CONTENT_TYPE_TITLE_AND_DESCRIPTION",
	}
	Slide_Element_DataLink_RSSFeed_ContentType_value = map[string]int32{
		"CONTENT_TYPE_TITLE_ONLY":            0,
		"CONTENT_TYPE_TITLE_AND_DESCRIPTION": 1,
	}
)

func (x Slide_Element_DataLink_RSSFeed_ContentType) Enum() *Slide_Element_DataLink_RSSFeed_ContentType {
	p := new(Slide_Element_DataLink_RSSFeed_ContentType)
	*p = x
	return p
}

func (x Slide_Element_DataLink_RSSFeed_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_RSSFeed_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[3].Descriptor()
}

func (Slide_Element_DataLink_RSSFeed_ContentType) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[3]
}

func (x Slide_Element_DataLink_RSSFeed_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_RSSFeed_ContentType.Descriptor instead.
func (Slide_Element_DataLink_RSSFeed_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

type Slide_Element_DataLink_Ticker_RSSType_ContentType int32

const (
	Slide_Element_DataLink_Ticker_RSSType_CONTENT_TYPE_TITLE_ONLY            Slide_Element_DataLink_Ticker_RSSType_ContentType = 0
	Slide_Element_DataLink_Ticker_RSSType_CONTENT_TYPE_TITLE_AND_DESCRIPTION Slide_Element_DataLink_Ticker_RSSType_ContentType = 1
)

// Enum value maps for Slide_Element_DataLink_Ticker_RSSType_ContentType.
var (
	Slide_Element_DataLink_Ticker_RSSType_ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_TITLE_ONLY",
		1: "CONTENT_TYPE_TITLE_AND_DESCRIPTION",
	}
	Slide_Element_DataLink_Ticker_RSSType_ContentType_value = map[string]int32{
		"CONTENT_TYPE_TITLE_ONLY":            0,
		"CONTENT_TYPE_TITLE_AND_DESCRIPTION": 1,
	}
)

func (x Slide_Element_DataLink_Ticker_RSSType_ContentType) Enum() *Slide_Element_DataLink_Ticker_RSSType_ContentType {
	p := new(Slide_Element_DataLink_Ticker_RSSType_ContentType)
	*p = x
	return p
}

func (x Slide_Element_DataLink_Ticker_RSSType_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_Ticker_RSSType_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[4].Descriptor()
}

func (Slide_Element_DataLink_Ticker_RSSType_ContentType) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[4]
}

func (x Slide_Element_DataLink_Ticker_RSSType_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_Ticker_RSSType_ContentType.Descriptor instead.
func (Slide_Element_DataLink_Ticker_RSSType_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 2, 1, 0}
}

type Slide_Element_DataLink_AlternateElementText_TextTransformOption int32

const (
	Slide_Element_DataLink_AlternateElementText_TEXT_TRANSFORM_OPTION_NONE                   Slide_Element_DataLink_AlternateElementText_TextTransformOption = 0
	Slide_Element_DataLink_AlternateElementText_TEXT_TRANSFORM_OPTION_REMOVE_LINE_RETURNS    Slide_Element_DataLink_AlternateElementText_TextTransformOption = 1
	Slide_Element_DataLink_AlternateElementText_TEXT_TRANSFORM_OPTION_ONE_WORD_PER_LINE      Slide_Element_DataLink_AlternateElementText_TextTransformOption = 2
	Slide_Element_DataLink_AlternateElementText_TEXT_TRANSFORM_OPTION_ONE_CHARACTER_PER_LINE Slide_Element_DataLink_AlternateElementText_TextTransformOption = 3
)

// Enum value maps for Slide_Element_DataLink_AlternateElementText_TextTransformOption.
var (
	Slide_Element_DataLink_AlternateElementText_TextTransformOption_name = map[int32]string{
		0: "TEXT_TRANSFORM_OPTION_NONE",
		1: "TEXT_TRANSFORM_OPTION_REMOVE_LINE_RETURNS",
		2: "TEXT_TRANSFORM_OPTION_ONE_WORD_PER_LINE",
		3: "TEXT_TRANSFORM_OPTION_ONE_CHARACTER_PER_LINE",
	}
	Slide_Element_DataLink_AlternateElementText_TextTransformOption_value = map[string]int32{
		"TEXT_TRANSFORM_OPTION_NONE":                   0,
		"TEXT_TRANSFORM_OPTION_REMOVE_LINE_RETURNS":    1,
		"TEXT_TRANSFORM_OPTION_ONE_WORD_PER_LINE":      2,
		"TEXT_TRANSFORM_OPTION_ONE_CHARACTER_PER_LINE": 3,
	}
)

func (x Slide_Element_DataLink_AlternateElementText_TextTransformOption) Enum() *Slide_Element_DataLink_AlternateElementText_TextTransformOption {
	p := new(Slide_Element_DataLink_AlternateElementText_TextTransformOption)
	*p = x
	return p
}

func (x Slide_Element_DataLink_AlternateElementText_TextTransformOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_AlternateElementText_TextTransformOption) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[5].Descriptor()
}

func (Slide_Element_DataLink_AlternateElementText_TextTransformOption) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[5]
}

func (x Slide_Element_DataLink_AlternateElementText_TextTransformOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_AlternateElementText_TextTransformOption.Descriptor instead.
func (Slide_Element_DataLink_AlternateElementText_TextTransformOption) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 3, 0}
}

type Slide_Element_DataLink_PCOLive_Theme int32

const (
	Slide_Element_DataLink_PCOLive_PCOLIVE_THEME_LIGHT Slide_Element_DataLink_PCOLive_Theme = 0
	Slide_Element_DataLink_PCOLive_PCOLIVE_THEME_DARK  Slide_Element_DataLink_PCOLive_Theme = 1
)

// Enum value maps for Slide_Element_DataLink_PCOLive_Theme.
var (
	Slide_Element_DataLink_PCOLive_Theme_name = map[int32]string{
		0: "PCOLIVE_THEME_LIGHT",
		1: "PCOLIVE_THEME_DARK",
	}
	Slide_Element_DataLink_PCOLive_Theme_value = map[string]int32{
		"PCOLIVE_THEME_LIGHT": 0,
		"PCOLIVE_THEME_DARK":  1,
	}
)

func (x Slide_Element_DataLink_PCOLive_Theme) Enum() *Slide_Element_DataLink_PCOLive_Theme {
	p := new(Slide_Element_DataLink_PCOLive_Theme)
	*p = x
	return p
}

func (x Slide_Element_DataLink_PCOLive_Theme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_PCOLive_Theme) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[6].Descriptor()
}

func (Slide_Element_DataLink_PCOLive_Theme) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[6]
}

func (x Slide_Element_DataLink_PCOLive_Theme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_PCOLive_Theme.Descriptor instead.
func (Slide_Element_DataLink_PCOLive_Theme) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 10, 0}
}

type Slide_Element_DataLink_PCOLive_CountdownType int32

const (
	Slide_Element_DataLink_PCOLive_COUNTDOWN_TYPE_FULL_ITEM_LENGTH    Slide_Element_DataLink_PCOLive_CountdownType = 0
	Slide_Element_DataLink_PCOLive_COUNTDOWN_TYPE_END_ITEM_ON_TIME    Slide_Element_DataLink_PCOLive_CountdownType = 1
	Slide_Element_DataLink_PCOLive_COUNTDOWN_TYPE_END_SERVICE_ON_TIME Slide_Element_DataLink_PCOLive_CountdownType = 2
)

// Enum value maps for Slide_Element_DataLink_PCOLive_CountdownType.
var (
	Slide_Element_DataLink_PCOLive_CountdownType_name = map[int32]string{
		0: "COUNTDOWN_TYPE_FULL_ITEM_LENGTH",
		1: "COUNTDOWN_TYPE_END_ITEM_ON_TIME",
		2: "COUNTDOWN_TYPE_END_SERVICE_ON_TIME",
	}
	Slide_Element_DataLink_PCOLive_CountdownType_value = map[string]int32{
		"COUNTDOWN_TYPE_FULL_ITEM_LENGTH":    0,
		"COUNTDOWN_TYPE_END_ITEM_ON_TIME":    1,
		"COUNTDOWN_TYPE_END_SERVICE_ON_TIME": 2,
	}
)

func (x Slide_Element_DataLink_PCOLive_CountdownType) Enum() *Slide_Element_DataLink_PCOLive_CountdownType {
	p := new(Slide_Element_DataLink_PCOLive_CountdownType)
	*p = x
	return p
}

func (x Slide_Element_DataLink_PCOLive_CountdownType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_PCOLive_CountdownType) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[7].Descriptor()
}

func (Slide_Element_DataLink_PCOLive_CountdownType) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[7]
}

func (x Slide_Element_DataLink_PCOLive_CountdownType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_PCOLive_CountdownType.Descriptor instead.
func (Slide_Element_DataLink_PCOLive_CountdownType) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 10, 1}
}

type Slide_Element_DataLink_VisibilityLink_VisibilityCriterion int32

const (
	Slide_Element_DataLink_VisibilityLink_VISIBILITY_CRITERION_ALL  Slide_Element_DataLink_VisibilityLink_VisibilityCriterion = 0
	Slide_Element_DataLink_VisibilityLink_VISIBILITY_CRITERION_ANY  Slide_Element_DataLink_VisibilityLink_VisibilityCriterion = 1
	Slide_Element_DataLink_VisibilityLink_VISIBILITY_CRITERION_NONE Slide_Element_DataLink_VisibilityLink_VisibilityCriterion = 2
)

// Enum value maps for Slide_Element_DataLink_VisibilityLink_VisibilityCriterion.
var (
	Slide_Element_DataLink_VisibilityLink_VisibilityCriterion_name = map[int32]string{
		0: "VISIBILITY_CRITERION_ALL",
		1: "VISIBILITY_CRITERION_ANY",
		2: "VISIBILITY_CRITERION_NONE",
	}
	Slide_Element_DataLink_VisibilityLink_VisibilityCriterion_value = map[string]int32{
		"VISIBILITY_CRITERION_ALL":  0,
		"VISIBILITY_CRITERION_ANY":  1,
		"VISIBILITY_CRITERION_NONE": 2,
	}
)

func (x Slide_Element_DataLink_VisibilityLink_VisibilityCriterion) Enum() *Slide_Element_DataLink_VisibilityLink_VisibilityCriterion {
	p := new(Slide_Element_DataLink_VisibilityLink_VisibilityCriterion)
	*p = x
	return p
}

func (x Slide_Element_DataLink_VisibilityLink_VisibilityCriterion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_VisibilityLink_VisibilityCriterion) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[8].Descriptor()
}

func (Slide_Element_DataLink_VisibilityLink_VisibilityCriterion) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[8]
}

func (x Slide_Element_DataLink_VisibilityLink_VisibilityCriterion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_VisibilityCriterion.Descriptor instead.
func (Slide_Element_DataLink_VisibilityLink_VisibilityCriterion) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0}
}

type Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion int32

const (
	Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ELEMENT_VISIBILITY_CRITERION_HAS_TEXT    Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion = 0
	Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ELEMENT_VISIBILITY_CRITERION_HAS_NO_TEXT Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion = 1
)

// Enum value maps for Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion.
var (
	Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion_name = map[int32]string{
		0: "ELEMENT_VISIBILITY_CRITERION_HAS_TEXT",
		1: "ELEMENT_VISIBILITY_CRITERION_HAS_NO_TEXT",
	}
	Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion_value = map[string]int32{
		"ELEMENT_VISIBILITY_CRITERION_HAS_TEXT":    0,
		"ELEMENT_VISIBILITY_CRITERION_HAS_NO_TEXT": 1,
	}
)

func (x Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion) Enum() *Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion {
	p := new(Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion)
	*p = x
	return p
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[9].Descriptor()
}

func (Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[9]
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion.Descriptor instead.
func (Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 0, 0}
}

type Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion int32

const (
	Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TIMER_VISIBILITY_CRITERION_HAS_TIME_REMAINING Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion = 0
	Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TIMER_VISIBILITY_CRITERION_HAS_EXPIRED        Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion = 1
	Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TIMER_VISIBILITY_CRITERION_IS_RUNNING         Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion = 2
	Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TIMER_VISIBILITY_CRITERION_NOT_RUNNING        Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion = 3
)

// Enum value maps for Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion.
var (
	Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion_name = map[int32]string{
		0: "TIMER_VISIBILITY_CRITERION_HAS_TIME_REMAINING",
		1: "TIMER_VISIBILITY_CRITERION_HAS_EXPIRED",
		2: "TIMER_VISIBILITY_CRITERION_IS_RUNNING",
		3: "TIMER_VISIBILITY_CRITERION_NOT_RUNNING",
	}
	Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion_value = map[string]int32{
		"TIMER_VISIBILITY_CRITERION_HAS_TIME_REMAINING": 0,
		"TIMER_VISIBILITY_CRITERION_HAS_EXPIRED":        1,
		"TIMER_VISIBILITY_CRITERION_IS_RUNNING":         2,
		"TIMER_VISIBILITY_CRITERION_NOT_RUNNING":        3,
	}
)

func (x Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion) Enum() *Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion {
	p := new(Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion)
	*p = x
	return p
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[10].Descriptor()
}

func (Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[10]
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion.Descriptor instead.
func (Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 1, 0}
}

type Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion int32

const (
	Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VIDEO_COUNTDOWN_VISIBILITY_CRITERION_HAS_TIME_REMAINING Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion = 0
	Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VIDEO_COUNTDOWN_VISIBILITY_CRITERION_HAS_EXPIRED        Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion = 1
	Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VIDEO_COUNTDOWN_VISIBILITY_CRITERION_IS_RUNNING         Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion = 2
	Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VIDEO_COUNTDOWN_VISIBILITY_CRITERION_NOT_RUNNING        Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion = 3
	Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VIDEO_COUNTDOWN_VISIBILITY_CRITERION_LOOPING            Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion = 4
	Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VIDEO_COUNTDOWN_VISIBILITY_CRITERION_NOT_LOOPING        Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion = 5
)

// Enum value maps for Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion.
var (
	Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion_name = map[int32]string{
		0: "VIDEO_COUNTDOWN_VISIBILITY_CRITERION_HAS_TIME_REMAINING",
		1: "VIDEO_COUNTDOWN_VISIBILITY_CRITERION_HAS_EXPIRED",
		2: "VIDEO_COUNTDOWN_VISIBILITY_CRITERION_IS_RUNNING",
		3: "VIDEO_COUNTDOWN_VISIBILITY_CRITERION_NOT_RUNNING",
		4: "VIDEO_COUNTDOWN_VISIBILITY_CRITERION_LOOPING",
		5: "VIDEO_COUNTDOWN_VISIBILITY_CRITERION_NOT_LOOPING",
	}
	Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion_value = map[string]int32{
		"VIDEO_COUNTDOWN_VISIBILITY_CRITERION_HAS_TIME_REMAINING": 0,
		"VIDEO_COUNTDOWN_VISIBILITY_CRITERION_HAS_EXPIRED":        1,
		"VIDEO_COUNTDOWN_VISIBILITY_CRITERION_IS_RUNNING":         2,
		"VIDEO_COUNTDOWN_VISIBILITY_CRITERION_NOT_RUNNING":        3,
		"VIDEO_COUNTDOWN_VISIBILITY_CRITERION_LOOPING":            4,
		"VIDEO_COUNTDOWN_VISIBILITY_CRITERION_NOT_LOOPING":        5,
	}
)

func (x Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion) Enum() *Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion {
	p := new(Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion)
	*p = x
	return p
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[11].Descriptor()
}

func (Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[11]
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion.Descriptor instead.
func (Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 2, 0}
}

type Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion int32

const (
	Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AUDIO_COUNTDOWN_VISIBILITY_CRITERION_HAS_TIME_REMAINING Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion = 0
	Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AUDIO_COUNTDOWN_VISIBILITY_CRITERION_HAS_EXPIRED        Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion = 1
	Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AUDIO_COUNTDOWN_VISIBILITY_CRITERION_IS_RUNNING         Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion = 2
	Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AUDIO_COUNTDOWN_VISIBILITY_CRITERION_NOT_RUNNING        Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion = 3
	Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AUDIO_COUNTDOWN_VISIBILITY_CRITERION_LOOPING            Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion = 4
	Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AUDIO_COUNTDOWN_VISIBILITY_CRITERION_NOT_LOOPING        Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion = 5
)

// Enum value maps for Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion.
var (
	Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion_name = map[int32]string{
		0: "AUDIO_COUNTDOWN_VISIBILITY_CRITERION_HAS_TIME_REMAINING",
		1: "AUDIO_COUNTDOWN_VISIBILITY_CRITERION_HAS_EXPIRED",
		2: "AUDIO_COUNTDOWN_VISIBILITY_CRITERION_IS_RUNNING",
		3: "AUDIO_COUNTDOWN_VISIBILITY_CRITERION_NOT_RUNNING",
		4: "AUDIO_COUNTDOWN_VISIBILITY_CRITERION_LOOPING",
		5: "AUDIO_COUNTDOWN_VISIBILITY_CRITERION_NOT_LOOPING",
	}
	Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion_value = map[string]int32{
		"AUDIO_COUNTDOWN_VISIBILITY_CRITERION_HAS_TIME_REMAINING": 0,
		"AUDIO_COUNTDOWN_VISIBILITY_CRITERION_HAS_EXPIRED":        1,
		"AUDIO_COUNTDOWN_VISIBILITY_CRITERION_IS_RUNNING":         2,
		"AUDIO_COUNTDOWN_VISIBILITY_CRITERION_NOT_RUNNING":        3,
		"AUDIO_COUNTDOWN_VISIBILITY_CRITERION_LOOPING":            4,
		"AUDIO_COUNTDOWN_VISIBILITY_CRITERION_NOT_LOOPING":        5,
	}
)

func (x Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion) Enum() *Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion {
	p := new(Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion)
	*p = x
	return p
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[12].Descriptor()
}

func (Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[12]
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion.Descriptor instead.
func (Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 3, 0}
}

type Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion int32

const (
	Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CAPTURE_SESSION_VISIBILITY_CRITERION_ACTIVE   Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion = 0
	Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CAPTURE_SESSION_VISIBILITY_CRITERION_INACTIVE Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion = 1
)

// Enum value maps for Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion.
var (
	Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion_name = map[int32]string{
		0: "CAPTURE_SESSION_VISIBILITY_CRITERION_ACTIVE",
		1: "CAPTURE_SESSION_VISIBILITY_CRITERION_INACTIVE",
	}
	Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion_value = map[string]int32{
		"CAPTURE_SESSION_VISIBILITY_CRITERION_ACTIVE":   0,
		"CAPTURE_SESSION_VISIBILITY_CRITERION_INACTIVE": 1,
	}
)

func (x Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion) Enum() *Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion {
	p := new(Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion)
	*p = x
	return p
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[13].Descriptor()
}

func (Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[13]
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion.Descriptor instead.
func (Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 4, 0}
}

type Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion int32

const (
	Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VIDEO_INPUT_VISIBILITY_CRITERION_ACTIVE   Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion = 0
	Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VIDEO_INPUT_VISIBILITY_CRITERION_INACTIVE Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion = 1
)

// Enum value maps for Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion.
var (
	Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion_name = map[int32]string{
		0: "VIDEO_INPUT_VISIBILITY_CRITERION_ACTIVE",
		1: "VIDEO_INPUT_VISIBILITY_CRITERION_INACTIVE",
	}
	Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion_value = map[string]int32{
		"VIDEO_INPUT_VISIBILITY_CRITERION_ACTIVE":   0,
		"VIDEO_INPUT_VISIBILITY_CRITERION_INACTIVE": 1,
	}
)

func (x Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion) Enum() *Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion {
	p := new(Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion)
	*p = x
	return p
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[14].Descriptor()
}

func (Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[14]
}

func (x Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion.Descriptor instead.
func (Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 5, 0}
}

type Slide_Element_DataLink_SlideText_SlideSourceType int32

const (
	Slide_Element_DataLink_SlideText_SLIDE_SOURCE_TYPE_CURRENT_SLIDE Slide_Element_DataLink_SlideText_SlideSourceType = 0
	Slide_Element_DataLink_SlideText_SLIDE_SOURCE_TYPE_NEXT_SLIDE    Slide_Element_DataLink_SlideText_SlideSourceType = 1
)

// Enum value maps for Slide_Element_DataLink_SlideText_SlideSourceType.
var (
	Slide_Element_DataLink_SlideText_SlideSourceType_name = map[int32]string{
		0: "SLIDE_SOURCE_TYPE_CURRENT_SLIDE",
		1: "SLIDE_SOURCE_TYPE_NEXT_SLIDE",
	}
	Slide_Element_DataLink_SlideText_SlideSourceType_value = map[string]int32{
		"SLIDE_SOURCE_TYPE_CURRENT_SLIDE": 0,
		"SLIDE_SOURCE_TYPE_NEXT_SLIDE":    1,
	}
)

func (x Slide_Element_DataLink_SlideText_SlideSourceType) Enum() *Slide_Element_DataLink_SlideText_SlideSourceType {
	p := new(Slide_Element_DataLink_SlideText_SlideSourceType)
	*p = x
	return p
}

func (x Slide_Element_DataLink_SlideText_SlideSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_SlideText_SlideSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[15].Descriptor()
}

func (Slide_Element_DataLink_SlideText_SlideSourceType) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[15]
}

func (x Slide_Element_DataLink_SlideText_SlideSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideText_SlideSourceType.Descriptor instead.
func (Slide_Element_DataLink_SlideText_SlideSourceType) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 13, 0}
}

type Slide_Element_DataLink_SlideText_TextSourceOption int32

const (
	Slide_Element_DataLink_SlideText_TEXT_SOURCE_OPTION_TEXT                  Slide_Element_DataLink_SlideText_TextSourceOption = 0
	Slide_Element_DataLink_SlideText_TEXT_SOURCE_OPTION_NOTES                 Slide_Element_DataLink_SlideText_TextSourceOption = 1
	Slide_Element_DataLink_SlideText_TEXT_SOURCE_OPTION_ELEMENT_MATCHING_NAME Slide_Element_DataLink_SlideText_TextSourceOption = 2
)

// Enum value maps for Slide_Element_DataLink_SlideText_TextSourceOption.
var (
	Slide_Element_DataLink_SlideText_TextSourceOption_name = map[int32]string{
		0: "TEXT_SOURCE_OPTION_TEXT",
		1: "TEXT_SOURCE_OPTION_NOTES",
		2: "TEXT_SOURCE_OPTION_ELEMENT_MATCHING_NAME",
	}
	Slide_Element_DataLink_SlideText_TextSourceOption_value = map[string]int32{
		"TEXT_SOURCE_OPTION_TEXT":                  0,
		"TEXT_SOURCE_OPTION_NOTES":                 1,
		"TEXT_SOURCE_OPTION_ELEMENT_MATCHING_NAME": 2,
	}
)

func (x Slide_Element_DataLink_SlideText_TextSourceOption) Enum() *Slide_Element_DataLink_SlideText_TextSourceOption {
	p := new(Slide_Element_DataLink_SlideText_TextSourceOption)
	*p = x
	return p
}

func (x Slide_Element_DataLink_SlideText_TextSourceOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_SlideText_TextSourceOption) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[16].Descriptor()
}

func (Slide_Element_DataLink_SlideText_TextSourceOption) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[16]
}

func (x Slide_Element_DataLink_SlideText_TextSourceOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideText_TextSourceOption.Descriptor instead.
func (Slide_Element_DataLink_SlideText_TextSourceOption) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 13, 1}
}

type Slide_Element_DataLink_SlideText_TextTransformOption int32

const (
	Slide_Element_DataLink_SlideText_TEXT_TRANSFORM_OPTION_NONE                   Slide_Element_DataLink_SlideText_TextTransformOption = 0
	Slide_Element_DataLink_SlideText_TEXT_TRANSFORM_OPTION_REMOVE_LINE_RETURNS    Slide_Element_DataLink_SlideText_TextTransformOption = 1
	Slide_Element_DataLink_SlideText_TEXT_TRANSFORM_OPTION_ONE_WORD_PER_LINE      Slide_Element_DataLink_SlideText_TextTransformOption = 2
	Slide_Element_DataLink_SlideText_TEXT_TRANSFORM_OPTION_ONE_CHARACTER_PER_LINE Slide_Element_DataLink_SlideText_TextTransformOption = 3
)

// Enum value maps for Slide_Element_DataLink_SlideText_TextTransformOption.
var (
	Slide_Element_DataLink_SlideText_TextTransformOption_name = map[int32]string{
		0: "TEXT_TRANSFORM_OPTION_NONE",
		1: "TEXT_TRANSFORM_OPTION_REMOVE_LINE_RETURNS",
		2: "TEXT_TRANSFORM_OPTION_ONE_WORD_PER_LINE",
		3: "TEXT_TRANSFORM_OPTION_ONE_CHARACTER_PER_LINE",
	}
	Slide_Element_DataLink_SlideText_TextTransformOption_value = map[string]int32{
		"TEXT_TRANSFORM_OPTION_NONE":                   0,
		"TEXT_TRANSFORM_OPTION_REMOVE_LINE_RETURNS":    1,
		"TEXT_TRANSFORM_OPTION_ONE_WORD_PER_LINE":      2,
		"TEXT_TRANSFORM_OPTION_ONE_CHARACTER_PER_LINE": 3,
	}
)

func (x Slide_Element_DataLink_SlideText_TextTransformOption) Enum() *Slide_Element_DataLink_SlideText_TextTransformOption {
	p := new(Slide_Element_DataLink_SlideText_TextTransformOption)
	*p = x
	return p
}

func (x Slide_Element_DataLink_SlideText_TextTransformOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_SlideText_TextTransformOption) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[17].Descriptor()
}

func (Slide_Element_DataLink_SlideText_TextTransformOption) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[17]
}

func (x Slide_Element_DataLink_SlideText_TextTransformOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideText_TextTransformOption.Descriptor instead.
func (Slide_Element_DataLink_SlideText_TextTransformOption) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 13, 2}
}

type Slide_Element_DataLink_SlideImage_SlideSourceType int32

const (
	Slide_Element_DataLink_SlideImage_SLIDE_SOURCE_TYPE_CURRENT_SLIDE Slide_Element_DataLink_SlideImage_SlideSourceType = 0
	Slide_Element_DataLink_SlideImage_SLIDE_SOURCE_TYPE_NEXT_SLIDE    Slide_Element_DataLink_SlideImage_SlideSourceType = 1
)

// Enum value maps for Slide_Element_DataLink_SlideImage_SlideSourceType.
var (
	Slide_Element_DataLink_SlideImage_SlideSourceType_name = map[int32]string{
		0: "SLIDE_SOURCE_TYPE_CURRENT_SLIDE",
		1: "SLIDE_SOURCE_TYPE_NEXT_SLIDE",
	}
	Slide_Element_DataLink_SlideImage_SlideSourceType_value = map[string]int32{
		"SLIDE_SOURCE_TYPE_CURRENT_SLIDE": 0,
		"SLIDE_SOURCE_TYPE_NEXT_SLIDE":    1,
	}
)

func (x Slide_Element_DataLink_SlideImage_SlideSourceType) Enum() *Slide_Element_DataLink_SlideImage_SlideSourceType {
	p := new(Slide_Element_DataLink_SlideImage_SlideSourceType)
	*p = x
	return p
}

func (x Slide_Element_DataLink_SlideImage_SlideSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_SlideImage_SlideSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[18].Descriptor()
}

func (Slide_Element_DataLink_SlideImage_SlideSourceType) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[18]
}

func (x Slide_Element_DataLink_SlideImage_SlideSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideImage_SlideSourceType.Descriptor instead.
func (Slide_Element_DataLink_SlideImage_SlideSourceType) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 14, 0}
}

type Slide_Element_DataLink_VideoCountdown_VideoCountdownSource int32

const (
	Slide_Element_DataLink_VideoCountdown_VIDEO_COUNTDOWN_SOURCE_PRESENTATION Slide_Element_DataLink_VideoCountdown_VideoCountdownSource = 0
	Slide_Element_DataLink_VideoCountdown_VIDEO_COUNTDOWN_SOURCE_ANNOUNCEMENT Slide_Element_DataLink_VideoCountdown_VideoCountdownSource = 1
)

// Enum value maps for Slide_Element_DataLink_VideoCountdown_VideoCountdownSource.
var (
	Slide_Element_DataLink_VideoCountdown_VideoCountdownSource_name = map[int32]string{
		0: "VIDEO_COUNTDOWN_SOURCE_PRESENTATION",
		1: "VIDEO_COUNTDOWN_SOURCE_ANNOUNCEMENT",
	}
	Slide_Element_DataLink_VideoCountdown_VideoCountdownSource_value = map[string]int32{
		"VIDEO_COUNTDOWN_SOURCE_PRESENTATION": 0,
		"VIDEO_COUNTDOWN_SOURCE_ANNOUNCEMENT": 1,
	}
)

func (x Slide_Element_DataLink_VideoCountdown_VideoCountdownSource) Enum() *Slide_Element_DataLink_VideoCountdown_VideoCountdownSource {
	p := new(Slide_Element_DataLink_VideoCountdown_VideoCountdownSource)
	*p = x
	return p
}

func (x Slide_Element_DataLink_VideoCountdown_VideoCountdownSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_VideoCountdown_VideoCountdownSource) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[19].Descriptor()
}

func (Slide_Element_DataLink_VideoCountdown_VideoCountdownSource) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[19]
}

func (x Slide_Element_DataLink_VideoCountdown_VideoCountdownSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_VideoCountdown_VideoCountdownSource.Descriptor instead.
func (Slide_Element_DataLink_VideoCountdown_VideoCountdownSource) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 16, 0}
}

type Slide_Element_DataLink_GroupName_GroupSourceType int32

const (
	Slide_Element_DataLink_GroupName_GROUP_SOURCE_TYPE_CURRENT_SLIDE Slide_Element_DataLink_GroupName_GroupSourceType = 0
	Slide_Element_DataLink_GroupName_GROUP_SOURCE_TYPE_NEXT_SLIDE    Slide_Element_DataLink_GroupName_GroupSourceType = 1
	Slide_Element_DataLink_GroupName_GROUP_SOURCE_TYPE_NEXT_GROUP    Slide_Element_DataLink_GroupName_GroupSourceType = 2
)

// Enum value maps for Slide_Element_DataLink_GroupName_GroupSourceType.
var (
	Slide_Element_DataLink_GroupName_GroupSourceType_name = map[int32]string{
		0: "GROUP_SOURCE_TYPE_CURRENT_SLIDE",
		1: "GROUP_SOURCE_TYPE_NEXT_SLIDE",
		2: "GROUP_SOURCE_TYPE_NEXT_GROUP",
	}
	Slide_Element_DataLink_GroupName_GroupSourceType_value = map[string]int32{
		"GROUP_SOURCE_TYPE_CURRENT_SLIDE": 0,
		"GROUP_SOURCE_TYPE_NEXT_SLIDE":    1,
		"GROUP_SOURCE_TYPE_NEXT_GROUP":    2,
	}
)

func (x Slide_Element_DataLink_GroupName_GroupSourceType) Enum() *Slide_Element_DataLink_GroupName_GroupSourceType {
	p := new(Slide_Element_DataLink_GroupName_GroupSourceType)
	*p = x
	return p
}

func (x Slide_Element_DataLink_GroupName_GroupSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_GroupName_GroupSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[20].Descriptor()
}

func (Slide_Element_DataLink_GroupName_GroupSourceType) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[20]
}

func (x Slide_Element_DataLink_GroupName_GroupSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_GroupName_GroupSourceType.Descriptor instead.
func (Slide_Element_DataLink_GroupName_GroupSourceType) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 18, 0}
}

type Slide_Element_DataLink_GroupColor_GroupSourceType int32

const (
	Slide_Element_DataLink_GroupColor_GROUP_SOURCE_TYPE_CURRENT_SLIDE Slide_Element_DataLink_GroupColor_GroupSourceType = 0
	Slide_Element_DataLink_GroupColor_GROUP_SOURCE_TYPE_NEXT_SLIDE    Slide_Element_DataLink_GroupColor_GroupSourceType = 1
	Slide_Element_DataLink_GroupColor_GROUP_SOURCE_TYPE_NEXT_GROUP    Slide_Element_DataLink_GroupColor_GroupSourceType = 2
)

// Enum value maps for Slide_Element_DataLink_GroupColor_GroupSourceType.
var (
	Slide_Element_DataLink_GroupColor_GroupSourceType_name = map[int32]string{
		0: "GROUP_SOURCE_TYPE_CURRENT_SLIDE",
		1: "GROUP_SOURCE_TYPE_NEXT_SLIDE",
		2: "GROUP_SOURCE_TYPE_NEXT_GROUP",
	}
	Slide_Element_DataLink_GroupColor_GroupSourceType_value = map[string]int32{
		"GROUP_SOURCE_TYPE_CURRENT_SLIDE": 0,
		"GROUP_SOURCE_TYPE_NEXT_SLIDE":    1,
		"GROUP_SOURCE_TYPE_NEXT_GROUP":    2,
	}
)

func (x Slide_Element_DataLink_GroupColor_GroupSourceType) Enum() *Slide_Element_DataLink_GroupColor_GroupSourceType {
	p := new(Slide_Element_DataLink_GroupColor_GroupSourceType)
	*p = x
	return p
}

func (x Slide_Element_DataLink_GroupColor_GroupSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_GroupColor_GroupSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[21].Descriptor()
}

func (Slide_Element_DataLink_GroupColor_GroupSourceType) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[21]
}

func (x Slide_Element_DataLink_GroupColor_GroupSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_GroupColor_GroupSourceType.Descriptor instead.
func (Slide_Element_DataLink_GroupColor_GroupSourceType) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 19, 0}
}

type Slide_Element_DataLink_SlideLabelText_SlideLabelSource int32

const (
	Slide_Element_DataLink_SlideLabelText_SLIDE_LABEL_SOURCE_CURRENT_SLIDE Slide_Element_DataLink_SlideLabelText_SlideLabelSource = 0
	Slide_Element_DataLink_SlideLabelText_SLIDE_LABEL_SOURCE_NEXT_SLIDE    Slide_Element_DataLink_SlideLabelText_SlideLabelSource = 1
)

// Enum value maps for Slide_Element_DataLink_SlideLabelText_SlideLabelSource.
var (
	Slide_Element_DataLink_SlideLabelText_SlideLabelSource_name = map[int32]string{
		0: "SLIDE_LABEL_SOURCE_CURRENT_SLIDE",
		1: "SLIDE_LABEL_SOURCE_NEXT_SLIDE",
	}
	Slide_Element_DataLink_SlideLabelText_SlideLabelSource_value = map[string]int32{
		"SLIDE_LABEL_SOURCE_CURRENT_SLIDE": 0,
		"SLIDE_LABEL_SOURCE_NEXT_SLIDE":    1,
	}
)

func (x Slide_Element_DataLink_SlideLabelText_SlideLabelSource) Enum() *Slide_Element_DataLink_SlideLabelText_SlideLabelSource {
	p := new(Slide_Element_DataLink_SlideLabelText_SlideLabelSource)
	*p = x
	return p
}

func (x Slide_Element_DataLink_SlideLabelText_SlideLabelSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_SlideLabelText_SlideLabelSource) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[22].Descriptor()
}

func (Slide_Element_DataLink_SlideLabelText_SlideLabelSource) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[22]
}

func (x Slide_Element_DataLink_SlideLabelText_SlideLabelSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideLabelText_SlideLabelSource.Descriptor instead.
func (Slide_Element_DataLink_SlideLabelText_SlideLabelSource) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 20, 0}
}

type Slide_Element_DataLink_SlideLabelColor_SlideLabelSource int32

const (
	Slide_Element_DataLink_SlideLabelColor_SLIDE_LABEL_SOURCE_CURRENT_SLIDE Slide_Element_DataLink_SlideLabelColor_SlideLabelSource = 0
	Slide_Element_DataLink_SlideLabelColor_SLIDE_LABEL_SOURCE_NEXT_SLIDE    Slide_Element_DataLink_SlideLabelColor_SlideLabelSource = 1
)

// Enum value maps for Slide_Element_DataLink_SlideLabelColor_SlideLabelSource.
var (
	Slide_Element_DataLink_SlideLabelColor_SlideLabelSource_name = map[int32]string{
		0: "SLIDE_LABEL_SOURCE_CURRENT_SLIDE",
		1: "SLIDE_LABEL_SOURCE_NEXT_SLIDE",
	}
	Slide_Element_DataLink_SlideLabelColor_SlideLabelSource_value = map[string]int32{
		"SLIDE_LABEL_SOURCE_CURRENT_SLIDE": 0,
		"SLIDE_LABEL_SOURCE_NEXT_SLIDE":    1,
	}
)

func (x Slide_Element_DataLink_SlideLabelColor_SlideLabelSource) Enum() *Slide_Element_DataLink_SlideLabelColor_SlideLabelSource {
	p := new(Slide_Element_DataLink_SlideLabelColor_SlideLabelSource)
	*p = x
	return p
}

func (x Slide_Element_DataLink_SlideLabelColor_SlideLabelSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_SlideLabelColor_SlideLabelSource) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[23].Descriptor()
}

func (Slide_Element_DataLink_SlideLabelColor_SlideLabelSource) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[23]
}

func (x Slide_Element_DataLink_SlideLabelColor_SlideLabelSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideLabelColor_SlideLabelSource.Descriptor instead.
func (Slide_Element_DataLink_SlideLabelColor_SlideLabelSource) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 21, 0}
}

type Slide_Element_DataLink_Presentation_PresentationSource int32

const (
	Slide_Element_DataLink_Presentation_PRESENTATION_SOURCE_PRESENTATION Slide_Element_DataLink_Presentation_PresentationSource = 0
	Slide_Element_DataLink_Presentation_PRESENTATION_SOURCE_ANNOUNCEMENT Slide_Element_DataLink_Presentation_PresentationSource = 1
)

// Enum value maps for Slide_Element_DataLink_Presentation_PresentationSource.
var (
	Slide_Element_DataLink_Presentation_PresentationSource_name = map[int32]string{
		0: "PRESENTATION_SOURCE_PRESENTATION",
		1: "PRESENTATION_SOURCE_ANNOUNCEMENT",
	}
	Slide_Element_DataLink_Presentation_PresentationSource_value = map[string]int32{
		"PRESENTATION_SOURCE_PRESENTATION": 0,
		"PRESENTATION_SOURCE_ANNOUNCEMENT": 1,
	}
)

func (x Slide_Element_DataLink_Presentation_PresentationSource) Enum() *Slide_Element_DataLink_Presentation_PresentationSource {
	p := new(Slide_Element_DataLink_Presentation_PresentationSource)
	*p = x
	return p
}

func (x Slide_Element_DataLink_Presentation_PresentationSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_Presentation_PresentationSource) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[24].Descriptor()
}

func (Slide_Element_DataLink_Presentation_PresentationSource) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[24]
}

func (x Slide_Element_DataLink_Presentation_PresentationSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_Presentation_PresentationSource.Descriptor instead.
func (Slide_Element_DataLink_Presentation_PresentationSource) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 23, 0}
}

type Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType int32

const (
	Slide_Element_DataLink_PlaylistItem_PLAYLIST_ITEM_SOURCE_TYPE_CURRENT         Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType = 0
	Slide_Element_DataLink_PlaylistItem_PLAYLIST_ITEM_SOURCE_TYPE_NEXT            Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType = 1
	Slide_Element_DataLink_PlaylistItem_PLAYLIST_ITEM_SOURCE_TYPE_CURRENT_HEADER  Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType = 2
	Slide_Element_DataLink_PlaylistItem_PLAYLIST_ITEM_SOURCE_TYPE_NEXT_HEADER     Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType = 3
	Slide_Element_DataLink_PlaylistItem_PLAYLIST_ITEM_SOURCE_TYPE_PARENT_PLAYLIST Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType = 4
)

// Enum value maps for Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType.
var (
	Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType_name = map[int32]string{
		0: "PLAYLIST_ITEM_SOURCE_TYPE_CURRENT",
		1: "PLAYLIST_ITEM_SOURCE_TYPE_NEXT",
		2: "PLAYLIST_ITEM_SOURCE_TYPE_CURRENT_HEADER",
		3: "PLAYLIST_ITEM_SOURCE_TYPE_NEXT_HEADER",
		4: "PLAYLIST_ITEM_SOURCE_TYPE_PARENT_PLAYLIST",
	}
	Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType_value = map[string]int32{
		"PLAYLIST_ITEM_SOURCE_TYPE_CURRENT":         0,
		"PLAYLIST_ITEM_SOURCE_TYPE_NEXT":            1,
		"PLAYLIST_ITEM_SOURCE_TYPE_CURRENT_HEADER":  2,
		"PLAYLIST_ITEM_SOURCE_TYPE_NEXT_HEADER":     3,
		"PLAYLIST_ITEM_SOURCE_TYPE_PARENT_PLAYLIST": 4,
	}
)

func (x Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType) Enum() *Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType {
	p := new(Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType)
	*p = x
	return p
}

func (x Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[25].Descriptor()
}

func (Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[25]
}

func (x Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType.Descriptor instead.
func (Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 24, 0}
}

type Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource int32

const (
	Slide_Element_DataLink_AutoAdvanceTimeRemaining_AUTO_ADVANCE_SOURCE_PRESENTATION Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource = 0
	Slide_Element_DataLink_AutoAdvanceTimeRemaining_AUTO_ADVANCE_SOURCE_ANNOUNCEMENT Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource = 1
)

// Enum value maps for Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource.
var (
	Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource_name = map[int32]string{
		0: "AUTO_ADVANCE_SOURCE_PRESENTATION",
		1: "AUTO_ADVANCE_SOURCE_ANNOUNCEMENT",
	}
	Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource_value = map[string]int32{
		"AUTO_ADVANCE_SOURCE_PRESENTATION": 0,
		"AUTO_ADVANCE_SOURCE_ANNOUNCEMENT": 1,
	}
)

func (x Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource) Enum() *Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource {
	p := new(Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource)
	*p = x
	return p
}

func (x Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[26].Descriptor()
}

func (Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[26]
}

func (x Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource.Descriptor instead.
func (Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 25, 0}
}

type Slide_Element_DataLink_SlideCount_SlideCountSourceType int32

const (
	Slide_Element_DataLink_SlideCount_SLIDE_COUNT_SOURCE_TYPE_CURRENT   Slide_Element_DataLink_SlideCount_SlideCountSourceType = 0
	Slide_Element_DataLink_SlideCount_SLIDE_COUNT_SOURCE_TYPE_REMAINING Slide_Element_DataLink_SlideCount_SlideCountSourceType = 1
	Slide_Element_DataLink_SlideCount_SLIDE_COUNT_SOURCE_TYPE_TOTAL     Slide_Element_DataLink_SlideCount_SlideCountSourceType = 2
)

// Enum value maps for Slide_Element_DataLink_SlideCount_SlideCountSourceType.
var (
	Slide_Element_DataLink_SlideCount_SlideCountSourceType_name = map[int32]string{
		0: "SLIDE_COUNT_SOURCE_TYPE_CURRENT",
		1: "SLIDE_COUNT_SOURCE_TYPE_REMAINING",
		2: "SLIDE_COUNT_SOURCE_TYPE_TOTAL",
	}
	Slide_Element_DataLink_SlideCount_SlideCountSourceType_value = map[string]int32{
		"SLIDE_COUNT_SOURCE_TYPE_CURRENT":   0,
		"SLIDE_COUNT_SOURCE_TYPE_REMAINING": 1,
		"SLIDE_COUNT_SOURCE_TYPE_TOTAL":     2,
	}
)

func (x Slide_Element_DataLink_SlideCount_SlideCountSourceType) Enum() *Slide_Element_DataLink_SlideCount_SlideCountSourceType {
	p := new(Slide_Element_DataLink_SlideCount_SlideCountSourceType)
	*p = x
	return p
}

func (x Slide_Element_DataLink_SlideCount_SlideCountSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_DataLink_SlideCount_SlideCountSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[27].Descriptor()
}

func (Slide_Element_DataLink_SlideCount_SlideCountSourceType) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[27]
}

func (x Slide_Element_DataLink_SlideCount_SlideCountSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideCount_SlideCountSourceType.Descriptor instead.
func (Slide_Element_DataLink_SlideCount_SlideCountSourceType) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 28, 0}
}

type Slide_Element_TextScroller_Direction int32

const (
	Slide_Element_TextScroller_DIRECTION_LEFT  Slide_Element_TextScroller_Direction = 0
	Slide_Element_TextScroller_DIRECTION_RIGHT Slide_Element_TextScroller_Direction = 1
	Slide_Element_TextScroller_DIRECTION_UP    Slide_Element_TextScroller_Direction = 2
	Slide_Element_TextScroller_DIRECTION_DOWN  Slide_Element_TextScroller_Direction = 3
)

// Enum value maps for Slide_Element_TextScroller_Direction.
var (
	Slide_Element_TextScroller_Direction_name = map[int32]string{
		0: "DIRECTION_LEFT",
		1: "DIRECTION_RIGHT",
		2: "DIRECTION_UP",
		3: "DIRECTION_DOWN",
	}
	Slide_Element_TextScroller_Direction_value = map[string]int32{
		"DIRECTION_LEFT":  0,
		"DIRECTION_RIGHT": 1,
		"DIRECTION_UP":    2,
		"DIRECTION_DOWN":  3,
	}
)

func (x Slide_Element_TextScroller_Direction) Enum() *Slide_Element_TextScroller_Direction {
	p := new(Slide_Element_TextScroller_Direction)
	*p = x
	return p
}

func (x Slide_Element_TextScroller_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Slide_Element_TextScroller_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_slide_proto_enumTypes[28].Descriptor()
}

func (Slide_Element_TextScroller_Direction) Type() protoreflect.EnumType {
	return &file_slide_proto_enumTypes[28]
}

func (x Slide_Element_TextScroller_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Slide_Element_TextScroller_Direction.Descriptor instead.
func (Slide_Element_TextScroller_Direction) EnumDescriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

type Slide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements             []*Slide_Element  `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	ElementBuildOrder    []*UUID           `protobuf:"bytes,2,rep,name=element_build_order,json=elementBuildOrder,proto3" json:"element_build_order,omitempty"`
	Guidelines           []*AlignmentGuide `protobuf:"bytes,3,rep,name=guidelines,proto3" json:"guidelines,omitempty"`
	DrawsBackgroundColor bool              `protobuf:"varint,4,opt,name=draws_background_color,json=drawsBackgroundColor,proto3" json:"draws_background_color,omitempty"`
	BackgroundColor      *Color            `protobuf:"bytes,5,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	Size                 *Graphics_Size    `protobuf:"bytes,6,opt,name=size,proto3" json:"size,omitempty"`
	Uuid                 *UUID             `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Slide) Reset() {
	*x = Slide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide) ProtoMessage() {}

func (x *Slide) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide.ProtoReflect.Descriptor instead.
func (*Slide) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0}
}

func (x *Slide) GetElements() []*Slide_Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *Slide) GetElementBuildOrder() []*UUID {
	if x != nil {
		return x.ElementBuildOrder
	}
	return nil
}

func (x *Slide) GetGuidelines() []*AlignmentGuide {
	if x != nil {
		return x.Guidelines
	}
	return nil
}

func (x *Slide) GetDrawsBackgroundColor() bool {
	if x != nil {
		return x.DrawsBackgroundColor
	}
	return false
}

func (x *Slide) GetBackgroundColor() *Color {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

func (x *Slide) GetSize() *Graphics_Size {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Slide) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type Slide_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element         *Graphics_Element            `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
	BuildIn         *Slide_Element_Build         `protobuf:"bytes,2,opt,name=build_in,json=buildIn,proto3" json:"build_in,omitempty"`
	BuildOut        *Slide_Element_Build         `protobuf:"bytes,3,opt,name=build_out,json=buildOut,proto3" json:"build_out,omitempty"`
	Info            uint32                       `protobuf:"varint,4,opt,name=info,proto3" json:"info,omitempty"`
	RevealType      Slide_Element_TextRevealType `protobuf:"varint,5,opt,name=reveal_type,json=revealType,proto3,enum=rv.data.Slide_Element_TextRevealType" json:"reveal_type,omitempty"`
	DataLinks       []*Slide_Element_DataLink    `protobuf:"bytes,6,rep,name=data_links,json=dataLinks,proto3" json:"data_links,omitempty"`
	ChildBuilds     []*Slide_Element_ChildBuild  `protobuf:"bytes,7,rep,name=childBuilds,proto3" json:"childBuilds,omitempty"`
	RevealFromIndex uint32                       `protobuf:"varint,8,opt,name=reveal_from_index,json=revealFromIndex,proto3" json:"reveal_from_index,omitempty"`
	TextScroller    *Slide_Element_TextScroller  `protobuf:"bytes,9,opt,name=text_scroller,json=textScroller,proto3" json:"text_scroller,omitempty"`
}

func (x *Slide_Element) Reset() {
	*x = Slide_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element) ProtoMessage() {}

func (x *Slide_Element) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element.ProtoReflect.Descriptor instead.
func (*Slide_Element) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Slide_Element) GetElement() *Graphics_Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *Slide_Element) GetBuildIn() *Slide_Element_Build {
	if x != nil {
		return x.BuildIn
	}
	return nil
}

func (x *Slide_Element) GetBuildOut() *Slide_Element_Build {
	if x != nil {
		return x.BuildOut
	}
	return nil
}

func (x *Slide_Element) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

func (x *Slide_Element) GetRevealType() Slide_Element_TextRevealType {
	if x != nil {
		return x.RevealType
	}
	return Slide_Element_TEXT_REVEAL_TYPE_NONE
}

func (x *Slide_Element) GetDataLinks() []*Slide_Element_DataLink {
	if x != nil {
		return x.DataLinks
	}
	return nil
}

func (x *Slide_Element) GetChildBuilds() []*Slide_Element_ChildBuild {
	if x != nil {
		return x.ChildBuilds
	}
	return nil
}

func (x *Slide_Element) GetRevealFromIndex() uint32 {
	if x != nil {
		return x.RevealFromIndex
	}
	return 0
}

func (x *Slide_Element) GetTextScroller() *Slide_Element_TextScroller {
	if x != nil {
		return x.TextScroller
	}
	return nil
}

type Slide_Element_Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        *UUID                     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ElementUUID *UUID                     `protobuf:"bytes,2,opt,name=elementUUID,proto3" json:"elementUUID,omitempty"`
	Start       Slide_Element_Build_Start `protobuf:"varint,3,opt,name=start,proto3,enum=rv.data.Slide_Element_Build_Start" json:"start,omitempty"`
	DelayTime   float64                   `protobuf:"fixed64,4,opt,name=delayTime,proto3" json:"delayTime,omitempty"`
	Transition  *Transition               `protobuf:"bytes,5,opt,name=transition,proto3" json:"transition,omitempty"`
}

func (x *Slide_Element_Build) Reset() {
	*x = Slide_Element_Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_Build) ProtoMessage() {}

func (x *Slide_Element_Build) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_Build.ProtoReflect.Descriptor instead.
func (*Slide_Element_Build) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Slide_Element_Build) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Slide_Element_Build) GetElementUUID() *UUID {
	if x != nil {
		return x.ElementUUID
	}
	return nil
}

func (x *Slide_Element_Build) GetStart() Slide_Element_Build_Start {
	if x != nil {
		return x.Start
	}
	return Slide_Element_Build_START_ON_CLICK
}

func (x *Slide_Element_Build) GetDelayTime() float64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *Slide_Element_Build) GetTransition() *Transition {
	if x != nil {
		return x.Transition
	}
	return nil
}

type Slide_Element_ChildBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      *UUID                          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Start     Slide_Element_ChildBuild_Start `protobuf:"varint,2,opt,name=start,proto3,enum=rv.data.Slide_Element_ChildBuild_Start" json:"start,omitempty"`
	DelayTime float64                        `protobuf:"fixed64,3,opt,name=delayTime,proto3" json:"delayTime,omitempty"`
	Index     uint32                         `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Slide_Element_ChildBuild) Reset() {
	*x = Slide_Element_ChildBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_ChildBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_ChildBuild) ProtoMessage() {}

func (x *Slide_Element_ChildBuild) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_ChildBuild.ProtoReflect.Descriptor instead.
func (*Slide_Element_ChildBuild) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Slide_Element_ChildBuild) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Slide_Element_ChildBuild) GetStart() Slide_Element_ChildBuild_Start {
	if x != nil {
		return x.Start
	}
	return Slide_Element_ChildBuild_START_ON_CLICK
}

func (x *Slide_Element_ChildBuild) GetDelayTime() float64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *Slide_Element_ChildBuild) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Slide_Element_DataLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PropertyType:
	//	*Slide_Element_DataLink_Ticker_
	//	*Slide_Element_DataLink_AlternateText
	//	*Slide_Element_DataLink_TimerText_
	//	*Slide_Element_DataLink_ClockText_
	//	*Slide_Element_DataLink_ChordChart_
	//	*Slide_Element_DataLink_OutputScreen_
	//	*Slide_Element_DataLink_PcoLive
	//	*Slide_Element_DataLink_AlternateFill
	//	*Slide_Element_DataLink_VisibilityLink_
	//	*Slide_Element_DataLink_SlideText_
	//	*Slide_Element_DataLink_StageMessage_
	//	*Slide_Element_DataLink_VideoCountdown_
	//	*Slide_Element_DataLink_SlideImage_
	//	*Slide_Element_DataLink_CcliText
	//	*Slide_Element_DataLink_GroupName_
	//	*Slide_Element_DataLink_GroupColor_
	//	*Slide_Element_DataLink_PresentationNotes_
	//	*Slide_Element_DataLink_PlaylistItem_
	//	*Slide_Element_DataLink_AutoAdvanceTimeRemaining_
	//	*Slide_Element_DataLink_CaptureStatusText_
	//	*Slide_Element_DataLink_CaptureStatusColor_
	//	*Slide_Element_DataLink_SlideCount_
	//	*Slide_Element_DataLink_AudioCountdown_
	//	*Slide_Element_DataLink_Presentation_
	//	*Slide_Element_DataLink_Slide_Label_Text
	//	*Slide_Element_DataLink_Slide_Label_Color
	//	*Slide_Element_DataLink_RssFeed
	//	*Slide_Element_DataLink_FileFeed_
	//	*Slide_Element_DataLink_ChordProChart_
	PropertyType isSlide_Element_DataLink_PropertyType `protobuf_oneof:"PropertyType"`
}

func (x *Slide_Element_DataLink) Reset() {
	*x = Slide_Element_DataLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink) ProtoMessage() {}

func (x *Slide_Element_DataLink) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *Slide_Element_DataLink) GetPropertyType() isSlide_Element_DataLink_PropertyType {
	if m != nil {
		return m.PropertyType
	}
	return nil
}

func (x *Slide_Element_DataLink) GetTicker() *Slide_Element_DataLink_Ticker {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_Ticker_); ok {
		return x.Ticker
	}
	return nil
}

func (x *Slide_Element_DataLink) GetAlternateText() *Slide_Element_DataLink_AlternateElementText {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_AlternateText); ok {
		return x.AlternateText
	}
	return nil
}

func (x *Slide_Element_DataLink) GetTimerText() *Slide_Element_DataLink_TimerText {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_TimerText_); ok {
		return x.TimerText
	}
	return nil
}

func (x *Slide_Element_DataLink) GetClockText() *Slide_Element_DataLink_ClockText {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_ClockText_); ok {
		return x.ClockText
	}
	return nil
}

func (x *Slide_Element_DataLink) GetChordChart() *Slide_Element_DataLink_ChordChart {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_ChordChart_); ok {
		return x.ChordChart
	}
	return nil
}

func (x *Slide_Element_DataLink) GetOutputScreen() *Slide_Element_DataLink_OutputScreen {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_OutputScreen_); ok {
		return x.OutputScreen
	}
	return nil
}

func (x *Slide_Element_DataLink) GetPcoLive() *Slide_Element_DataLink_PCOLive {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_PcoLive); ok {
		return x.PcoLive
	}
	return nil
}

func (x *Slide_Element_DataLink) GetAlternateFill() *Slide_Element_DataLink_AlternateElementFill {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_AlternateFill); ok {
		return x.AlternateFill
	}
	return nil
}

func (x *Slide_Element_DataLink) GetVisibilityLink() *Slide_Element_DataLink_VisibilityLink {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_VisibilityLink_); ok {
		return x.VisibilityLink
	}
	return nil
}

func (x *Slide_Element_DataLink) GetSlideText() *Slide_Element_DataLink_SlideText {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_SlideText_); ok {
		return x.SlideText
	}
	return nil
}

func (x *Slide_Element_DataLink) GetStageMessage() *Slide_Element_DataLink_StageMessage {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_StageMessage_); ok {
		return x.StageMessage
	}
	return nil
}

func (x *Slide_Element_DataLink) GetVideoCountdown() *Slide_Element_DataLink_VideoCountdown {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_VideoCountdown_); ok {
		return x.VideoCountdown
	}
	return nil
}

func (x *Slide_Element_DataLink) GetSlideImage() *Slide_Element_DataLink_SlideImage {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_SlideImage_); ok {
		return x.SlideImage
	}
	return nil
}

func (x *Slide_Element_DataLink) GetCcliText() *Slide_Element_DataLink_CCLIText {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_CcliText); ok {
		return x.CcliText
	}
	return nil
}

func (x *Slide_Element_DataLink) GetGroupName() *Slide_Element_DataLink_GroupName {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_GroupName_); ok {
		return x.GroupName
	}
	return nil
}

func (x *Slide_Element_DataLink) GetGroupColor() *Slide_Element_DataLink_GroupColor {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_GroupColor_); ok {
		return x.GroupColor
	}
	return nil
}

func (x *Slide_Element_DataLink) GetPresentationNotes() *Slide_Element_DataLink_PresentationNotes {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_PresentationNotes_); ok {
		return x.PresentationNotes
	}
	return nil
}

func (x *Slide_Element_DataLink) GetPlaylistItem() *Slide_Element_DataLink_PlaylistItem {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_PlaylistItem_); ok {
		return x.PlaylistItem
	}
	return nil
}

func (x *Slide_Element_DataLink) GetAutoAdvanceTimeRemaining() *Slide_Element_DataLink_AutoAdvanceTimeRemaining {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_AutoAdvanceTimeRemaining_); ok {
		return x.AutoAdvanceTimeRemaining
	}
	return nil
}

func (x *Slide_Element_DataLink) GetCaptureStatusText() *Slide_Element_DataLink_CaptureStatusText {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_CaptureStatusText_); ok {
		return x.CaptureStatusText
	}
	return nil
}

func (x *Slide_Element_DataLink) GetCaptureStatusColor() *Slide_Element_DataLink_CaptureStatusColor {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_CaptureStatusColor_); ok {
		return x.CaptureStatusColor
	}
	return nil
}

func (x *Slide_Element_DataLink) GetSlideCount() *Slide_Element_DataLink_SlideCount {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_SlideCount_); ok {
		return x.SlideCount
	}
	return nil
}

func (x *Slide_Element_DataLink) GetAudioCountdown() *Slide_Element_DataLink_AudioCountdown {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_AudioCountdown_); ok {
		return x.AudioCountdown
	}
	return nil
}

func (x *Slide_Element_DataLink) GetPresentation() *Slide_Element_DataLink_Presentation {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_Presentation_); ok {
		return x.Presentation
	}
	return nil
}

func (x *Slide_Element_DataLink) GetSlide_Label_Text() *Slide_Element_DataLink_SlideLabelText {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_Slide_Label_Text); ok {
		return x.Slide_Label_Text
	}
	return nil
}

func (x *Slide_Element_DataLink) GetSlide_Label_Color() *Slide_Element_DataLink_SlideLabelColor {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_Slide_Label_Color); ok {
		return x.Slide_Label_Color
	}
	return nil
}

func (x *Slide_Element_DataLink) GetRssFeed() *Slide_Element_DataLink_RSSFeed {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_RssFeed); ok {
		return x.RssFeed
	}
	return nil
}

func (x *Slide_Element_DataLink) GetFileFeed() *Slide_Element_DataLink_FileFeed {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_FileFeed_); ok {
		return x.FileFeed
	}
	return nil
}

func (x *Slide_Element_DataLink) GetChordProChart() *Slide_Element_DataLink_ChordProChart {
	if x, ok := x.GetPropertyType().(*Slide_Element_DataLink_ChordProChart_); ok {
		return x.ChordProChart
	}
	return nil
}

type isSlide_Element_DataLink_PropertyType interface {
	isSlide_Element_DataLink_PropertyType()
}

type Slide_Element_DataLink_Ticker_ struct {
	Ticker *Slide_Element_DataLink_Ticker `protobuf:"bytes,1,opt,name=ticker,proto3,oneof"`
}

type Slide_Element_DataLink_AlternateText struct {
	AlternateText *Slide_Element_DataLink_AlternateElementText `protobuf:"bytes,2,opt,name=alternate_text,json=alternateText,proto3,oneof"`
}

type Slide_Element_DataLink_TimerText_ struct {
	TimerText *Slide_Element_DataLink_TimerText `protobuf:"bytes,3,opt,name=timer_text,json=timerText,proto3,oneof"`
}

type Slide_Element_DataLink_ClockText_ struct {
	ClockText *Slide_Element_DataLink_ClockText `protobuf:"bytes,4,opt,name=clock_text,json=clockText,proto3,oneof"`
}

type Slide_Element_DataLink_ChordChart_ struct {
	ChordChart *Slide_Element_DataLink_ChordChart `protobuf:"bytes,5,opt,name=chord_chart,json=chordChart,proto3,oneof"`
}

type Slide_Element_DataLink_OutputScreen_ struct {
	OutputScreen *Slide_Element_DataLink_OutputScreen `protobuf:"bytes,6,opt,name=output_screen,json=outputScreen,proto3,oneof"`
}

type Slide_Element_DataLink_PcoLive struct {
	PcoLive *Slide_Element_DataLink_PCOLive `protobuf:"bytes,7,opt,name=pco_live,json=pcoLive,proto3,oneof"`
}

type Slide_Element_DataLink_AlternateFill struct {
	AlternateFill *Slide_Element_DataLink_AlternateElementFill `protobuf:"bytes,8,opt,name=alternate_fill,json=alternateFill,proto3,oneof"`
}

type Slide_Element_DataLink_VisibilityLink_ struct {
	VisibilityLink *Slide_Element_DataLink_VisibilityLink `protobuf:"bytes,9,opt,name=visibility_link,json=visibilityLink,proto3,oneof"`
}

type Slide_Element_DataLink_SlideText_ struct {
	SlideText *Slide_Element_DataLink_SlideText `protobuf:"bytes,10,opt,name=slide_text,json=slideText,proto3,oneof"`
}

type Slide_Element_DataLink_StageMessage_ struct {
	StageMessage *Slide_Element_DataLink_StageMessage `protobuf:"bytes,11,opt,name=stage_message,json=stageMessage,proto3,oneof"`
}

type Slide_Element_DataLink_VideoCountdown_ struct {
	VideoCountdown *Slide_Element_DataLink_VideoCountdown `protobuf:"bytes,12,opt,name=video_countdown,json=videoCountdown,proto3,oneof"`
}

type Slide_Element_DataLink_SlideImage_ struct {
	SlideImage *Slide_Element_DataLink_SlideImage `protobuf:"bytes,13,opt,name=slide_image,json=slideImage,proto3,oneof"`
}

type Slide_Element_DataLink_CcliText struct {
	CcliText *Slide_Element_DataLink_CCLIText `protobuf:"bytes,14,opt,name=ccli_text,json=ccliText,proto3,oneof"`
}

type Slide_Element_DataLink_GroupName_ struct {
	GroupName *Slide_Element_DataLink_GroupName `protobuf:"bytes,15,opt,name=group_name,json=groupName,proto3,oneof"`
}

type Slide_Element_DataLink_GroupColor_ struct {
	GroupColor *Slide_Element_DataLink_GroupColor `protobuf:"bytes,16,opt,name=group_color,json=groupColor,proto3,oneof"`
}

type Slide_Element_DataLink_PresentationNotes_ struct {
	PresentationNotes *Slide_Element_DataLink_PresentationNotes `protobuf:"bytes,17,opt,name=presentation_notes,json=presentationNotes,proto3,oneof"`
}

type Slide_Element_DataLink_PlaylistItem_ struct {
	PlaylistItem *Slide_Element_DataLink_PlaylistItem `protobuf:"bytes,18,opt,name=playlist_item,json=playlistItem,proto3,oneof"`
}

type Slide_Element_DataLink_AutoAdvanceTimeRemaining_ struct {
	AutoAdvanceTimeRemaining *Slide_Element_DataLink_AutoAdvanceTimeRemaining `protobuf:"bytes,19,opt,name=auto_advance_time_remaining,json=autoAdvanceTimeRemaining,proto3,oneof"`
}

type Slide_Element_DataLink_CaptureStatusText_ struct {
	CaptureStatusText *Slide_Element_DataLink_CaptureStatusText `protobuf:"bytes,20,opt,name=capture_status_text,json=captureStatusText,proto3,oneof"`
}

type Slide_Element_DataLink_CaptureStatusColor_ struct {
	CaptureStatusColor *Slide_Element_DataLink_CaptureStatusColor `protobuf:"bytes,21,opt,name=capture_status_color,json=captureStatusColor,proto3,oneof"`
}

type Slide_Element_DataLink_SlideCount_ struct {
	SlideCount *Slide_Element_DataLink_SlideCount `protobuf:"bytes,22,opt,name=slide_count,json=slideCount,proto3,oneof"`
}

type Slide_Element_DataLink_AudioCountdown_ struct {
	AudioCountdown *Slide_Element_DataLink_AudioCountdown `protobuf:"bytes,23,opt,name=audio_countdown,json=audioCountdown,proto3,oneof"`
}

type Slide_Element_DataLink_Presentation_ struct {
	Presentation *Slide_Element_DataLink_Presentation `protobuf:"bytes,24,opt,name=presentation,proto3,oneof"`
}

type Slide_Element_DataLink_Slide_Label_Text struct {
	Slide_Label_Text *Slide_Element_DataLink_SlideLabelText `protobuf:"bytes,25,opt,name=slide_Label_Text,json=slideLabelText,proto3,oneof"`
}

type Slide_Element_DataLink_Slide_Label_Color struct {
	Slide_Label_Color *Slide_Element_DataLink_SlideLabelColor `protobuf:"bytes,26,opt,name=slide_Label_Color,json=slideLabelColor,proto3,oneof"`
}

type Slide_Element_DataLink_RssFeed struct {
	RssFeed *Slide_Element_DataLink_RSSFeed `protobuf:"bytes,27,opt,name=rss_feed,json=rssFeed,proto3,oneof"`
}

type Slide_Element_DataLink_FileFeed_ struct {
	FileFeed *Slide_Element_DataLink_FileFeed `protobuf:"bytes,28,opt,name=file_feed,json=fileFeed,proto3,oneof"`
}

type Slide_Element_DataLink_ChordProChart_ struct {
	ChordProChart *Slide_Element_DataLink_ChordProChart `protobuf:"bytes,29,opt,name=chord_pro_chart,json=chordProChart,proto3,oneof"`
}

func (*Slide_Element_DataLink_Ticker_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_AlternateText) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_TimerText_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_ClockText_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_ChordChart_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_OutputScreen_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_PcoLive) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_AlternateFill) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_VisibilityLink_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_SlideText_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_StageMessage_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_VideoCountdown_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_SlideImage_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_CcliText) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_GroupName_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_GroupColor_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_PresentationNotes_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_PlaylistItem_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_AutoAdvanceTimeRemaining_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_CaptureStatusText_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_CaptureStatusColor_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_SlideCount_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_AudioCountdown_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_Presentation_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_Slide_Label_Text) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_Slide_Label_Color) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_RssFeed) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_FileFeed_) isSlide_Element_DataLink_PropertyType() {}

func (*Slide_Element_DataLink_ChordProChart_) isSlide_Element_DataLink_PropertyType() {}

type Slide_Element_TextScroller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldScroll       bool                                 `protobuf:"varint,1,opt,name=should_scroll,json=shouldScroll,proto3" json:"should_scroll,omitempty"`
	ScrollRate         float64                              `protobuf:"fixed64,2,opt,name=scroll_rate,json=scrollRate,proto3" json:"scroll_rate,omitempty"`
	ShouldRepeat       bool                                 `protobuf:"varint,3,opt,name=should_repeat,json=shouldRepeat,proto3" json:"should_repeat,omitempty"`
	RepeatDistance     float64                              `protobuf:"fixed64,4,opt,name=repeat_distance,json=repeatDistance,proto3" json:"repeat_distance,omitempty"`
	ScrollingDirection Slide_Element_TextScroller_Direction `protobuf:"varint,5,opt,name=scrolling_direction,json=scrollingDirection,proto3,enum=rv.data.Slide_Element_TextScroller_Direction" json:"scrolling_direction,omitempty"`
	StartsOffScreen    bool                                 `protobuf:"varint,6,opt,name=starts_off_screen,json=startsOffScreen,proto3" json:"starts_off_screen,omitempty"`
	FadeLeft           float64                              `protobuf:"fixed64,7,opt,name=fade_left,json=fadeLeft,proto3" json:"fade_left,omitempty"`
	FadeRight          float64                              `protobuf:"fixed64,8,opt,name=fade_right,json=fadeRight,proto3" json:"fade_right,omitempty"`
}

func (x *Slide_Element_TextScroller) Reset() {
	*x = Slide_Element_TextScroller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_TextScroller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_TextScroller) ProtoMessage() {}

func (x *Slide_Element_TextScroller) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_TextScroller.ProtoReflect.Descriptor instead.
func (*Slide_Element_TextScroller) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Slide_Element_TextScroller) GetShouldScroll() bool {
	if x != nil {
		return x.ShouldScroll
	}
	return false
}

func (x *Slide_Element_TextScroller) GetScrollRate() float64 {
	if x != nil {
		return x.ScrollRate
	}
	return 0
}

func (x *Slide_Element_TextScroller) GetShouldRepeat() bool {
	if x != nil {
		return x.ShouldRepeat
	}
	return false
}

func (x *Slide_Element_TextScroller) GetRepeatDistance() float64 {
	if x != nil {
		return x.RepeatDistance
	}
	return 0
}

func (x *Slide_Element_TextScroller) GetScrollingDirection() Slide_Element_TextScroller_Direction {
	if x != nil {
		return x.ScrollingDirection
	}
	return Slide_Element_TextScroller_DIRECTION_LEFT
}

func (x *Slide_Element_TextScroller) GetStartsOffScreen() bool {
	if x != nil {
		return x.StartsOffScreen
	}
	return false
}

func (x *Slide_Element_TextScroller) GetFadeLeft() float64 {
	if x != nil {
		return x.FadeLeft
	}
	return 0
}

func (x *Slide_Element_TextScroller) GetFadeRight() float64 {
	if x != nil {
		return x.FadeRight
	}
	return 0
}

type Slide_Element_DataLink_RSSFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           *URL                                       `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Content       Slide_Element_DataLink_RSSFeed_ContentType `protobuf:"varint,2,opt,name=content,proto3,enum=rv.data.Slide_Element_DataLink_RSSFeed_ContentType" json:"content,omitempty"`
	TextDelimiter string                                     `protobuf:"bytes,3,opt,name=text_delimiter,json=textDelimiter,proto3" json:"text_delimiter,omitempty"`
}

func (x *Slide_Element_DataLink_RSSFeed) Reset() {
	*x = Slide_Element_DataLink_RSSFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_RSSFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_RSSFeed) ProtoMessage() {}

func (x *Slide_Element_DataLink_RSSFeed) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_RSSFeed.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_RSSFeed) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *Slide_Element_DataLink_RSSFeed) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Slide_Element_DataLink_RSSFeed) GetContent() Slide_Element_DataLink_RSSFeed_ContentType {
	if x != nil {
		return x.Content
	}
	return Slide_Element_DataLink_RSSFeed_CONTENT_TYPE_TITLE_ONLY
}

func (x *Slide_Element_DataLink_RSSFeed) GetTextDelimiter() string {
	if x != nil {
		return x.TextDelimiter
	}
	return ""
}

type Slide_Element_DataLink_FileFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *URL `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Slide_Element_DataLink_FileFeed) Reset() {
	*x = Slide_Element_DataLink_FileFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_FileFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_FileFeed) ProtoMessage() {}

func (x *Slide_Element_DataLink_FileFeed) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_FileFeed.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_FileFeed) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *Slide_Element_DataLink_FileFeed) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

type Slide_Element_DataLink_Ticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayRate      float64 `protobuf:"fixed64,4,opt,name=play_rate,json=playRate,proto3" json:"play_rate,omitempty"`
	ShouldLoop    bool    `protobuf:"varint,5,opt,name=should_loop,json=shouldLoop,proto3" json:"should_loop,omitempty"`
	LoopDelay     float64 `protobuf:"fixed64,6,opt,name=loop_delay,json=loopDelay,proto3" json:"loop_delay,omitempty"`
	TextDelimiter string  `protobuf:"bytes,7,opt,name=text_delimiter,json=textDelimiter,proto3" json:"text_delimiter,omitempty"`
	// Types that are assignable to SourceType:
	//	*Slide_Element_DataLink_Ticker_TextType_
	//	*Slide_Element_DataLink_Ticker_RssType
	//	*Slide_Element_DataLink_Ticker_FileType_
	SourceType isSlide_Element_DataLink_Ticker_SourceType `protobuf_oneof:"SourceType"`
}

func (x *Slide_Element_DataLink_Ticker) Reset() {
	*x = Slide_Element_DataLink_Ticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_Ticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_Ticker) ProtoMessage() {}

func (x *Slide_Element_DataLink_Ticker) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_Ticker.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_Ticker) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 2}
}

func (x *Slide_Element_DataLink_Ticker) GetPlayRate() float64 {
	if x != nil {
		return x.PlayRate
	}
	return 0
}

func (x *Slide_Element_DataLink_Ticker) GetShouldLoop() bool {
	if x != nil {
		return x.ShouldLoop
	}
	return false
}

func (x *Slide_Element_DataLink_Ticker) GetLoopDelay() float64 {
	if x != nil {
		return x.LoopDelay
	}
	return 0
}

func (x *Slide_Element_DataLink_Ticker) GetTextDelimiter() string {
	if x != nil {
		return x.TextDelimiter
	}
	return ""
}

func (m *Slide_Element_DataLink_Ticker) GetSourceType() isSlide_Element_DataLink_Ticker_SourceType {
	if m != nil {
		return m.SourceType
	}
	return nil
}

func (x *Slide_Element_DataLink_Ticker) GetTextType() *Slide_Element_DataLink_Ticker_TextType {
	if x, ok := x.GetSourceType().(*Slide_Element_DataLink_Ticker_TextType_); ok {
		return x.TextType
	}
	return nil
}

func (x *Slide_Element_DataLink_Ticker) GetRssType() *Slide_Element_DataLink_Ticker_RSSType {
	if x, ok := x.GetSourceType().(*Slide_Element_DataLink_Ticker_RssType); ok {
		return x.RssType
	}
	return nil
}

func (x *Slide_Element_DataLink_Ticker) GetFileType() *Slide_Element_DataLink_Ticker_FileType {
	if x, ok := x.GetSourceType().(*Slide_Element_DataLink_Ticker_FileType_); ok {
		return x.FileType
	}
	return nil
}

type isSlide_Element_DataLink_Ticker_SourceType interface {
	isSlide_Element_DataLink_Ticker_SourceType()
}

type Slide_Element_DataLink_Ticker_TextType_ struct {
	TextType *Slide_Element_DataLink_Ticker_TextType `protobuf:"bytes,1,opt,name=text_type,json=textType,proto3,oneof"`
}

type Slide_Element_DataLink_Ticker_RssType struct {
	RssType *Slide_Element_DataLink_Ticker_RSSType `protobuf:"bytes,2,opt,name=rss_type,json=rssType,proto3,oneof"`
}

type Slide_Element_DataLink_Ticker_FileType_ struct {
	FileType *Slide_Element_DataLink_Ticker_FileType `protobuf:"bytes,3,opt,name=file_type,json=fileType,proto3,oneof"`
}

func (*Slide_Element_DataLink_Ticker_TextType_) isSlide_Element_DataLink_Ticker_SourceType() {}

func (*Slide_Element_DataLink_Ticker_RssType) isSlide_Element_DataLink_Ticker_SourceType() {}

func (*Slide_Element_DataLink_Ticker_FileType_) isSlide_Element_DataLink_Ticker_SourceType() {}

type Slide_Element_DataLink_AlternateElementText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherElementUuid     *UUID                                                           `protobuf:"bytes,1,opt,name=other_element_uuid,json=otherElementUuid,proto3" json:"other_element_uuid,omitempty"`
	OtherElementName     string                                                          `protobuf:"bytes,2,opt,name=other_element_name,json=otherElementName,proto3" json:"other_element_name,omitempty"`
	TextTransformOptions uint32                                                          `protobuf:"varint,3,opt,name=text_transform_options,json=textTransformOptions,proto3" json:"text_transform_options,omitempty"`
	TextTransform        Slide_Element_DataLink_AlternateElementText_TextTransformOption `protobuf:"varint,4,opt,name=text_transform,json=textTransform,proto3,enum=rv.data.Slide_Element_DataLink_AlternateElementText_TextTransformOption" json:"text_transform,omitempty"`
}

func (x *Slide_Element_DataLink_AlternateElementText) Reset() {
	*x = Slide_Element_DataLink_AlternateElementText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_AlternateElementText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_AlternateElementText) ProtoMessage() {}

func (x *Slide_Element_DataLink_AlternateElementText) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_AlternateElementText.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_AlternateElementText) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 3}
}

func (x *Slide_Element_DataLink_AlternateElementText) GetOtherElementUuid() *UUID {
	if x != nil {
		return x.OtherElementUuid
	}
	return nil
}

func (x *Slide_Element_DataLink_AlternateElementText) GetOtherElementName() string {
	if x != nil {
		return x.OtherElementName
	}
	return ""
}

func (x *Slide_Element_DataLink_AlternateElementText) GetTextTransformOptions() uint32 {
	if x != nil {
		return x.TextTransformOptions
	}
	return 0
}

func (x *Slide_Element_DataLink_AlternateElementText) GetTextTransform() Slide_Element_DataLink_AlternateElementText_TextTransformOption {
	if x != nil {
		return x.TextTransform
	}
	return Slide_Element_DataLink_AlternateElementText_TEXT_TRANSFORM_OPTION_NONE
}

type Slide_Element_DataLink_CCLIText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Slide_Element_DataLink_CCLIText) Reset() {
	*x = Slide_Element_DataLink_CCLIText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_CCLIText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_CCLIText) ProtoMessage() {}

func (x *Slide_Element_DataLink_CCLIText) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_CCLIText.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_CCLIText) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 4}
}

type Slide_Element_DataLink_ColorTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  float64 `protobuf:"fixed64,1,opt,name=time,proto3" json:"time,omitempty"`
	Color *Color  `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Slide_Element_DataLink_ColorTrigger) Reset() {
	*x = Slide_Element_DataLink_ColorTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_ColorTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_ColorTrigger) ProtoMessage() {}

func (x *Slide_Element_DataLink_ColorTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_ColorTrigger.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_ColorTrigger) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 5}
}

func (x *Slide_Element_DataLink_ColorTrigger) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Slide_Element_DataLink_ColorTrigger) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type Slide_Element_DataLink_TimerText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimerUuid         *UUID                                  `protobuf:"bytes,1,opt,name=timer_uuid,json=timerUuid,proto3" json:"timer_uuid,omitempty"`
	TimerName         string                                 `protobuf:"bytes,2,opt,name=timer_name,json=timerName,proto3" json:"timer_name,omitempty"`
	TimerFormat       *Timer_Format                          `protobuf:"bytes,3,opt,name=timer_format,json=timerFormat,proto3" json:"timer_format,omitempty"`
	TimerFormatString string                                 `protobuf:"bytes,4,opt,name=timer_format_string,json=timerFormatString,proto3" json:"timer_format_string,omitempty"`
	ColorTriggers     []*Slide_Element_DataLink_ColorTrigger `protobuf:"bytes,5,rep,name=color_triggers,json=colorTriggers,proto3" json:"color_triggers,omitempty"`
}

func (x *Slide_Element_DataLink_TimerText) Reset() {
	*x = Slide_Element_DataLink_TimerText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_TimerText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_TimerText) ProtoMessage() {}

func (x *Slide_Element_DataLink_TimerText) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_TimerText.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_TimerText) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 6}
}

func (x *Slide_Element_DataLink_TimerText) GetTimerUuid() *UUID {
	if x != nil {
		return x.TimerUuid
	}
	return nil
}

func (x *Slide_Element_DataLink_TimerText) GetTimerName() string {
	if x != nil {
		return x.TimerName
	}
	return ""
}

func (x *Slide_Element_DataLink_TimerText) GetTimerFormat() *Timer_Format {
	if x != nil {
		return x.TimerFormat
	}
	return nil
}

func (x *Slide_Element_DataLink_TimerText) GetTimerFormatString() string {
	if x != nil {
		return x.TimerFormatString
	}
	return ""
}

func (x *Slide_Element_DataLink_TimerText) GetColorTriggers() []*Slide_Element_DataLink_ColorTrigger {
	if x != nil {
		return x.ColorTriggers
	}
	return nil
}

type Slide_Element_DataLink_ClockText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClockFormatString string        `protobuf:"bytes,1,opt,name=clock_format_string,json=clockFormatString,proto3" json:"clock_format_string,omitempty"`
	Format            *Clock_Format `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Slide_Element_DataLink_ClockText) Reset() {
	*x = Slide_Element_DataLink_ClockText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_ClockText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_ClockText) ProtoMessage() {}

func (x *Slide_Element_DataLink_ClockText) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_ClockText.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_ClockText) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 7}
}

func (x *Slide_Element_DataLink_ClockText) GetClockFormatString() string {
	if x != nil {
		return x.ClockFormatString
	}
	return ""
}

func (x *Slide_Element_DataLink_ClockText) GetFormat() *Clock_Format {
	if x != nil {
		return x.Format
	}
	return nil
}

type Slide_Element_DataLink_ChordChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Slide_Element_DataLink_ChordChart) Reset() {
	*x = Slide_Element_DataLink_ChordChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_ChordChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_ChordChart) ProtoMessage() {}

func (x *Slide_Element_DataLink_ChordChart) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_ChordChart.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_ChordChart) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 8}
}

type Slide_Element_DataLink_OutputScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenId   *UUID  `protobuf:"bytes,1,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
	ScreenName string `protobuf:"bytes,2,opt,name=screen_name,json=screenName,proto3" json:"screen_name,omitempty"`
}

func (x *Slide_Element_DataLink_OutputScreen) Reset() {
	*x = Slide_Element_DataLink_OutputScreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_OutputScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_OutputScreen) ProtoMessage() {}

func (x *Slide_Element_DataLink_OutputScreen) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_OutputScreen.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_OutputScreen) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 9}
}

func (x *Slide_Element_DataLink_OutputScreen) GetScreenId() *UUID {
	if x != nil {
		return x.ScreenId
	}
	return nil
}

func (x *Slide_Element_DataLink_OutputScreen) GetScreenName() string {
	if x != nil {
		return x.ScreenName
	}
	return ""
}

type Slide_Element_DataLink_PCOLive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theme         Slide_Element_DataLink_PCOLive_Theme         `protobuf:"varint,2,opt,name=theme,proto3,enum=rv.data.Slide_Element_DataLink_PCOLive_Theme" json:"theme,omitempty"`
	CountdownType Slide_Element_DataLink_PCOLive_CountdownType `protobuf:"varint,3,opt,name=countdown_type,json=countdownType,proto3,enum=rv.data.Slide_Element_DataLink_PCOLive_CountdownType" json:"countdown_type,omitempty"`
}

func (x *Slide_Element_DataLink_PCOLive) Reset() {
	*x = Slide_Element_DataLink_PCOLive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_PCOLive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_PCOLive) ProtoMessage() {}

func (x *Slide_Element_DataLink_PCOLive) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_PCOLive.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_PCOLive) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 10}
}

func (x *Slide_Element_DataLink_PCOLive) GetTheme() Slide_Element_DataLink_PCOLive_Theme {
	if x != nil {
		return x.Theme
	}
	return Slide_Element_DataLink_PCOLive_PCOLIVE_THEME_LIGHT
}

func (x *Slide_Element_DataLink_PCOLive) GetCountdownType() Slide_Element_DataLink_PCOLive_CountdownType {
	if x != nil {
		return x.CountdownType
	}
	return Slide_Element_DataLink_PCOLive_COUNTDOWN_TYPE_FULL_ITEM_LENGTH
}

type Slide_Element_DataLink_AlternateElementFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherElementUuid *UUID  `protobuf:"bytes,1,opt,name=other_element_uuid,json=otherElementUuid,proto3" json:"other_element_uuid,omitempty"`
	OtherElementName string `protobuf:"bytes,2,opt,name=other_element_name,json=otherElementName,proto3" json:"other_element_name,omitempty"`
}

func (x *Slide_Element_DataLink_AlternateElementFill) Reset() {
	*x = Slide_Element_DataLink_AlternateElementFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_AlternateElementFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_AlternateElementFill) ProtoMessage() {}

func (x *Slide_Element_DataLink_AlternateElementFill) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_AlternateElementFill.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_AlternateElementFill) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 11}
}

func (x *Slide_Element_DataLink_AlternateElementFill) GetOtherElementUuid() *UUID {
	if x != nil {
		return x.OtherElementUuid
	}
	return nil
}

func (x *Slide_Element_DataLink_AlternateElementFill) GetOtherElementName() string {
	if x != nil {
		return x.OtherElementName
	}
	return ""
}

type Slide_Element_DataLink_VisibilityLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisibilityCriterion Slide_Element_DataLink_VisibilityLink_VisibilityCriterion `protobuf:"varint,1,opt,name=visibility_criterion,json=visibilityCriterion,proto3,enum=rv.data.Slide_Element_DataLink_VisibilityLink_VisibilityCriterion" json:"visibility_criterion,omitempty"`
	Conditions          []*Slide_Element_DataLink_VisibilityLink_Condition        `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *Slide_Element_DataLink_VisibilityLink) Reset() {
	*x = Slide_Element_DataLink_VisibilityLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_VisibilityLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_VisibilityLink) ProtoMessage() {}

func (x *Slide_Element_DataLink_VisibilityLink) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_VisibilityLink) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12}
}

func (x *Slide_Element_DataLink_VisibilityLink) GetVisibilityCriterion() Slide_Element_DataLink_VisibilityLink_VisibilityCriterion {
	if x != nil {
		return x.VisibilityCriterion
	}
	return Slide_Element_DataLink_VisibilityLink_VISIBILITY_CRITERION_ALL
}

func (x *Slide_Element_DataLink_VisibilityLink) GetConditions() []*Slide_Element_DataLink_VisibilityLink_Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type Slide_Element_DataLink_SlideText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSlide          Slide_Element_DataLink_SlideText_SlideSourceType     `protobuf:"varint,1,opt,name=source_slide,json=sourceSlide,proto3,enum=rv.data.Slide_Element_DataLink_SlideText_SlideSourceType" json:"source_slide,omitempty"`
	SourceOption         Slide_Element_DataLink_SlideText_TextSourceOption    `protobuf:"varint,2,opt,name=source_option,json=sourceOption,proto3,enum=rv.data.Slide_Element_DataLink_SlideText_TextSourceOption" json:"source_option,omitempty"`
	PreserveNotesFormat  bool                                                 `protobuf:"varint,3,opt,name=preserve_notes_format,json=preserveNotesFormat,proto3" json:"preserve_notes_format,omitempty"`
	NameToMatch          string                                               `protobuf:"bytes,4,opt,name=name_to_match,json=nameToMatch,proto3" json:"name_to_match,omitempty"`
	ElementTextTransform Slide_Element_DataLink_SlideText_TextTransformOption `protobuf:"varint,5,opt,name=element_text_transform,json=elementTextTransform,proto3,enum=rv.data.Slide_Element_DataLink_SlideText_TextTransformOption" json:"element_text_transform,omitempty"`
}

func (x *Slide_Element_DataLink_SlideText) Reset() {
	*x = Slide_Element_DataLink_SlideText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_SlideText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_SlideText) ProtoMessage() {}

func (x *Slide_Element_DataLink_SlideText) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideText.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_SlideText) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 13}
}

func (x *Slide_Element_DataLink_SlideText) GetSourceSlide() Slide_Element_DataLink_SlideText_SlideSourceType {
	if x != nil {
		return x.SourceSlide
	}
	return Slide_Element_DataLink_SlideText_SLIDE_SOURCE_TYPE_CURRENT_SLIDE
}

func (x *Slide_Element_DataLink_SlideText) GetSourceOption() Slide_Element_DataLink_SlideText_TextSourceOption {
	if x != nil {
		return x.SourceOption
	}
	return Slide_Element_DataLink_SlideText_TEXT_SOURCE_OPTION_TEXT
}

func (x *Slide_Element_DataLink_SlideText) GetPreserveNotesFormat() bool {
	if x != nil {
		return x.PreserveNotesFormat
	}
	return false
}

func (x *Slide_Element_DataLink_SlideText) GetNameToMatch() string {
	if x != nil {
		return x.NameToMatch
	}
	return ""
}

func (x *Slide_Element_DataLink_SlideText) GetElementTextTransform() Slide_Element_DataLink_SlideText_TextTransformOption {
	if x != nil {
		return x.ElementTextTransform
	}
	return Slide_Element_DataLink_SlideText_TEXT_TRANSFORM_OPTION_NONE
}

type Slide_Element_DataLink_SlideImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSlide Slide_Element_DataLink_SlideImage_SlideSourceType `protobuf:"varint,1,opt,name=source_slide,json=sourceSlide,proto3,enum=rv.data.Slide_Element_DataLink_SlideImage_SlideSourceType" json:"source_slide,omitempty"`
}

func (x *Slide_Element_DataLink_SlideImage) Reset() {
	*x = Slide_Element_DataLink_SlideImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_SlideImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_SlideImage) ProtoMessage() {}

func (x *Slide_Element_DataLink_SlideImage) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideImage.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_SlideImage) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 14}
}

func (x *Slide_Element_DataLink_SlideImage) GetSourceSlide() Slide_Element_DataLink_SlideImage_SlideSourceType {
	if x != nil {
		return x.SourceSlide
	}
	return Slide_Element_DataLink_SlideImage_SLIDE_SOURCE_TYPE_CURRENT_SLIDE
}

type Slide_Element_DataLink_StageMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldFlash bool   `protobuf:"varint,1,opt,name=should_flash,json=shouldFlash,proto3" json:"should_flash,omitempty"`
	FlashColor  *Color `protobuf:"bytes,2,opt,name=flash_color,json=flashColor,proto3" json:"flash_color,omitempty"`
}

func (x *Slide_Element_DataLink_StageMessage) Reset() {
	*x = Slide_Element_DataLink_StageMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_StageMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_StageMessage) ProtoMessage() {}

func (x *Slide_Element_DataLink_StageMessage) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_StageMessage.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_StageMessage) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 15}
}

func (x *Slide_Element_DataLink_StageMessage) GetShouldFlash() bool {
	if x != nil {
		return x.ShouldFlash
	}
	return false
}

func (x *Slide_Element_DataLink_StageMessage) GetFlashColor() *Color {
	if x != nil {
		return x.FlashColor
	}
	return nil
}

type Slide_Element_DataLink_VideoCountdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimerFormat          *Timer_Format                                              `protobuf:"bytes,1,opt,name=timer_format,json=timerFormat,proto3" json:"timer_format,omitempty"`
	TimerFormatString    string                                                     `protobuf:"bytes,2,opt,name=timer_format_string,json=timerFormatString,proto3" json:"timer_format_string,omitempty"`
	ColorTriggers        []*Slide_Element_DataLink_ColorTrigger                     `protobuf:"bytes,3,rep,name=color_triggers,json=colorTriggers,proto3" json:"color_triggers,omitempty"`
	IgnoreLoopingVideos  bool                                                       `protobuf:"varint,4,opt,name=ignore_looping_videos,json=ignoreLoopingVideos,proto3" json:"ignore_looping_videos,omitempty"`
	VideoCountdownSource Slide_Element_DataLink_VideoCountdown_VideoCountdownSource `protobuf:"varint,5,opt,name=video_countdown_source,json=videoCountdownSource,proto3,enum=rv.data.Slide_Element_DataLink_VideoCountdown_VideoCountdownSource" json:"video_countdown_source,omitempty"`
}

func (x *Slide_Element_DataLink_VideoCountdown) Reset() {
	*x = Slide_Element_DataLink_VideoCountdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_VideoCountdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_VideoCountdown) ProtoMessage() {}

func (x *Slide_Element_DataLink_VideoCountdown) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_VideoCountdown.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_VideoCountdown) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 16}
}

func (x *Slide_Element_DataLink_VideoCountdown) GetTimerFormat() *Timer_Format {
	if x != nil {
		return x.TimerFormat
	}
	return nil
}

func (x *Slide_Element_DataLink_VideoCountdown) GetTimerFormatString() string {
	if x != nil {
		return x.TimerFormatString
	}
	return ""
}

func (x *Slide_Element_DataLink_VideoCountdown) GetColorTriggers() []*Slide_Element_DataLink_ColorTrigger {
	if x != nil {
		return x.ColorTriggers
	}
	return nil
}

func (x *Slide_Element_DataLink_VideoCountdown) GetIgnoreLoopingVideos() bool {
	if x != nil {
		return x.IgnoreLoopingVideos
	}
	return false
}

func (x *Slide_Element_DataLink_VideoCountdown) GetVideoCountdownSource() Slide_Element_DataLink_VideoCountdown_VideoCountdownSource {
	if x != nil {
		return x.VideoCountdownSource
	}
	return Slide_Element_DataLink_VideoCountdown_VIDEO_COUNTDOWN_SOURCE_PRESENTATION
}

type Slide_Element_DataLink_AudioCountdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimerFormat        *Timer_Format                          `protobuf:"bytes,1,opt,name=timer_format,json=timerFormat,proto3" json:"timer_format,omitempty"`
	TimerFormatString  string                                 `protobuf:"bytes,2,opt,name=timer_format_string,json=timerFormatString,proto3" json:"timer_format_string,omitempty"`
	ColorTriggers      []*Slide_Element_DataLink_ColorTrigger `protobuf:"bytes,3,rep,name=color_triggers,json=colorTriggers,proto3" json:"color_triggers,omitempty"`
	IgnoreLoopingAudio bool                                   `protobuf:"varint,4,opt,name=ignore_looping_audio,json=ignoreLoopingAudio,proto3" json:"ignore_looping_audio,omitempty"`
}

func (x *Slide_Element_DataLink_AudioCountdown) Reset() {
	*x = Slide_Element_DataLink_AudioCountdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_AudioCountdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_AudioCountdown) ProtoMessage() {}

func (x *Slide_Element_DataLink_AudioCountdown) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_AudioCountdown.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_AudioCountdown) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 17}
}

func (x *Slide_Element_DataLink_AudioCountdown) GetTimerFormat() *Timer_Format {
	if x != nil {
		return x.TimerFormat
	}
	return nil
}

func (x *Slide_Element_DataLink_AudioCountdown) GetTimerFormatString() string {
	if x != nil {
		return x.TimerFormatString
	}
	return ""
}

func (x *Slide_Element_DataLink_AudioCountdown) GetColorTriggers() []*Slide_Element_DataLink_ColorTrigger {
	if x != nil {
		return x.ColorTriggers
	}
	return nil
}

func (x *Slide_Element_DataLink_AudioCountdown) GetIgnoreLoopingAudio() bool {
	if x != nil {
		return x.IgnoreLoopingAudio
	}
	return false
}

type Slide_Element_DataLink_GroupName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupSource Slide_Element_DataLink_GroupName_GroupSourceType `protobuf:"varint,1,opt,name=groupSource,proto3,enum=rv.data.Slide_Element_DataLink_GroupName_GroupSourceType" json:"groupSource,omitempty"`
}

func (x *Slide_Element_DataLink_GroupName) Reset() {
	*x = Slide_Element_DataLink_GroupName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_GroupName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_GroupName) ProtoMessage() {}

func (x *Slide_Element_DataLink_GroupName) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_GroupName.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_GroupName) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 18}
}

func (x *Slide_Element_DataLink_GroupName) GetGroupSource() Slide_Element_DataLink_GroupName_GroupSourceType {
	if x != nil {
		return x.GroupSource
	}
	return Slide_Element_DataLink_GroupName_GROUP_SOURCE_TYPE_CURRENT_SLIDE
}

type Slide_Element_DataLink_GroupColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupSource Slide_Element_DataLink_GroupColor_GroupSourceType `protobuf:"varint,1,opt,name=groupSource,proto3,enum=rv.data.Slide_Element_DataLink_GroupColor_GroupSourceType" json:"groupSource,omitempty"`
}

func (x *Slide_Element_DataLink_GroupColor) Reset() {
	*x = Slide_Element_DataLink_GroupColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_GroupColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_GroupColor) ProtoMessage() {}

func (x *Slide_Element_DataLink_GroupColor) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_GroupColor.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_GroupColor) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 19}
}

func (x *Slide_Element_DataLink_GroupColor) GetGroupSource() Slide_Element_DataLink_GroupColor_GroupSourceType {
	if x != nil {
		return x.GroupSource
	}
	return Slide_Element_DataLink_GroupColor_GROUP_SOURCE_TYPE_CURRENT_SLIDE
}

type Slide_Element_DataLink_SlideLabelText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideLabelSource Slide_Element_DataLink_SlideLabelText_SlideLabelSource `protobuf:"varint,1,opt,name=slide_label_source,json=slideLabelSource,proto3,enum=rv.data.Slide_Element_DataLink_SlideLabelText_SlideLabelSource" json:"slide_label_source,omitempty"`
}

func (x *Slide_Element_DataLink_SlideLabelText) Reset() {
	*x = Slide_Element_DataLink_SlideLabelText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_SlideLabelText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_SlideLabelText) ProtoMessage() {}

func (x *Slide_Element_DataLink_SlideLabelText) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideLabelText.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_SlideLabelText) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 20}
}

func (x *Slide_Element_DataLink_SlideLabelText) GetSlideLabelSource() Slide_Element_DataLink_SlideLabelText_SlideLabelSource {
	if x != nil {
		return x.SlideLabelSource
	}
	return Slide_Element_DataLink_SlideLabelText_SLIDE_LABEL_SOURCE_CURRENT_SLIDE
}

type Slide_Element_DataLink_SlideLabelColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideLabelSource Slide_Element_DataLink_SlideLabelColor_SlideLabelSource `protobuf:"varint,1,opt,name=slide_label_source,json=slideLabelSource,proto3,enum=rv.data.Slide_Element_DataLink_SlideLabelColor_SlideLabelSource" json:"slide_label_source,omitempty"`
}

func (x *Slide_Element_DataLink_SlideLabelColor) Reset() {
	*x = Slide_Element_DataLink_SlideLabelColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_SlideLabelColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_SlideLabelColor) ProtoMessage() {}

func (x *Slide_Element_DataLink_SlideLabelColor) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideLabelColor.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_SlideLabelColor) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 21}
}

func (x *Slide_Element_DataLink_SlideLabelColor) GetSlideLabelSource() Slide_Element_DataLink_SlideLabelColor_SlideLabelSource {
	if x != nil {
		return x.SlideLabelSource
	}
	return Slide_Element_DataLink_SlideLabelColor_SLIDE_LABEL_SOURCE_CURRENT_SLIDE
}

type Slide_Element_DataLink_PresentationNotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Slide_Element_DataLink_PresentationNotes) Reset() {
	*x = Slide_Element_DataLink_PresentationNotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_PresentationNotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_PresentationNotes) ProtoMessage() {}

func (x *Slide_Element_DataLink_PresentationNotes) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_PresentationNotes.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_PresentationNotes) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 22}
}

type Slide_Element_DataLink_Presentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresentationSource Slide_Element_DataLink_Presentation_PresentationSource `protobuf:"varint,1,opt,name=presentation_source,json=presentationSource,proto3,enum=rv.data.Slide_Element_DataLink_Presentation_PresentationSource" json:"presentation_source,omitempty"`
}

func (x *Slide_Element_DataLink_Presentation) Reset() {
	*x = Slide_Element_DataLink_Presentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_Presentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_Presentation) ProtoMessage() {}

func (x *Slide_Element_DataLink_Presentation) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_Presentation.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_Presentation) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 23}
}

func (x *Slide_Element_DataLink_Presentation) GetPresentationSource() Slide_Element_DataLink_Presentation_PresentationSource {
	if x != nil {
		return x.PresentationSource
	}
	return Slide_Element_DataLink_Presentation_PRESENTATION_SOURCE_PRESENTATION
}

type Slide_Element_DataLink_PlaylistItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistItemSource Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType `protobuf:"varint,1,opt,name=playlistItemSource,proto3,enum=rv.data.Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType" json:"playlistItemSource,omitempty"`
	ShowArrangement    bool                                                       `protobuf:"varint,2,opt,name=showArrangement,proto3" json:"showArrangement,omitempty"`
}

func (x *Slide_Element_DataLink_PlaylistItem) Reset() {
	*x = Slide_Element_DataLink_PlaylistItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_PlaylistItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_PlaylistItem) ProtoMessage() {}

func (x *Slide_Element_DataLink_PlaylistItem) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_PlaylistItem.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_PlaylistItem) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 24}
}

func (x *Slide_Element_DataLink_PlaylistItem) GetPlaylistItemSource() Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType {
	if x != nil {
		return x.PlaylistItemSource
	}
	return Slide_Element_DataLink_PlaylistItem_PLAYLIST_ITEM_SOURCE_TYPE_CURRENT
}

func (x *Slide_Element_DataLink_PlaylistItem) GetShowArrangement() bool {
	if x != nil {
		return x.ShowArrangement
	}
	return false
}

type Slide_Element_DataLink_AutoAdvanceTimeRemaining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoAdvanceSource Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource `protobuf:"varint,1,opt,name=auto_advance_source,json=autoAdvanceSource,proto3,enum=rv.data.Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource" json:"auto_advance_source,omitempty"`
	TimerFormat       *Timer_Format                                                     `protobuf:"bytes,2,opt,name=timer_format,json=timerFormat,proto3" json:"timer_format,omitempty"`
}

func (x *Slide_Element_DataLink_AutoAdvanceTimeRemaining) Reset() {
	*x = Slide_Element_DataLink_AutoAdvanceTimeRemaining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_AutoAdvanceTimeRemaining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_AutoAdvanceTimeRemaining) ProtoMessage() {}

func (x *Slide_Element_DataLink_AutoAdvanceTimeRemaining) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_AutoAdvanceTimeRemaining.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_AutoAdvanceTimeRemaining) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 25}
}

func (x *Slide_Element_DataLink_AutoAdvanceTimeRemaining) GetAutoAdvanceSource() Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource {
	if x != nil {
		return x.AutoAdvanceSource
	}
	return Slide_Element_DataLink_AutoAdvanceTimeRemaining_AUTO_ADVANCE_SOURCE_PRESENTATION
}

func (x *Slide_Element_DataLink_AutoAdvanceTimeRemaining) GetTimerFormat() *Timer_Format {
	if x != nil {
		return x.TimerFormat
	}
	return nil
}

type Slide_Element_DataLink_CaptureStatusText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TextType:
	//	*Slide_Element_DataLink_CaptureStatusText_StatusText_
	//	*Slide_Element_DataLink_CaptureStatusText_ElapsedTime_
	TextType isSlide_Element_DataLink_CaptureStatusText_TextType `protobuf_oneof:"TextType"`
}

func (x *Slide_Element_DataLink_CaptureStatusText) Reset() {
	*x = Slide_Element_DataLink_CaptureStatusText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_CaptureStatusText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_CaptureStatusText) ProtoMessage() {}

func (x *Slide_Element_DataLink_CaptureStatusText) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_CaptureStatusText.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_CaptureStatusText) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 26}
}

func (m *Slide_Element_DataLink_CaptureStatusText) GetTextType() isSlide_Element_DataLink_CaptureStatusText_TextType {
	if m != nil {
		return m.TextType
	}
	return nil
}

func (x *Slide_Element_DataLink_CaptureStatusText) GetStatusText() *Slide_Element_DataLink_CaptureStatusText_StatusText {
	if x, ok := x.GetTextType().(*Slide_Element_DataLink_CaptureStatusText_StatusText_); ok {
		return x.StatusText
	}
	return nil
}

func (x *Slide_Element_DataLink_CaptureStatusText) GetElapsedTime() *Slide_Element_DataLink_CaptureStatusText_ElapsedTime {
	if x, ok := x.GetTextType().(*Slide_Element_DataLink_CaptureStatusText_ElapsedTime_); ok {
		return x.ElapsedTime
	}
	return nil
}

type isSlide_Element_DataLink_CaptureStatusText_TextType interface {
	isSlide_Element_DataLink_CaptureStatusText_TextType()
}

type Slide_Element_DataLink_CaptureStatusText_StatusText_ struct {
	StatusText *Slide_Element_DataLink_CaptureStatusText_StatusText `protobuf:"bytes,1,opt,name=status_text,json=statusText,proto3,oneof"`
}

type Slide_Element_DataLink_CaptureStatusText_ElapsedTime_ struct {
	ElapsedTime *Slide_Element_DataLink_CaptureStatusText_ElapsedTime `protobuf:"bytes,2,opt,name=elapsed_time,json=elapsedTime,proto3,oneof"`
}

func (*Slide_Element_DataLink_CaptureStatusText_StatusText_) isSlide_Element_DataLink_CaptureStatusText_TextType() {
}

func (*Slide_Element_DataLink_CaptureStatusText_ElapsedTime_) isSlide_Element_DataLink_CaptureStatusText_TextType() {
}

type Slide_Element_DataLink_CaptureStatusColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Slide_Element_DataLink_CaptureStatusColor) Reset() {
	*x = Slide_Element_DataLink_CaptureStatusColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_CaptureStatusColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_CaptureStatusColor) ProtoMessage() {}

func (x *Slide_Element_DataLink_CaptureStatusColor) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_CaptureStatusColor.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_CaptureStatusColor) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 27}
}

type Slide_Element_DataLink_SlideCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideCountSourceType Slide_Element_DataLink_SlideCount_SlideCountSourceType `protobuf:"varint,1,opt,name=slideCountSourceType,proto3,enum=rv.data.Slide_Element_DataLink_SlideCount_SlideCountSourceType" json:"slideCountSourceType,omitempty"`
}

func (x *Slide_Element_DataLink_SlideCount) Reset() {
	*x = Slide_Element_DataLink_SlideCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_SlideCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_SlideCount) ProtoMessage() {}

func (x *Slide_Element_DataLink_SlideCount) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_SlideCount.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_SlideCount) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 28}
}

func (x *Slide_Element_DataLink_SlideCount) GetSlideCountSourceType() Slide_Element_DataLink_SlideCount_SlideCountSourceType {
	if x != nil {
		return x.SlideCountSourceType
	}
	return Slide_Element_DataLink_SlideCount_SLIDE_COUNT_SOURCE_TYPE_CURRENT
}

type Slide_Element_DataLink_ChordProChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Slide_Element_DataLink_ChordProChart) Reset() {
	*x = Slide_Element_DataLink_ChordProChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_ChordProChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_ChordProChart) ProtoMessage() {}

func (x *Slide_Element_DataLink_ChordProChart) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_ChordProChart.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_ChordProChart) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 29}
}

type Slide_Element_DataLink_Ticker_TextType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Slide_Element_DataLink_Ticker_TextType) Reset() {
	*x = Slide_Element_DataLink_Ticker_TextType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_Ticker_TextType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_Ticker_TextType) ProtoMessage() {}

func (x *Slide_Element_DataLink_Ticker_TextType) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_Ticker_TextType.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_Ticker_TextType) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 2, 0}
}

func (x *Slide_Element_DataLink_Ticker_TextType) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Slide_Element_DataLink_Ticker_RSSType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     *URL                                              `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Content Slide_Element_DataLink_Ticker_RSSType_ContentType `protobuf:"varint,2,opt,name=content,proto3,enum=rv.data.Slide_Element_DataLink_Ticker_RSSType_ContentType" json:"content,omitempty"`
}

func (x *Slide_Element_DataLink_Ticker_RSSType) Reset() {
	*x = Slide_Element_DataLink_Ticker_RSSType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_Ticker_RSSType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_Ticker_RSSType) ProtoMessage() {}

func (x *Slide_Element_DataLink_Ticker_RSSType) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_Ticker_RSSType.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_Ticker_RSSType) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 2, 1}
}

func (x *Slide_Element_DataLink_Ticker_RSSType) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Slide_Element_DataLink_Ticker_RSSType) GetContent() Slide_Element_DataLink_Ticker_RSSType_ContentType {
	if x != nil {
		return x.Content
	}
	return Slide_Element_DataLink_Ticker_RSSType_CONTENT_TYPE_TITLE_ONLY
}

type Slide_Element_DataLink_Ticker_FileType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *URL `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Slide_Element_DataLink_Ticker_FileType) Reset() {
	*x = Slide_Element_DataLink_Ticker_FileType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_Ticker_FileType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_Ticker_FileType) ProtoMessage() {}

func (x *Slide_Element_DataLink_Ticker_FileType) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_Ticker_FileType.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_Ticker_FileType) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 2, 2}
}

func (x *Slide_Element_DataLink_Ticker_FileType) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

type Slide_Element_DataLink_VisibilityLink_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ConditionType:
	//	*Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_
	//	*Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_
	//	*Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_
	//	*Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_
	//	*Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_
	//	*Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_
	ConditionType isSlide_Element_DataLink_VisibilityLink_Condition_ConditionType `protobuf_oneof:"ConditionType"`
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition) Reset() {
	*x = Slide_Element_DataLink_VisibilityLink_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_VisibilityLink_Condition) ProtoMessage() {}

func (x *Slide_Element_DataLink_VisibilityLink_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_VisibilityLink_Condition) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0}
}

func (m *Slide_Element_DataLink_VisibilityLink_Condition) GetConditionType() isSlide_Element_DataLink_VisibilityLink_Condition_ConditionType {
	if m != nil {
		return m.ConditionType
	}
	return nil
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition) GetElementVisibility() *Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility {
	if x, ok := x.GetConditionType().(*Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_); ok {
		return x.ElementVisibility
	}
	return nil
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition) GetTimerVisibility() *Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility {
	if x, ok := x.GetConditionType().(*Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_); ok {
		return x.TimerVisibility
	}
	return nil
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition) GetVideoCountdownVisibility() *Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility {
	if x, ok := x.GetConditionType().(*Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_); ok {
		return x.VideoCountdownVisibility
	}
	return nil
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition) GetCaptureSessionVisibility() *Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility {
	if x, ok := x.GetConditionType().(*Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_); ok {
		return x.CaptureSessionVisibility
	}
	return nil
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition) GetVideoInputVisibility() *Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility {
	if x, ok := x.GetConditionType().(*Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_); ok {
		return x.VideoInputVisibility
	}
	return nil
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition) GetAudioCountdownVisibility() *Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility {
	if x, ok := x.GetConditionType().(*Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_); ok {
		return x.AudioCountdownVisibility
	}
	return nil
}

type isSlide_Element_DataLink_VisibilityLink_Condition_ConditionType interface {
	isSlide_Element_DataLink_VisibilityLink_Condition_ConditionType()
}

type Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ struct {
	ElementVisibility *Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility `protobuf:"bytes,1,opt,name=element_visibility,json=elementVisibility,proto3,oneof"`
}

type Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_ struct {
	TimerVisibility *Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility `protobuf:"bytes,2,opt,name=timer_visibility,json=timerVisibility,proto3,oneof"`
}

type Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_ struct {
	VideoCountdownVisibility *Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility `protobuf:"bytes,3,opt,name=video_countdown_visibility,json=videoCountdownVisibility,proto3,oneof"`
}

type Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_ struct {
	CaptureSessionVisibility *Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility `protobuf:"bytes,4,opt,name=capture_session_visibility,json=captureSessionVisibility,proto3,oneof"`
}

type Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_ struct {
	VideoInputVisibility *Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility `protobuf:"bytes,5,opt,name=video_input_visibility,json=videoInputVisibility,proto3,oneof"`
}

type Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_ struct {
	AudioCountdownVisibility *Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility `protobuf:"bytes,6,opt,name=audio_countdown_visibility,json=audioCountdownVisibility,proto3,oneof"`
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_) isSlide_Element_DataLink_VisibilityLink_Condition_ConditionType() {
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_) isSlide_Element_DataLink_VisibilityLink_Condition_ConditionType() {
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_) isSlide_Element_DataLink_VisibilityLink_Condition_ConditionType() {
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_) isSlide_Element_DataLink_VisibilityLink_Condition_ConditionType() {
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_) isSlide_Element_DataLink_VisibilityLink_Condition_ConditionType() {
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_) isSlide_Element_DataLink_VisibilityLink_Condition_ConditionType() {
}

type Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherElementUuid    *UUID                                                                                        `protobuf:"bytes,1,opt,name=other_element_uuid,json=otherElementUuid,proto3" json:"other_element_uuid,omitempty"`
	OtherElementName    string                                                                                       `protobuf:"bytes,2,opt,name=other_element_name,json=otherElementName,proto3" json:"other_element_name,omitempty"`
	VisibilityCriterion Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion `protobuf:"varint,3,opt,name=visibility_criterion,json=visibilityCriterion,proto3,enum=rv.data.Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion" json:"visibility_criterion,omitempty"`
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility) Reset() {
	*x = Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility) ProtoMessage() {}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 0}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility) GetOtherElementUuid() *UUID {
	if x != nil {
		return x.OtherElementUuid
	}
	return nil
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility) GetOtherElementName() string {
	if x != nil {
		return x.OtherElementName
	}
	return ""
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility) GetVisibilityCriterion() Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion {
	if x != nil {
		return x.VisibilityCriterion
	}
	return Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ELEMENT_VISIBILITY_CRITERION_HAS_TEXT
}

type Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimerUuid           *UUID                                                                                    `protobuf:"bytes,1,opt,name=timer_uuid,json=timerUuid,proto3" json:"timer_uuid,omitempty"`
	TimerName           string                                                                                   `protobuf:"bytes,2,opt,name=timer_name,json=timerName,proto3" json:"timer_name,omitempty"`
	VisibilityCriterion Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion `protobuf:"varint,3,opt,name=visibility_criterion,json=visibilityCriterion,proto3,enum=rv.data.Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion" json:"visibility_criterion,omitempty"`
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility) Reset() {
	*x = Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility) ProtoMessage() {}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 1}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility) GetTimerUuid() *UUID {
	if x != nil {
		return x.TimerUuid
	}
	return nil
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility) GetTimerName() string {
	if x != nil {
		return x.TimerName
	}
	return ""
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility) GetVisibilityCriterion() Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion {
	if x != nil {
		return x.VisibilityCriterion
	}
	return Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TIMER_VISIBILITY_CRITERION_HAS_TIME_REMAINING
}

type Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisibilityCriterion Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion `protobuf:"varint,1,opt,name=visibility_criterion,json=visibilityCriterion,proto3,enum=rv.data.Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion" json:"visibility_criterion,omitempty"`
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility) Reset() {
	*x = Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility) ProtoMessage() {}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 2}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility) GetVisibilityCriterion() Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion {
	if x != nil {
		return x.VisibilityCriterion
	}
	return Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VIDEO_COUNTDOWN_VISIBILITY_CRITERION_HAS_TIME_REMAINING
}

type Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisibilityCriterion Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion `protobuf:"varint,1,opt,name=visibility_criterion,json=visibilityCriterion,proto3,enum=rv.data.Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion" json:"visibility_criterion,omitempty"`
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility) Reset() {
	*x = Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility) ProtoMessage() {}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 3}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility) GetVisibilityCriterion() Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion {
	if x != nil {
		return x.VisibilityCriterion
	}
	return Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AUDIO_COUNTDOWN_VISIBILITY_CRITERION_HAS_TIME_REMAINING
}

type Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisibilityCriterion Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion `protobuf:"varint,1,opt,name=visibility_criterion,json=visibilityCriterion,proto3,enum=rv.data.Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion" json:"visibility_criterion,omitempty"`
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility) Reset() {
	*x = Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility) ProtoMessage() {}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 4}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility) GetVisibilityCriterion() Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion {
	if x != nil {
		return x.VisibilityCriterion
	}
	return Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CAPTURE_SESSION_VISIBILITY_CRITERION_ACTIVE
}

type Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoInputIndex     int32                                                                                              `protobuf:"varint,1,opt,name=video_input_index,json=videoInputIndex,proto3" json:"video_input_index,omitempty"`
	VisibilityCriterion Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion `protobuf:"varint,2,opt,name=visibility_criterion,json=visibilityCriterion,proto3,enum=rv.data.Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion" json:"visibility_criterion,omitempty"`
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility) Reset() {
	*x = Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility) ProtoMessage() {}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 12, 0, 5}
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility) GetVideoInputIndex() int32 {
	if x != nil {
		return x.VideoInputIndex
	}
	return 0
}

func (x *Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility) GetVisibilityCriterion() Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion {
	if x != nil {
		return x.VisibilityCriterion
	}
	return Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VIDEO_INPUT_VISIBILITY_CRITERION_ACTIVE
}

type Slide_Element_DataLink_CaptureStatusText_StatusText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Slide_Element_DataLink_CaptureStatusText_StatusText) Reset() {
	*x = Slide_Element_DataLink_CaptureStatusText_StatusText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_CaptureStatusText_StatusText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_CaptureStatusText_StatusText) ProtoMessage() {}

func (x *Slide_Element_DataLink_CaptureStatusText_StatusText) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_CaptureStatusText_StatusText.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_CaptureStatusText_StatusText) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 26, 0}
}

type Slide_Element_DataLink_CaptureStatusText_ElapsedTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimerFormat *Timer_Format `protobuf:"bytes,1,opt,name=timer_format,json=timerFormat,proto3" json:"timer_format,omitempty"`
}

func (x *Slide_Element_DataLink_CaptureStatusText_ElapsedTime) Reset() {
	*x = Slide_Element_DataLink_CaptureStatusText_ElapsedTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slide_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slide_Element_DataLink_CaptureStatusText_ElapsedTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slide_Element_DataLink_CaptureStatusText_ElapsedTime) ProtoMessage() {}

func (x *Slide_Element_DataLink_CaptureStatusText_ElapsedTime) ProtoReflect() protoreflect.Message {
	mi := &file_slide_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slide_Element_DataLink_CaptureStatusText_ElapsedTime.ProtoReflect.Descriptor instead.
func (*Slide_Element_DataLink_CaptureStatusText_ElapsedTime) Descriptor() ([]byte, []int) {
	return file_slide_proto_rawDescGZIP(), []int{0, 0, 2, 26, 1}
}

func (x *Slide_Element_DataLink_CaptureStatusText_ElapsedTime) GetTimerFormat() *Timer_Format {
	if x != nil {
		return x.TimerFormat
	}
	return nil
}

var File_slide_proto protoreflect.FileDescriptor

var file_slide_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x12, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x91, 0x78, 0x0a, 0x05, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a,
	0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x0a, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x72, 0x61, 0x77, 0x73, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x72, 0x61, 0x77, 0x73, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x10, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x1a, 0x9b, 0x75, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x12,
	0x39, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x46,
	0x0a, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x65,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x0b,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x46, 0x72,
	0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x53, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x1a, 0xce, 0x02, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f,
	0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45,
	0x10, 0x03, 0x1a, 0x88, 0x02, 0x0a, 0x0a, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x64, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49,
	0x43, 0x4b, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x10, 0x03, 0x1a, 0x80, 0x68,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0e,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x63, 0x6f, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x43, 0x4f, 0x4c, 0x69,
	0x76, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x63, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x5d, 0x0a,
	0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x0f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64,
	0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x6e, 0x6b, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x63, 0x6c, 0x69, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x43, 0x4c, 0x49, 0x54, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x63, 0x63, 0x6c, 0x69, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64,
	0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x6e, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x48,
	0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x79, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x13, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x66, 0x0a, 0x14, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x12, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48,
	0x00, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x52, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x10, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b,
	0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x5d, 0x0a, 0x11, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x44, 0x0a, 0x08, 0x72, 0x73, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x53, 0x53, 0x46, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x72,
	0x73, 0x73, 0x46, 0x65, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46,
	0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12,
	0x57, 0x0a, 0x0f, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x50,
	0x72, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x1a, 0xf3, 0x01, 0x0a, 0x07, 0x52, 0x53, 0x53,
	0x46, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x52, 0x4c, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x4d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x53, 0x53, 0x46, 0x65, 0x65, 0x64, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x2a,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0xa9, 0x05, 0x0a, 0x06, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4c,
	0x6f, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74,
	0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x72, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x52, 0x53, 0x53, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1e, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xd3, 0x01, 0x0a, 0x07, 0x52, 0x53, 0x53, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x54, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x53, 0x53, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x2a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x55, 0x52, 0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xee, 0x03, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x3b, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x65, 0x78, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x6f, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52,
	0x45, 0x54, 0x55, 0x52, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x4e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x1a, 0x0a, 0x0a, 0x08, 0x43, 0x43, 0x4c, 0x49, 0x54,
	0x65, 0x78, 0x74, 0x1a, 0x48, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x97, 0x02,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x1a, 0x6a, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x1a, 0x0c, 0x0a, 0x0a, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x1a, 0x5b, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x12, 0x2a, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xea,
	0x02, 0x0a, 0x07, 0x50, 0x43, 0x4f, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x43, 0x4f, 0x4c, 0x69,
	0x76, 0x65, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x5c, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x43, 0x4f, 0x4c, 0x69, 0x76, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a,
	0x05, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x43, 0x4f, 0x4c, 0x49, 0x56,
	0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x43, 0x4f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x44, 0x41, 0x52, 0x4b, 0x10, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x1a, 0x81, 0x01, 0x0a, 0x14,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x9f, 0x1e, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x75, 0x0a, 0x14, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e,
	0x6b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b,
	0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0xc9, 0x1b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x7b, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x75,
	0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x18, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x18, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x85, 0x01,
	0x0a, 0x16, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x18, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x90, 0x03, 0x0a, 0x11, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x3b, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x14, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x65, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x1a, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56,
	0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52,
	0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x2c,
	0x0a, 0x28, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x48,
	0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x1a, 0xc8, 0x03, 0x0a,
	0x0f, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x94, 0x01,
	0x0a, 0x14, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f,
	0x48, 0x41, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x49,
	0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49,
	0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x29, 0x0a, 0x25, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x54,
	0x49, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0xaf, 0x04, 0x0a, 0x18, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0xa6, 0x01, 0x0a, 0x14, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x73, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x02,
	0x0a, 0x21, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x37, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x34, 0x0a, 0x30, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44,
	0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x56,
	0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x30, 0x0a, 0x2c, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x34, 0x0a, 0x30, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4c, 0x4f, 0x4f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x1a, 0xaf, 0x04, 0x0a, 0x18, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xa6, 0x01, 0x0a, 0x14, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x73, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x22,
	0xe9, 0x02, 0x0a, 0x21, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x37, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41,
	0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x34, 0x0a,
	0x30, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4f, 0x50,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x1a, 0xcd, 0x02, 0x0a, 0x18,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xa6, 0x01, 0x0a, 0x14, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x73, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x22, 0x87, 0x01, 0x0a, 0x21, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x41, 0x50, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x41, 0x50, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0xe0, 0x02, 0x0a, 0x14,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x9e, 0x01, 0x0a, 0x14, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x6b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b,
	0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x22, 0x7b, 0x0a, 0x1d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12,
	0x2d, 0x0a, 0x29, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x56,
	0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x70, 0x0a, 0x13, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x59,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x1a, 0xb4, 0x06, 0x0a, 0x09, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x5c, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x12, 0x5f, 0x0a,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x65, 0x78, 0x74, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x54,
	0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x73, 0x0a, 0x16, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x58, 0x0a, 0x0f, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x44,
	0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x4c,
	0x49, 0x44, 0x45, 0x10, 0x01, 0x22, 0x7b, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x02, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x1a, 0xc5, 0x01, 0x0a, 0x0a, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x22, 0x58, 0x0a, 0x0f, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4c, 0x49,
	0x44, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x10, 0x01,
	0x1a, 0x62, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0xe8, 0x03, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x6f,
	0x70, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x79, 0x0a, 0x16, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x68, 0x0a, 0x14, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x23, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a,
	0x81, 0x02, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x0e,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x1a, 0xe4, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x7a,
	0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x4c, 0x49, 0x44, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x1a, 0xe6, 0x01, 0x0a, 0x0a, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x5c, 0x0a, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x7a, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x02, 0x1a, 0xdc, 0x01, 0x0a, 0x0e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x6d, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x65,
	0x78, 0x74, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x10, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4c, 0x49,
	0x44, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45,
	0x10, 0x01, 0x1a, 0xde, 0x01, 0x0a, 0x0f, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x6e, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x10, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4c,
	0x49, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x44,
	0x45, 0x10, 0x01, 0x1a, 0x13, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0xe2, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x12, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x9b, 0x03,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x73,
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x12, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x72, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x68,
	0x6f, 0x77, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xeb, 0x01,
	0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4c, 0x41, 0x59,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58,
	0x54, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29,
	0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x1a, 0xb1, 0x02, 0x0a, 0x18,
	0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x7a, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x5f,
	0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54,
	0x4f, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a,
	0xbb, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x62, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x2e,
	0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x0c, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x47, 0x0a, 0x0b, 0x45, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x14, 0x0a,
	0x12, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x1a, 0x89, 0x02, 0x0a, 0x0a, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x73, 0x0a, 0x14, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e,
	0x6b, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x14, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x53, 0x6c, 0x69, 0x64,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x1a,
	0x0f, 0x0a, 0x0d, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0xc6, 0x03, 0x0a, 0x0c, 0x54, 0x65, 0x78, 0x74, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x53,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f,
	0x6f, 0x66, 0x66, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x4f, 0x66, 0x66, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x66, 0x61, 0x64, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5a, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x22, 0x68, 0x0a, 0x0e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x52,
	0x45, 0x56, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x4c, 0x4c, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x45,
	0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x02, 0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_slide_proto_rawDescOnce sync.Once
	file_slide_proto_rawDescData = file_slide_proto_rawDesc
)

func file_slide_proto_rawDescGZIP() []byte {
	file_slide_proto_rawDescOnce.Do(func() {
		file_slide_proto_rawDescData = protoimpl.X.CompressGZIP(file_slide_proto_rawDescData)
	})
	return file_slide_proto_rawDescData
}

var file_slide_proto_enumTypes = make([]protoimpl.EnumInfo, 29)
var file_slide_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_slide_proto_goTypes = []interface{}{
	(Slide_Element_TextRevealType)(0),                                                                               // 0: rv.data.Slide.Element.TextRevealType
	(Slide_Element_Build_Start)(0),                                                                                  // 1: rv.data.Slide.Element.Build.Start
	(Slide_Element_ChildBuild_Start)(0),                                                                             // 2: rv.data.Slide.Element.ChildBuild.Start
	(Slide_Element_DataLink_RSSFeed_ContentType)(0),                                                                 // 3: rv.data.Slide.Element.DataLink.RSSFeed.ContentType
	(Slide_Element_DataLink_Ticker_RSSType_ContentType)(0),                                                          // 4: rv.data.Slide.Element.DataLink.Ticker.RSSType.ContentType
	(Slide_Element_DataLink_AlternateElementText_TextTransformOption)(0),                                            // 5: rv.data.Slide.Element.DataLink.AlternateElementText.TextTransformOption
	(Slide_Element_DataLink_PCOLive_Theme)(0),                                                                       // 6: rv.data.Slide.Element.DataLink.PCOLive.Theme
	(Slide_Element_DataLink_PCOLive_CountdownType)(0),                                                               // 7: rv.data.Slide.Element.DataLink.PCOLive.CountdownType
	(Slide_Element_DataLink_VisibilityLink_VisibilityCriterion)(0),                                                  // 8: rv.data.Slide.Element.DataLink.VisibilityLink.VisibilityCriterion
	(Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_ElementVisibilityCriterion)(0),               // 9: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility.ElementVisibilityCriterion
	(Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_TimerVisibilityCriterion)(0),                   // 10: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility.TimerVisibilityCriterion
	(Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_VideoCountdownVisibilityCriterion)(0), // 11: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility.VideoCountdownVisibilityCriterion
	(Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_AudioCountdownVisibilityCriterion)(0), // 12: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility.AudioCountdownVisibilityCriterion
	(Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_CaptureSessionVisibilityCriterion)(0), // 13: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility.CaptureSessionVisibilityCriterion
	(Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_VideoInputVisibilityCriterion)(0),         // 14: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility.VideoInputVisibilityCriterion
	(Slide_Element_DataLink_SlideText_SlideSourceType)(0),                                                           // 15: rv.data.Slide.Element.DataLink.SlideText.SlideSourceType
	(Slide_Element_DataLink_SlideText_TextSourceOption)(0),                                                          // 16: rv.data.Slide.Element.DataLink.SlideText.TextSourceOption
	(Slide_Element_DataLink_SlideText_TextTransformOption)(0),                                                       // 17: rv.data.Slide.Element.DataLink.SlideText.TextTransformOption
	(Slide_Element_DataLink_SlideImage_SlideSourceType)(0),                                                          // 18: rv.data.Slide.Element.DataLink.SlideImage.SlideSourceType
	(Slide_Element_DataLink_VideoCountdown_VideoCountdownSource)(0),                                                 // 19: rv.data.Slide.Element.DataLink.VideoCountdown.VideoCountdownSource
	(Slide_Element_DataLink_GroupName_GroupSourceType)(0),                                                           // 20: rv.data.Slide.Element.DataLink.GroupName.GroupSourceType
	(Slide_Element_DataLink_GroupColor_GroupSourceType)(0),                                                          // 21: rv.data.Slide.Element.DataLink.GroupColor.GroupSourceType
	(Slide_Element_DataLink_SlideLabelText_SlideLabelSource)(0),                                                     // 22: rv.data.Slide.Element.DataLink.SlideLabelText.SlideLabelSource
	(Slide_Element_DataLink_SlideLabelColor_SlideLabelSource)(0),                                                    // 23: rv.data.Slide.Element.DataLink.SlideLabelColor.SlideLabelSource
	(Slide_Element_DataLink_Presentation_PresentationSource)(0),                                                     // 24: rv.data.Slide.Element.DataLink.Presentation.PresentationSource
	(Slide_Element_DataLink_PlaylistItem_PlaylistItemSourceType)(0),                                                 // 25: rv.data.Slide.Element.DataLink.PlaylistItem.PlaylistItemSourceType
	(Slide_Element_DataLink_AutoAdvanceTimeRemaining_AutoAdvanceSource)(0),                                          // 26: rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining.AutoAdvanceSource
	(Slide_Element_DataLink_SlideCount_SlideCountSourceType)(0),                                                     // 27: rv.data.Slide.Element.DataLink.SlideCount.SlideCountSourceType
	(Slide_Element_TextScroller_Direction)(0),                                                                       // 28: rv.data.Slide.Element.TextScroller.Direction
	(*Slide)(nil),                                                                    // 29: rv.data.Slide
	(*Slide_Element)(nil),                                                            // 30: rv.data.Slide.Element
	(*Slide_Element_Build)(nil),                                                      // 31: rv.data.Slide.Element.Build
	(*Slide_Element_ChildBuild)(nil),                                                 // 32: rv.data.Slide.Element.ChildBuild
	(*Slide_Element_DataLink)(nil),                                                   // 33: rv.data.Slide.Element.DataLink
	(*Slide_Element_TextScroller)(nil),                                               // 34: rv.data.Slide.Element.TextScroller
	(*Slide_Element_DataLink_RSSFeed)(nil),                                           // 35: rv.data.Slide.Element.DataLink.RSSFeed
	(*Slide_Element_DataLink_FileFeed)(nil),                                          // 36: rv.data.Slide.Element.DataLink.FileFeed
	(*Slide_Element_DataLink_Ticker)(nil),                                            // 37: rv.data.Slide.Element.DataLink.Ticker
	(*Slide_Element_DataLink_AlternateElementText)(nil),                              // 38: rv.data.Slide.Element.DataLink.AlternateElementText
	(*Slide_Element_DataLink_CCLIText)(nil),                                          // 39: rv.data.Slide.Element.DataLink.CCLIText
	(*Slide_Element_DataLink_ColorTrigger)(nil),                                      // 40: rv.data.Slide.Element.DataLink.ColorTrigger
	(*Slide_Element_DataLink_TimerText)(nil),                                         // 41: rv.data.Slide.Element.DataLink.TimerText
	(*Slide_Element_DataLink_ClockText)(nil),                                         // 42: rv.data.Slide.Element.DataLink.ClockText
	(*Slide_Element_DataLink_ChordChart)(nil),                                        // 43: rv.data.Slide.Element.DataLink.ChordChart
	(*Slide_Element_DataLink_OutputScreen)(nil),                                      // 44: rv.data.Slide.Element.DataLink.OutputScreen
	(*Slide_Element_DataLink_PCOLive)(nil),                                           // 45: rv.data.Slide.Element.DataLink.PCOLive
	(*Slide_Element_DataLink_AlternateElementFill)(nil),                              // 46: rv.data.Slide.Element.DataLink.AlternateElementFill
	(*Slide_Element_DataLink_VisibilityLink)(nil),                                    // 47: rv.data.Slide.Element.DataLink.VisibilityLink
	(*Slide_Element_DataLink_SlideText)(nil),                                         // 48: rv.data.Slide.Element.DataLink.SlideText
	(*Slide_Element_DataLink_SlideImage)(nil),                                        // 49: rv.data.Slide.Element.DataLink.SlideImage
	(*Slide_Element_DataLink_StageMessage)(nil),                                      // 50: rv.data.Slide.Element.DataLink.StageMessage
	(*Slide_Element_DataLink_VideoCountdown)(nil),                                    // 51: rv.data.Slide.Element.DataLink.VideoCountdown
	(*Slide_Element_DataLink_AudioCountdown)(nil),                                    // 52: rv.data.Slide.Element.DataLink.AudioCountdown
	(*Slide_Element_DataLink_GroupName)(nil),                                         // 53: rv.data.Slide.Element.DataLink.GroupName
	(*Slide_Element_DataLink_GroupColor)(nil),                                        // 54: rv.data.Slide.Element.DataLink.GroupColor
	(*Slide_Element_DataLink_SlideLabelText)(nil),                                    // 55: rv.data.Slide.Element.DataLink.SlideLabelText
	(*Slide_Element_DataLink_SlideLabelColor)(nil),                                   // 56: rv.data.Slide.Element.DataLink.SlideLabelColor
	(*Slide_Element_DataLink_PresentationNotes)(nil),                                 // 57: rv.data.Slide.Element.DataLink.PresentationNotes
	(*Slide_Element_DataLink_Presentation)(nil),                                      // 58: rv.data.Slide.Element.DataLink.Presentation
	(*Slide_Element_DataLink_PlaylistItem)(nil),                                      // 59: rv.data.Slide.Element.DataLink.PlaylistItem
	(*Slide_Element_DataLink_AutoAdvanceTimeRemaining)(nil),                          // 60: rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining
	(*Slide_Element_DataLink_CaptureStatusText)(nil),                                 // 61: rv.data.Slide.Element.DataLink.CaptureStatusText
	(*Slide_Element_DataLink_CaptureStatusColor)(nil),                                // 62: rv.data.Slide.Element.DataLink.CaptureStatusColor
	(*Slide_Element_DataLink_SlideCount)(nil),                                        // 63: rv.data.Slide.Element.DataLink.SlideCount
	(*Slide_Element_DataLink_ChordProChart)(nil),                                     // 64: rv.data.Slide.Element.DataLink.ChordProChart
	(*Slide_Element_DataLink_Ticker_TextType)(nil),                                   // 65: rv.data.Slide.Element.DataLink.Ticker.TextType
	(*Slide_Element_DataLink_Ticker_RSSType)(nil),                                    // 66: rv.data.Slide.Element.DataLink.Ticker.RSSType
	(*Slide_Element_DataLink_Ticker_FileType)(nil),                                   // 67: rv.data.Slide.Element.DataLink.Ticker.FileType
	(*Slide_Element_DataLink_VisibilityLink_Condition)(nil),                          // 68: rv.data.Slide.Element.DataLink.VisibilityLink.Condition
	(*Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility)(nil),        // 69: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility
	(*Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility)(nil),          // 70: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility
	(*Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility)(nil), // 71: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility
	(*Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility)(nil), // 72: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility
	(*Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility)(nil), // 73: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility
	(*Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility)(nil),     // 74: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility
	(*Slide_Element_DataLink_CaptureStatusText_StatusText)(nil),                      // 75: rv.data.Slide.Element.DataLink.CaptureStatusText.StatusText
	(*Slide_Element_DataLink_CaptureStatusText_ElapsedTime)(nil),                     // 76: rv.data.Slide.Element.DataLink.CaptureStatusText.ElapsedTime
	(*UUID)(nil),             // 77: rv.data.UUID
	(*AlignmentGuide)(nil),   // 78: rv.data.AlignmentGuide
	(*Color)(nil),            // 79: rv.data.Color
	(*Graphics_Size)(nil),    // 80: rv.data.Graphics.Size
	(*Graphics_Element)(nil), // 81: rv.data.Graphics.Element
	(*Transition)(nil),       // 82: rv.data.Transition
	(*URL)(nil),              // 83: rv.data.URL
	(*Timer_Format)(nil),     // 84: rv.data.Timer.Format
	(*Clock_Format)(nil),     // 85: rv.data.Clock.Format
}
var file_slide_proto_depIdxs = []int32{
	30,  // 0: rv.data.Slide.elements:type_name -> rv.data.Slide.Element
	77,  // 1: rv.data.Slide.element_build_order:type_name -> rv.data.UUID
	78,  // 2: rv.data.Slide.guidelines:type_name -> rv.data.AlignmentGuide
	79,  // 3: rv.data.Slide.background_color:type_name -> rv.data.Color
	80,  // 4: rv.data.Slide.size:type_name -> rv.data.Graphics.Size
	77,  // 5: rv.data.Slide.uuid:type_name -> rv.data.UUID
	81,  // 6: rv.data.Slide.Element.element:type_name -> rv.data.Graphics.Element
	31,  // 7: rv.data.Slide.Element.build_in:type_name -> rv.data.Slide.Element.Build
	31,  // 8: rv.data.Slide.Element.build_out:type_name -> rv.data.Slide.Element.Build
	0,   // 9: rv.data.Slide.Element.reveal_type:type_name -> rv.data.Slide.Element.TextRevealType
	33,  // 10: rv.data.Slide.Element.data_links:type_name -> rv.data.Slide.Element.DataLink
	32,  // 11: rv.data.Slide.Element.childBuilds:type_name -> rv.data.Slide.Element.ChildBuild
	34,  // 12: rv.data.Slide.Element.text_scroller:type_name -> rv.data.Slide.Element.TextScroller
	77,  // 13: rv.data.Slide.Element.Build.uuid:type_name -> rv.data.UUID
	77,  // 14: rv.data.Slide.Element.Build.elementUUID:type_name -> rv.data.UUID
	1,   // 15: rv.data.Slide.Element.Build.start:type_name -> rv.data.Slide.Element.Build.Start
	82,  // 16: rv.data.Slide.Element.Build.transition:type_name -> rv.data.Transition
	77,  // 17: rv.data.Slide.Element.ChildBuild.uuid:type_name -> rv.data.UUID
	2,   // 18: rv.data.Slide.Element.ChildBuild.start:type_name -> rv.data.Slide.Element.ChildBuild.Start
	37,  // 19: rv.data.Slide.Element.DataLink.ticker:type_name -> rv.data.Slide.Element.DataLink.Ticker
	38,  // 20: rv.data.Slide.Element.DataLink.alternate_text:type_name -> rv.data.Slide.Element.DataLink.AlternateElementText
	41,  // 21: rv.data.Slide.Element.DataLink.timer_text:type_name -> rv.data.Slide.Element.DataLink.TimerText
	42,  // 22: rv.data.Slide.Element.DataLink.clock_text:type_name -> rv.data.Slide.Element.DataLink.ClockText
	43,  // 23: rv.data.Slide.Element.DataLink.chord_chart:type_name -> rv.data.Slide.Element.DataLink.ChordChart
	44,  // 24: rv.data.Slide.Element.DataLink.output_screen:type_name -> rv.data.Slide.Element.DataLink.OutputScreen
	45,  // 25: rv.data.Slide.Element.DataLink.pco_live:type_name -> rv.data.Slide.Element.DataLink.PCOLive
	46,  // 26: rv.data.Slide.Element.DataLink.alternate_fill:type_name -> rv.data.Slide.Element.DataLink.AlternateElementFill
	47,  // 27: rv.data.Slide.Element.DataLink.visibility_link:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink
	48,  // 28: rv.data.Slide.Element.DataLink.slide_text:type_name -> rv.data.Slide.Element.DataLink.SlideText
	50,  // 29: rv.data.Slide.Element.DataLink.stage_message:type_name -> rv.data.Slide.Element.DataLink.StageMessage
	51,  // 30: rv.data.Slide.Element.DataLink.video_countdown:type_name -> rv.data.Slide.Element.DataLink.VideoCountdown
	49,  // 31: rv.data.Slide.Element.DataLink.slide_image:type_name -> rv.data.Slide.Element.DataLink.SlideImage
	39,  // 32: rv.data.Slide.Element.DataLink.ccli_text:type_name -> rv.data.Slide.Element.DataLink.CCLIText
	53,  // 33: rv.data.Slide.Element.DataLink.group_name:type_name -> rv.data.Slide.Element.DataLink.GroupName
	54,  // 34: rv.data.Slide.Element.DataLink.group_color:type_name -> rv.data.Slide.Element.DataLink.GroupColor
	57,  // 35: rv.data.Slide.Element.DataLink.presentation_notes:type_name -> rv.data.Slide.Element.DataLink.PresentationNotes
	59,  // 36: rv.data.Slide.Element.DataLink.playlist_item:type_name -> rv.data.Slide.Element.DataLink.PlaylistItem
	60,  // 37: rv.data.Slide.Element.DataLink.auto_advance_time_remaining:type_name -> rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining
	61,  // 38: rv.data.Slide.Element.DataLink.capture_status_text:type_name -> rv.data.Slide.Element.DataLink.CaptureStatusText
	62,  // 39: rv.data.Slide.Element.DataLink.capture_status_color:type_name -> rv.data.Slide.Element.DataLink.CaptureStatusColor
	63,  // 40: rv.data.Slide.Element.DataLink.slide_count:type_name -> rv.data.Slide.Element.DataLink.SlideCount
	52,  // 41: rv.data.Slide.Element.DataLink.audio_countdown:type_name -> rv.data.Slide.Element.DataLink.AudioCountdown
	58,  // 42: rv.data.Slide.Element.DataLink.presentation:type_name -> rv.data.Slide.Element.DataLink.Presentation
	55,  // 43: rv.data.Slide.Element.DataLink.slide_Label_Text:type_name -> rv.data.Slide.Element.DataLink.SlideLabelText
	56,  // 44: rv.data.Slide.Element.DataLink.slide_Label_Color:type_name -> rv.data.Slide.Element.DataLink.SlideLabelColor
	35,  // 45: rv.data.Slide.Element.DataLink.rss_feed:type_name -> rv.data.Slide.Element.DataLink.RSSFeed
	36,  // 46: rv.data.Slide.Element.DataLink.file_feed:type_name -> rv.data.Slide.Element.DataLink.FileFeed
	64,  // 47: rv.data.Slide.Element.DataLink.chord_pro_chart:type_name -> rv.data.Slide.Element.DataLink.ChordProChart
	28,  // 48: rv.data.Slide.Element.TextScroller.scrolling_direction:type_name -> rv.data.Slide.Element.TextScroller.Direction
	83,  // 49: rv.data.Slide.Element.DataLink.RSSFeed.url:type_name -> rv.data.URL
	3,   // 50: rv.data.Slide.Element.DataLink.RSSFeed.content:type_name -> rv.data.Slide.Element.DataLink.RSSFeed.ContentType
	83,  // 51: rv.data.Slide.Element.DataLink.FileFeed.url:type_name -> rv.data.URL
	65,  // 52: rv.data.Slide.Element.DataLink.Ticker.text_type:type_name -> rv.data.Slide.Element.DataLink.Ticker.TextType
	66,  // 53: rv.data.Slide.Element.DataLink.Ticker.rss_type:type_name -> rv.data.Slide.Element.DataLink.Ticker.RSSType
	67,  // 54: rv.data.Slide.Element.DataLink.Ticker.file_type:type_name -> rv.data.Slide.Element.DataLink.Ticker.FileType
	77,  // 55: rv.data.Slide.Element.DataLink.AlternateElementText.other_element_uuid:type_name -> rv.data.UUID
	5,   // 56: rv.data.Slide.Element.DataLink.AlternateElementText.text_transform:type_name -> rv.data.Slide.Element.DataLink.AlternateElementText.TextTransformOption
	79,  // 57: rv.data.Slide.Element.DataLink.ColorTrigger.color:type_name -> rv.data.Color
	77,  // 58: rv.data.Slide.Element.DataLink.TimerText.timer_uuid:type_name -> rv.data.UUID
	84,  // 59: rv.data.Slide.Element.DataLink.TimerText.timer_format:type_name -> rv.data.Timer.Format
	40,  // 60: rv.data.Slide.Element.DataLink.TimerText.color_triggers:type_name -> rv.data.Slide.Element.DataLink.ColorTrigger
	85,  // 61: rv.data.Slide.Element.DataLink.ClockText.format:type_name -> rv.data.Clock.Format
	77,  // 62: rv.data.Slide.Element.DataLink.OutputScreen.screen_id:type_name -> rv.data.UUID
	6,   // 63: rv.data.Slide.Element.DataLink.PCOLive.theme:type_name -> rv.data.Slide.Element.DataLink.PCOLive.Theme
	7,   // 64: rv.data.Slide.Element.DataLink.PCOLive.countdown_type:type_name -> rv.data.Slide.Element.DataLink.PCOLive.CountdownType
	77,  // 65: rv.data.Slide.Element.DataLink.AlternateElementFill.other_element_uuid:type_name -> rv.data.UUID
	8,   // 66: rv.data.Slide.Element.DataLink.VisibilityLink.visibility_criterion:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.VisibilityCriterion
	68,  // 67: rv.data.Slide.Element.DataLink.VisibilityLink.conditions:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition
	15,  // 68: rv.data.Slide.Element.DataLink.SlideText.source_slide:type_name -> rv.data.Slide.Element.DataLink.SlideText.SlideSourceType
	16,  // 69: rv.data.Slide.Element.DataLink.SlideText.source_option:type_name -> rv.data.Slide.Element.DataLink.SlideText.TextSourceOption
	17,  // 70: rv.data.Slide.Element.DataLink.SlideText.element_text_transform:type_name -> rv.data.Slide.Element.DataLink.SlideText.TextTransformOption
	18,  // 71: rv.data.Slide.Element.DataLink.SlideImage.source_slide:type_name -> rv.data.Slide.Element.DataLink.SlideImage.SlideSourceType
	79,  // 72: rv.data.Slide.Element.DataLink.StageMessage.flash_color:type_name -> rv.data.Color
	84,  // 73: rv.data.Slide.Element.DataLink.VideoCountdown.timer_format:type_name -> rv.data.Timer.Format
	40,  // 74: rv.data.Slide.Element.DataLink.VideoCountdown.color_triggers:type_name -> rv.data.Slide.Element.DataLink.ColorTrigger
	19,  // 75: rv.data.Slide.Element.DataLink.VideoCountdown.video_countdown_source:type_name -> rv.data.Slide.Element.DataLink.VideoCountdown.VideoCountdownSource
	84,  // 76: rv.data.Slide.Element.DataLink.AudioCountdown.timer_format:type_name -> rv.data.Timer.Format
	40,  // 77: rv.data.Slide.Element.DataLink.AudioCountdown.color_triggers:type_name -> rv.data.Slide.Element.DataLink.ColorTrigger
	20,  // 78: rv.data.Slide.Element.DataLink.GroupName.groupSource:type_name -> rv.data.Slide.Element.DataLink.GroupName.GroupSourceType
	21,  // 79: rv.data.Slide.Element.DataLink.GroupColor.groupSource:type_name -> rv.data.Slide.Element.DataLink.GroupColor.GroupSourceType
	22,  // 80: rv.data.Slide.Element.DataLink.SlideLabelText.slide_label_source:type_name -> rv.data.Slide.Element.DataLink.SlideLabelText.SlideLabelSource
	23,  // 81: rv.data.Slide.Element.DataLink.SlideLabelColor.slide_label_source:type_name -> rv.data.Slide.Element.DataLink.SlideLabelColor.SlideLabelSource
	24,  // 82: rv.data.Slide.Element.DataLink.Presentation.presentation_source:type_name -> rv.data.Slide.Element.DataLink.Presentation.PresentationSource
	25,  // 83: rv.data.Slide.Element.DataLink.PlaylistItem.playlistItemSource:type_name -> rv.data.Slide.Element.DataLink.PlaylistItem.PlaylistItemSourceType
	26,  // 84: rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining.auto_advance_source:type_name -> rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining.AutoAdvanceSource
	84,  // 85: rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining.timer_format:type_name -> rv.data.Timer.Format
	75,  // 86: rv.data.Slide.Element.DataLink.CaptureStatusText.status_text:type_name -> rv.data.Slide.Element.DataLink.CaptureStatusText.StatusText
	76,  // 87: rv.data.Slide.Element.DataLink.CaptureStatusText.elapsed_time:type_name -> rv.data.Slide.Element.DataLink.CaptureStatusText.ElapsedTime
	27,  // 88: rv.data.Slide.Element.DataLink.SlideCount.slideCountSourceType:type_name -> rv.data.Slide.Element.DataLink.SlideCount.SlideCountSourceType
	83,  // 89: rv.data.Slide.Element.DataLink.Ticker.RSSType.url:type_name -> rv.data.URL
	4,   // 90: rv.data.Slide.Element.DataLink.Ticker.RSSType.content:type_name -> rv.data.Slide.Element.DataLink.Ticker.RSSType.ContentType
	83,  // 91: rv.data.Slide.Element.DataLink.Ticker.FileType.url:type_name -> rv.data.URL
	69,  // 92: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.element_visibility:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility
	70,  // 93: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.timer_visibility:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility
	71,  // 94: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.video_countdown_visibility:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility
	73,  // 95: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.capture_session_visibility:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility
	74,  // 96: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.video_input_visibility:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility
	72,  // 97: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.audio_countdown_visibility:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility
	77,  // 98: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility.other_element_uuid:type_name -> rv.data.UUID
	9,   // 99: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility.visibility_criterion:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility.ElementVisibilityCriterion
	77,  // 100: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility.timer_uuid:type_name -> rv.data.UUID
	10,  // 101: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility.visibility_criterion:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility.TimerVisibilityCriterion
	11,  // 102: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility.visibility_criterion:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility.VideoCountdownVisibilityCriterion
	12,  // 103: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility.visibility_criterion:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility.AudioCountdownVisibilityCriterion
	13,  // 104: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility.visibility_criterion:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility.CaptureSessionVisibilityCriterion
	14,  // 105: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility.visibility_criterion:type_name -> rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility.VideoInputVisibilityCriterion
	84,  // 106: rv.data.Slide.Element.DataLink.CaptureStatusText.ElapsedTime.timer_format:type_name -> rv.data.Timer.Format
	107, // [107:107] is the sub-list for method output_type
	107, // [107:107] is the sub-list for method input_type
	107, // [107:107] is the sub-list for extension type_name
	107, // [107:107] is the sub-list for extension extendee
	0,   // [0:107] is the sub-list for field type_name
}

func init() { file_slide_proto_init() }
func file_slide_proto_init() {
	if File_slide_proto != nil {
		return
	}
	file_graphicsData_proto_init()
	file_basicTypes_proto_init()
	file_alignmentGuide_proto_init()
	file_effects_proto_init()
	file_timers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_slide_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_ChildBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_TextScroller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_RSSFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_FileFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_Ticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_AlternateElementText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_CCLIText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_ColorTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_TimerText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_ClockText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_ChordChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_OutputScreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_PCOLive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_AlternateElementFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_VisibilityLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_SlideText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_SlideImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_StageMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_VideoCountdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_AudioCountdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_GroupName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_GroupColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_SlideLabelText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_SlideLabelColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_PresentationNotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_Presentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_PlaylistItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_AutoAdvanceTimeRemaining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_CaptureStatusText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_CaptureStatusColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_SlideCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_ChordProChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_Ticker_TextType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_Ticker_RSSType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_Ticker_FileType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_VisibilityLink_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_CaptureStatusText_StatusText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slide_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slide_Element_DataLink_CaptureStatusText_ElapsedTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_slide_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Slide_Element_DataLink_Ticker_)(nil),
		(*Slide_Element_DataLink_AlternateText)(nil),
		(*Slide_Element_DataLink_TimerText_)(nil),
		(*Slide_Element_DataLink_ClockText_)(nil),
		(*Slide_Element_DataLink_ChordChart_)(nil),
		(*Slide_Element_DataLink_OutputScreen_)(nil),
		(*Slide_Element_DataLink_PcoLive)(nil),
		(*Slide_Element_DataLink_AlternateFill)(nil),
		(*Slide_Element_DataLink_VisibilityLink_)(nil),
		(*Slide_Element_DataLink_SlideText_)(nil),
		(*Slide_Element_DataLink_StageMessage_)(nil),
		(*Slide_Element_DataLink_VideoCountdown_)(nil),
		(*Slide_Element_DataLink_SlideImage_)(nil),
		(*Slide_Element_DataLink_CcliText)(nil),
		(*Slide_Element_DataLink_GroupName_)(nil),
		(*Slide_Element_DataLink_GroupColor_)(nil),
		(*Slide_Element_DataLink_PresentationNotes_)(nil),
		(*Slide_Element_DataLink_PlaylistItem_)(nil),
		(*Slide_Element_DataLink_AutoAdvanceTimeRemaining_)(nil),
		(*Slide_Element_DataLink_CaptureStatusText_)(nil),
		(*Slide_Element_DataLink_CaptureStatusColor_)(nil),
		(*Slide_Element_DataLink_SlideCount_)(nil),
		(*Slide_Element_DataLink_AudioCountdown_)(nil),
		(*Slide_Element_DataLink_Presentation_)(nil),
		(*Slide_Element_DataLink_Slide_Label_Text)(nil),
		(*Slide_Element_DataLink_Slide_Label_Color)(nil),
		(*Slide_Element_DataLink_RssFeed)(nil),
		(*Slide_Element_DataLink_FileFeed_)(nil),
		(*Slide_Element_DataLink_ChordProChart_)(nil),
	}
	file_slide_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Slide_Element_DataLink_Ticker_TextType_)(nil),
		(*Slide_Element_DataLink_Ticker_RssType)(nil),
		(*Slide_Element_DataLink_Ticker_FileType_)(nil),
	}
	file_slide_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*Slide_Element_DataLink_CaptureStatusText_StatusText_)(nil),
		(*Slide_Element_DataLink_CaptureStatusText_ElapsedTime_)(nil),
	}
	file_slide_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*Slide_Element_DataLink_VisibilityLink_Condition_ElementVisibility_)(nil),
		(*Slide_Element_DataLink_VisibilityLink_Condition_TimerVisibility_)(nil),
		(*Slide_Element_DataLink_VisibilityLink_Condition_VideoCountdownVisibility_)(nil),
		(*Slide_Element_DataLink_VisibilityLink_Condition_CaptureSessionVisibility_)(nil),
		(*Slide_Element_DataLink_VisibilityLink_Condition_VideoInputVisibility_)(nil),
		(*Slide_Element_DataLink_VisibilityLink_Condition_AudioCountdownVisibility_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_slide_proto_rawDesc,
			NumEnums:      29,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_slide_proto_goTypes,
		DependencyIndexes: file_slide_proto_depIdxs,
		EnumInfos:         file_slide_proto_enumTypes,
		MessageInfos:      file_slide_proto_msgTypes,
	}.Build()
	File_slide_proto = out.File
	file_slide_proto_rawDesc = nil
	file_slide_proto_goTypes = nil
	file_slide_proto_depIdxs = nil
}
