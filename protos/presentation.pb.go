// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: presentation.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Presentation_ContentDestination int32

const (
	Presentation_CONTENT_DESTINATION_GLOBAL        Presentation_ContentDestination = 0
	Presentation_CONTENT_DESTINATION_ANNOUNCEMENTS Presentation_ContentDestination = 1
)

// Enum value maps for Presentation_ContentDestination.
var (
	Presentation_ContentDestination_name = map[int32]string{
		0: "CONTENT_DESTINATION_GLOBAL",
		1: "CONTENT_DESTINATION_ANNOUNCEMENTS",
	}
	Presentation_ContentDestination_value = map[string]int32{
		"CONTENT_DESTINATION_GLOBAL":        0,
		"CONTENT_DESTINATION_ANNOUNCEMENTS": 1,
	}
)

func (x Presentation_ContentDestination) Enum() *Presentation_ContentDestination {
	p := new(Presentation_ContentDestination)
	*p = x
	return p
}

func (x Presentation_ContentDestination) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Presentation_ContentDestination) Descriptor() protoreflect.EnumDescriptor {
	return file_presentation_proto_enumTypes[0].Descriptor()
}

func (Presentation_ContentDestination) Type() protoreflect.EnumType {
	return &file_presentation_proto_enumTypes[0]
}

func (x Presentation_ContentDestination) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Presentation_ContentDestination.Descriptor instead.
func (Presentation_ContentDestination) EnumDescriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 0}
}

type Presentation_MultiTracksLicensing_Subscription int32

const (
	Presentation_MultiTracksLicensing_SUBSCRIPTION_CHART_PRO Presentation_MultiTracksLicensing_Subscription = 0
	Presentation_MultiTracksLicensing_SUBSCRIPTION_SLIDE_PRO Presentation_MultiTracksLicensing_Subscription = 1
)

// Enum value maps for Presentation_MultiTracksLicensing_Subscription.
var (
	Presentation_MultiTracksLicensing_Subscription_name = map[int32]string{
		0: "SUBSCRIPTION_CHART_PRO",
		1: "SUBSCRIPTION_SLIDE_PRO",
	}
	Presentation_MultiTracksLicensing_Subscription_value = map[string]int32{
		"SUBSCRIPTION_CHART_PRO": 0,
		"SUBSCRIPTION_SLIDE_PRO": 1,
	}
)

func (x Presentation_MultiTracksLicensing_Subscription) Enum() *Presentation_MultiTracksLicensing_Subscription {
	p := new(Presentation_MultiTracksLicensing_Subscription)
	*p = x
	return p
}

func (x Presentation_MultiTracksLicensing_Subscription) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Presentation_MultiTracksLicensing_Subscription) Descriptor() protoreflect.EnumDescriptor {
	return file_presentation_proto_enumTypes[1].Descriptor()
}

func (Presentation_MultiTracksLicensing_Subscription) Type() protoreflect.EnumType {
	return &file_presentation_proto_enumTypes[1]
}

func (x Presentation_MultiTracksLicensing_Subscription) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Presentation_MultiTracksLicensing_Subscription.Descriptor instead.
func (Presentation_MultiTracksLicensing_Subscription) EnumDescriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 6, 0}
}

type Presentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationInfo      *ApplicationInfo                   `protobuf:"bytes,1,opt,name=application_info,json=applicationInfo,proto3" json:"application_info,omitempty"`
	Uuid                 *UUID                              `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                 string                             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LastDateUsed         *Timestamp                         `protobuf:"bytes,4,opt,name=last_date_used,json=lastDateUsed,proto3" json:"last_date_used,omitempty"`
	LastModifiedDate     *Timestamp                         `protobuf:"bytes,5,opt,name=last_modified_date,json=lastModifiedDate,proto3" json:"last_modified_date,omitempty"`
	Category             string                             `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	Notes                string                             `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
	Background           *Background                        `protobuf:"bytes,8,opt,name=background,proto3" json:"background,omitempty"`
	ChordChart           *URL                               `protobuf:"bytes,9,opt,name=chord_chart,json=chordChart,proto3" json:"chord_chart,omitempty"`
	SelectedArrangement  *UUID                              `protobuf:"bytes,10,opt,name=selected_arrangement,json=selectedArrangement,proto3" json:"selected_arrangement,omitempty"`
	Arrangements         []*Presentation_Arrangement        `protobuf:"bytes,11,rep,name=arrangements,proto3" json:"arrangements,omitempty"`
	CueGroups            []*Presentation_CueGroup           `protobuf:"bytes,12,rep,name=cue_groups,json=cueGroups,proto3" json:"cue_groups,omitempty"`
	Cues                 []*Cue                             `protobuf:"bytes,13,rep,name=cues,proto3" json:"cues,omitempty"`
	Ccli                 *Presentation_CCLI                 `protobuf:"bytes,14,opt,name=ccli,proto3" json:"ccli,omitempty"`
	BibleReference       *Presentation_BibleReference       `protobuf:"bytes,15,opt,name=bible_reference,json=bibleReference,proto3" json:"bible_reference,omitempty"`
	SocialMedia          *Presentation_SocialMedia          `protobuf:"bytes,16,opt,name=social_media,json=socialMedia,proto3" json:"social_media,omitempty"`
	Timeline             *Presentation_Timeline             `protobuf:"bytes,17,opt,name=timeline,proto3" json:"timeline,omitempty"`
	Transition           *Transition                        `protobuf:"bytes,18,opt,name=transition,proto3" json:"transition,omitempty"`
	ContentDestination   Presentation_ContentDestination    `protobuf:"varint,19,opt,name=content_destination,json=contentDestination,proto3,enum=rv.data.Presentation_ContentDestination" json:"content_destination,omitempty"`
	MultiTracksLicensing *Presentation_MultiTracksLicensing `protobuf:"bytes,21,opt,name=multi_tracks_licensing,json=multiTracksLicensing,proto3" json:"multi_tracks_licensing,omitempty"`
	MusicKey             string                             `protobuf:"bytes,22,opt,name=music_key,json=musicKey,proto3" json:"music_key,omitempty"`
	Music                *Presentation_Music                `protobuf:"bytes,23,opt,name=music,proto3" json:"music,omitempty"`
	// Types that are assignable to SlideShow:
	//	*Presentation_SlideShowDuration
	SlideShow isPresentation_SlideShow `protobuf_oneof:"SlideShow"`
}

func (x *Presentation) Reset() {
	*x = Presentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_presentation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation) ProtoMessage() {}

func (x *Presentation) ProtoReflect() protoreflect.Message {
	mi := &file_presentation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation.ProtoReflect.Descriptor instead.
func (*Presentation) Descriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0}
}

func (x *Presentation) GetApplicationInfo() *ApplicationInfo {
	if x != nil {
		return x.ApplicationInfo
	}
	return nil
}

func (x *Presentation) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Presentation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Presentation) GetLastDateUsed() *Timestamp {
	if x != nil {
		return x.LastDateUsed
	}
	return nil
}

func (x *Presentation) GetLastModifiedDate() *Timestamp {
	if x != nil {
		return x.LastModifiedDate
	}
	return nil
}

func (x *Presentation) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Presentation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Presentation) GetBackground() *Background {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *Presentation) GetChordChart() *URL {
	if x != nil {
		return x.ChordChart
	}
	return nil
}

func (x *Presentation) GetSelectedArrangement() *UUID {
	if x != nil {
		return x.SelectedArrangement
	}
	return nil
}

func (x *Presentation) GetArrangements() []*Presentation_Arrangement {
	if x != nil {
		return x.Arrangements
	}
	return nil
}

func (x *Presentation) GetCueGroups() []*Presentation_CueGroup {
	if x != nil {
		return x.CueGroups
	}
	return nil
}

func (x *Presentation) GetCues() []*Cue {
	if x != nil {
		return x.Cues
	}
	return nil
}

func (x *Presentation) GetCcli() *Presentation_CCLI {
	if x != nil {
		return x.Ccli
	}
	return nil
}

func (x *Presentation) GetBibleReference() *Presentation_BibleReference {
	if x != nil {
		return x.BibleReference
	}
	return nil
}

func (x *Presentation) GetSocialMedia() *Presentation_SocialMedia {
	if x != nil {
		return x.SocialMedia
	}
	return nil
}

func (x *Presentation) GetTimeline() *Presentation_Timeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *Presentation) GetTransition() *Transition {
	if x != nil {
		return x.Transition
	}
	return nil
}

func (x *Presentation) GetContentDestination() Presentation_ContentDestination {
	if x != nil {
		return x.ContentDestination
	}
	return Presentation_CONTENT_DESTINATION_GLOBAL
}

func (x *Presentation) GetMultiTracksLicensing() *Presentation_MultiTracksLicensing {
	if x != nil {
		return x.MultiTracksLicensing
	}
	return nil
}

func (x *Presentation) GetMusicKey() string {
	if x != nil {
		return x.MusicKey
	}
	return ""
}

func (x *Presentation) GetMusic() *Presentation_Music {
	if x != nil {
		return x.Music
	}
	return nil
}

func (m *Presentation) GetSlideShow() isPresentation_SlideShow {
	if m != nil {
		return m.SlideShow
	}
	return nil
}

func (x *Presentation) GetSlideShowDuration() float64 {
	if x, ok := x.GetSlideShow().(*Presentation_SlideShowDuration); ok {
		return x.SlideShowDuration
	}
	return 0
}

type isPresentation_SlideShow interface {
	isPresentation_SlideShow()
}

type Presentation_SlideShowDuration struct {
	SlideShowDuration float64 `protobuf:"fixed64,20,opt,name=slide_show_duration,json=slideShowDuration,proto3,oneof"`
}

func (*Presentation_SlideShowDuration) isPresentation_SlideShow() {}

type Presentation_CCLI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author        string `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	ArtistCredits string `protobuf:"bytes,2,opt,name=artist_credits,json=artistCredits,proto3" json:"artist_credits,omitempty"`
	SongTitle     string `protobuf:"bytes,3,opt,name=song_title,json=songTitle,proto3" json:"song_title,omitempty"`
	Publisher     string `protobuf:"bytes,4,opt,name=publisher,proto3" json:"publisher,omitempty"`
	CopyrightYear uint32 `protobuf:"varint,5,opt,name=copyright_year,json=copyrightYear,proto3" json:"copyright_year,omitempty"`
	SongNumber    uint32 `protobuf:"varint,6,opt,name=song_number,json=songNumber,proto3" json:"song_number,omitempty"`
	Display       bool   `protobuf:"varint,7,opt,name=display,proto3" json:"display,omitempty"`
	Album         string `protobuf:"bytes,8,opt,name=album,proto3" json:"album,omitempty"`
	Artwork       []byte `protobuf:"bytes,9,opt,name=artwork,proto3" json:"artwork,omitempty"`
}

func (x *Presentation_CCLI) Reset() {
	*x = Presentation_CCLI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_presentation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation_CCLI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation_CCLI) ProtoMessage() {}

func (x *Presentation_CCLI) ProtoReflect() protoreflect.Message {
	mi := &file_presentation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation_CCLI.ProtoReflect.Descriptor instead.
func (*Presentation_CCLI) Descriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Presentation_CCLI) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Presentation_CCLI) GetArtistCredits() string {
	if x != nil {
		return x.ArtistCredits
	}
	return ""
}

func (x *Presentation_CCLI) GetSongTitle() string {
	if x != nil {
		return x.SongTitle
	}
	return ""
}

func (x *Presentation_CCLI) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Presentation_CCLI) GetCopyrightYear() uint32 {
	if x != nil {
		return x.CopyrightYear
	}
	return 0
}

func (x *Presentation_CCLI) GetSongNumber() uint32 {
	if x != nil {
		return x.SongNumber
	}
	return 0
}

func (x *Presentation_CCLI) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *Presentation_CCLI) GetAlbum() string {
	if x != nil {
		return x.Album
	}
	return ""
}

func (x *Presentation_CCLI) GetArtwork() []byte {
	if x != nil {
		return x.Artwork
	}
	return nil
}

type Presentation_BibleReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookIndex                       uint32    `protobuf:"varint,1,opt,name=book_index,json=bookIndex,proto3" json:"book_index,omitempty"`
	BookName                        string    `protobuf:"bytes,2,opt,name=book_name,json=bookName,proto3" json:"book_name,omitempty"`
	ChapterRange                    *IntRange `protobuf:"bytes,3,opt,name=chapter_range,json=chapterRange,proto3" json:"chapter_range,omitempty"`
	VerseRange                      *IntRange `protobuf:"bytes,4,opt,name=verse_range,json=verseRange,proto3" json:"verse_range,omitempty"`
	TranslationName                 string    `protobuf:"bytes,5,opt,name=translation_name,json=translationName,proto3" json:"translation_name,omitempty"`
	TranslationDisplayAbbreviation  string    `protobuf:"bytes,6,opt,name=translation_display_abbreviation,json=translationDisplayAbbreviation,proto3" json:"translation_display_abbreviation,omitempty"`
	TranslationInternalAbbreviation string    `protobuf:"bytes,7,opt,name=translation_internal_abbreviation,json=translationInternalAbbreviation,proto3" json:"translation_internal_abbreviation,omitempty"`
	BookKey                         string    `protobuf:"bytes,8,opt,name=book_key,json=bookKey,proto3" json:"book_key,omitempty"`
}

func (x *Presentation_BibleReference) Reset() {
	*x = Presentation_BibleReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_presentation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation_BibleReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation_BibleReference) ProtoMessage() {}

func (x *Presentation_BibleReference) ProtoReflect() protoreflect.Message {
	mi := &file_presentation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation_BibleReference.ProtoReflect.Descriptor instead.
func (*Presentation_BibleReference) Descriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Presentation_BibleReference) GetBookIndex() uint32 {
	if x != nil {
		return x.BookIndex
	}
	return 0
}

func (x *Presentation_BibleReference) GetBookName() string {
	if x != nil {
		return x.BookName
	}
	return ""
}

func (x *Presentation_BibleReference) GetChapterRange() *IntRange {
	if x != nil {
		return x.ChapterRange
	}
	return nil
}

func (x *Presentation_BibleReference) GetVerseRange() *IntRange {
	if x != nil {
		return x.VerseRange
	}
	return nil
}

func (x *Presentation_BibleReference) GetTranslationName() string {
	if x != nil {
		return x.TranslationName
	}
	return ""
}

func (x *Presentation_BibleReference) GetTranslationDisplayAbbreviation() string {
	if x != nil {
		return x.TranslationDisplayAbbreviation
	}
	return ""
}

func (x *Presentation_BibleReference) GetTranslationInternalAbbreviation() string {
	if x != nil {
		return x.TranslationInternalAbbreviation
	}
	return ""
}

func (x *Presentation_BibleReference) GetBookKey() string {
	if x != nil {
		return x.BookKey
	}
	return ""
}

type Presentation_SocialMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term string     `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Time *Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Presentation_SocialMedia) Reset() {
	*x = Presentation_SocialMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_presentation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation_SocialMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation_SocialMedia) ProtoMessage() {}

func (x *Presentation_SocialMedia) ProtoReflect() protoreflect.Message {
	mi := &file_presentation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation_SocialMedia.ProtoReflect.Descriptor instead.
func (*Presentation_SocialMedia) Descriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Presentation_SocialMedia) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *Presentation_SocialMedia) GetTime() *Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type Presentation_Timeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cues        []*Presentation_Timeline_Cue `protobuf:"bytes,1,rep,name=cues,proto3" json:"cues,omitempty"`
	Duration    float64                      `protobuf:"fixed64,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Loop        bool                         `protobuf:"varint,6,opt,name=loop,proto3" json:"loop,omitempty"`
	AudioAction *Action                      `protobuf:"bytes,8,opt,name=audio_action,json=audioAction,proto3" json:"audio_action,omitempty"`
}

func (x *Presentation_Timeline) Reset() {
	*x = Presentation_Timeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_presentation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation_Timeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation_Timeline) ProtoMessage() {}

func (x *Presentation_Timeline) ProtoReflect() protoreflect.Message {
	mi := &file_presentation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation_Timeline.ProtoReflect.Descriptor instead.
func (*Presentation_Timeline) Descriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Presentation_Timeline) GetCues() []*Presentation_Timeline_Cue {
	if x != nil {
		return x.Cues
	}
	return nil
}

func (x *Presentation_Timeline) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Presentation_Timeline) GetLoop() bool {
	if x != nil {
		return x.Loop
	}
	return false
}

func (x *Presentation_Timeline) GetAudioAction() *Action {
	if x != nil {
		return x.AudioAction
	}
	return nil
}

type Presentation_Arrangement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid             *UUID   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GroupIdentifiers []*UUID `protobuf:"bytes,3,rep,name=group_identifiers,json=groupIdentifiers,proto3" json:"group_identifiers,omitempty"`
}

func (x *Presentation_Arrangement) Reset() {
	*x = Presentation_Arrangement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_presentation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation_Arrangement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation_Arrangement) ProtoMessage() {}

func (x *Presentation_Arrangement) ProtoReflect() protoreflect.Message {
	mi := &file_presentation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation_Arrangement.ProtoReflect.Descriptor instead.
func (*Presentation_Arrangement) Descriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Presentation_Arrangement) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Presentation_Arrangement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Presentation_Arrangement) GetGroupIdentifiers() []*UUID {
	if x != nil {
		return x.GroupIdentifiers
	}
	return nil
}

type Presentation_CueGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group          *Group  `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	CueIdentifiers []*UUID `protobuf:"bytes,2,rep,name=cue_identifiers,json=cueIdentifiers,proto3" json:"cue_identifiers,omitempty"`
}

func (x *Presentation_CueGroup) Reset() {
	*x = Presentation_CueGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_presentation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation_CueGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation_CueGroup) ProtoMessage() {}

func (x *Presentation_CueGroup) ProtoReflect() protoreflect.Message {
	mi := &file_presentation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation_CueGroup.ProtoReflect.Descriptor instead.
func (*Presentation_CueGroup) Descriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Presentation_CueGroup) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Presentation_CueGroup) GetCueIdentifiers() []*UUID {
	if x != nil {
		return x.CueIdentifiers
	}
	return nil
}

type Presentation_MultiTracksLicensing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SongIdentifier     int64                                          `protobuf:"varint,1,opt,name=song_identifier,json=songIdentifier,proto3" json:"song_identifier,omitempty"`
	CustomerIdentifier string                                         `protobuf:"bytes,2,opt,name=customer_identifier,json=customerIdentifier,proto3" json:"customer_identifier,omitempty"`
	ExpirationDate     *Timestamp                                     `protobuf:"bytes,3,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	LicenseExpiration  *Timestamp                                     `protobuf:"bytes,4,opt,name=license_expiration,json=licenseExpiration,proto3" json:"license_expiration,omitempty"`
	Subscription       Presentation_MultiTracksLicensing_Subscription `protobuf:"varint,5,opt,name=subscription,proto3,enum=rv.data.Presentation_MultiTracksLicensing_Subscription" json:"subscription,omitempty"`
}

func (x *Presentation_MultiTracksLicensing) Reset() {
	*x = Presentation_MultiTracksLicensing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_presentation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation_MultiTracksLicensing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation_MultiTracksLicensing) ProtoMessage() {}

func (x *Presentation_MultiTracksLicensing) ProtoReflect() protoreflect.Message {
	mi := &file_presentation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation_MultiTracksLicensing.ProtoReflect.Descriptor instead.
func (*Presentation_MultiTracksLicensing) Descriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Presentation_MultiTracksLicensing) GetSongIdentifier() int64 {
	if x != nil {
		return x.SongIdentifier
	}
	return 0
}

func (x *Presentation_MultiTracksLicensing) GetCustomerIdentifier() string {
	if x != nil {
		return x.CustomerIdentifier
	}
	return ""
}

func (x *Presentation_MultiTracksLicensing) GetExpirationDate() *Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Presentation_MultiTracksLicensing) GetLicenseExpiration() *Timestamp {
	if x != nil {
		return x.LicenseExpiration
	}
	return nil
}

func (x *Presentation_MultiTracksLicensing) GetSubscription() Presentation_MultiTracksLicensing_Subscription {
	if x != nil {
		return x.Subscription
	}
	return Presentation_MultiTracksLicensing_SUBSCRIPTION_CHART_PRO
}

type Presentation_Music struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalMusicKey string         `protobuf:"bytes,1,opt,name=original_music_key,json=originalMusicKey,proto3" json:"original_music_key,omitempty"`
	UserMusicKey     string         `protobuf:"bytes,2,opt,name=user_music_key,json=userMusicKey,proto3" json:"user_music_key,omitempty"`
	Original         *MusicKeyScale `protobuf:"bytes,3,opt,name=original,proto3" json:"original,omitempty"`
	User             *MusicKeyScale `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Presentation_Music) Reset() {
	*x = Presentation_Music{}
	if protoimpl.UnsafeEnabled {
		mi := &file_presentation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation_Music) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation_Music) ProtoMessage() {}

func (x *Presentation_Music) ProtoReflect() protoreflect.Message {
	mi := &file_presentation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation_Music.ProtoReflect.Descriptor instead.
func (*Presentation_Music) Descriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Presentation_Music) GetOriginalMusicKey() string {
	if x != nil {
		return x.OriginalMusicKey
	}
	return ""
}

func (x *Presentation_Music) GetUserMusicKey() string {
	if x != nil {
		return x.UserMusicKey
	}
	return ""
}

func (x *Presentation_Music) GetOriginal() *MusicKeyScale {
	if x != nil {
		return x.Original
	}
	return nil
}

func (x *Presentation_Music) GetUser() *MusicKeyScale {
	if x != nil {
		return x.User
	}
	return nil
}

type Presentation_Timeline_Cue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerTime float64 `protobuf:"fixed64,1,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to TriggerInfo:
	//	*Presentation_Timeline_Cue_CueId
	//	*Presentation_Timeline_Cue_MediaAction
	TriggerInfo isPresentation_Timeline_Cue_TriggerInfo `protobuf_oneof:"trigger_info"`
}

func (x *Presentation_Timeline_Cue) Reset() {
	*x = Presentation_Timeline_Cue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_presentation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation_Timeline_Cue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation_Timeline_Cue) ProtoMessage() {}

func (x *Presentation_Timeline_Cue) ProtoReflect() protoreflect.Message {
	mi := &file_presentation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation_Timeline_Cue.ProtoReflect.Descriptor instead.
func (*Presentation_Timeline_Cue) Descriptor() ([]byte, []int) {
	return file_presentation_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Presentation_Timeline_Cue) GetTriggerTime() float64 {
	if x != nil {
		return x.TriggerTime
	}
	return 0
}

func (x *Presentation_Timeline_Cue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Presentation_Timeline_Cue) GetTriggerInfo() isPresentation_Timeline_Cue_TriggerInfo {
	if m != nil {
		return m.TriggerInfo
	}
	return nil
}

func (x *Presentation_Timeline_Cue) GetCueId() *UUID {
	if x, ok := x.GetTriggerInfo().(*Presentation_Timeline_Cue_CueId); ok {
		return x.CueId
	}
	return nil
}

func (x *Presentation_Timeline_Cue) GetMediaAction() *Action {
	if x, ok := x.GetTriggerInfo().(*Presentation_Timeline_Cue_MediaAction); ok {
		return x.MediaAction
	}
	return nil
}

type isPresentation_Timeline_Cue_TriggerInfo interface {
	isPresentation_Timeline_Cue_TriggerInfo()
}

type Presentation_Timeline_Cue_CueId struct {
	CueId *UUID `protobuf:"bytes,2,opt,name=cue_id,json=cueId,proto3,oneof"`
}

type Presentation_Timeline_Cue_MediaAction struct {
	MediaAction *Action `protobuf:"bytes,4,opt,name=media_action,json=mediaAction,proto3,oneof"`
}

func (*Presentation_Timeline_Cue_CueId) isPresentation_Timeline_Cue_TriggerInfo() {}

func (*Presentation_Timeline_Cue_MediaAction) isPresentation_Timeline_Cue_TriggerInfo() {}

var File_presentation_proto protoreflect.FileDescriptor

var file_presentation_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x63,
	0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x19, 0x0a, 0x0c, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x72,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x0a, 0x63, 0x68, 0x6f,
	0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x75, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x63, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x20, 0x0a, 0x04, 0x63, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x75, 0x65, 0x52, 0x04, 0x63, 0x75, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x63, 0x6c, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x43, 0x4c, 0x49, 0x52, 0x04, 0x63, 0x63, 0x6c,
	0x69, 0x12, 0x4d, 0x0a, 0x0f, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0e, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x44, 0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x3a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x14,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x05, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x94, 0x02, 0x0a, 0x04, 0x43, 0x43, 0x4c, 0x49, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x6e, 0x67, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x94, 0x03,
	0x0a, 0x0e, 0x42, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a,
	0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x62, 0x62,
	0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6b, 0x4b, 0x65, 0x79, 0x1a, 0x49, 0x0a, 0x0b, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a,
	0xd3, 0x02, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x63, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x75, 0x65, 0x52, 0x04,
	0x63, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6c, 0x6f, 0x6f, 0x70, 0x12, 0x32, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xaa, 0x01, 0x0a, 0x03, 0x43, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x48, 0x00, 0x52, 0x05, 0x63, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x80, 0x01, 0x0a, 0x0b, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x11,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x68, 0x0a, 0x08, 0x43, 0x75, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x0e, 0x63, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x1a, 0x95, 0x03, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x4c, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x10, 0x01, 0x1a, 0xbb, 0x01, 0x0a, 0x05, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x53, 0x10, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x68,
	0x6f, 0x77, 0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_presentation_proto_rawDescOnce sync.Once
	file_presentation_proto_rawDescData = file_presentation_proto_rawDesc
)

func file_presentation_proto_rawDescGZIP() []byte {
	file_presentation_proto_rawDescOnce.Do(func() {
		file_presentation_proto_rawDescData = protoimpl.X.CompressGZIP(file_presentation_proto_rawDescData)
	})
	return file_presentation_proto_rawDescData
}

var file_presentation_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_presentation_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_presentation_proto_goTypes = []interface{}{
	(Presentation_ContentDestination)(0),                // 0: rv.data.Presentation.ContentDestination
	(Presentation_MultiTracksLicensing_Subscription)(0), // 1: rv.data.Presentation.MultiTracksLicensing.Subscription
	(*Presentation)(nil),                                // 2: rv.data.Presentation
	(*Presentation_CCLI)(nil),                           // 3: rv.data.Presentation.CCLI
	(*Presentation_BibleReference)(nil),                 // 4: rv.data.Presentation.BibleReference
	(*Presentation_SocialMedia)(nil),                    // 5: rv.data.Presentation.SocialMedia
	(*Presentation_Timeline)(nil),                       // 6: rv.data.Presentation.Timeline
	(*Presentation_Arrangement)(nil),                    // 7: rv.data.Presentation.Arrangement
	(*Presentation_CueGroup)(nil),                       // 8: rv.data.Presentation.CueGroup
	(*Presentation_MultiTracksLicensing)(nil),           // 9: rv.data.Presentation.MultiTracksLicensing
	(*Presentation_Music)(nil),                          // 10: rv.data.Presentation.Music
	(*Presentation_Timeline_Cue)(nil),                   // 11: rv.data.Presentation.Timeline.Cue
	(*ApplicationInfo)(nil),                             // 12: rv.data.ApplicationInfo
	(*UUID)(nil),                                        // 13: rv.data.UUID
	(*Timestamp)(nil),                                   // 14: rv.data.Timestamp
	(*Background)(nil),                                  // 15: rv.data.Background
	(*URL)(nil),                                         // 16: rv.data.URL
	(*Cue)(nil),                                         // 17: rv.data.Cue
	(*Transition)(nil),                                  // 18: rv.data.Transition
	(*IntRange)(nil),                                    // 19: rv.data.IntRange
	(*Action)(nil),                                      // 20: rv.data.Action
	(*Group)(nil),                                       // 21: rv.data.Group
	(*MusicKeyScale)(nil),                               // 22: rv.data.MusicKeyScale
}
var file_presentation_proto_depIdxs = []int32{
	12, // 0: rv.data.Presentation.application_info:type_name -> rv.data.ApplicationInfo
	13, // 1: rv.data.Presentation.uuid:type_name -> rv.data.UUID
	14, // 2: rv.data.Presentation.last_date_used:type_name -> rv.data.Timestamp
	14, // 3: rv.data.Presentation.last_modified_date:type_name -> rv.data.Timestamp
	15, // 4: rv.data.Presentation.background:type_name -> rv.data.Background
	16, // 5: rv.data.Presentation.chord_chart:type_name -> rv.data.URL
	13, // 6: rv.data.Presentation.selected_arrangement:type_name -> rv.data.UUID
	7,  // 7: rv.data.Presentation.arrangements:type_name -> rv.data.Presentation.Arrangement
	8,  // 8: rv.data.Presentation.cue_groups:type_name -> rv.data.Presentation.CueGroup
	17, // 9: rv.data.Presentation.cues:type_name -> rv.data.Cue
	3,  // 10: rv.data.Presentation.ccli:type_name -> rv.data.Presentation.CCLI
	4,  // 11: rv.data.Presentation.bible_reference:type_name -> rv.data.Presentation.BibleReference
	5,  // 12: rv.data.Presentation.social_media:type_name -> rv.data.Presentation.SocialMedia
	6,  // 13: rv.data.Presentation.timeline:type_name -> rv.data.Presentation.Timeline
	18, // 14: rv.data.Presentation.transition:type_name -> rv.data.Transition
	0,  // 15: rv.data.Presentation.content_destination:type_name -> rv.data.Presentation.ContentDestination
	9,  // 16: rv.data.Presentation.multi_tracks_licensing:type_name -> rv.data.Presentation.MultiTracksLicensing
	10, // 17: rv.data.Presentation.music:type_name -> rv.data.Presentation.Music
	19, // 18: rv.data.Presentation.BibleReference.chapter_range:type_name -> rv.data.IntRange
	19, // 19: rv.data.Presentation.BibleReference.verse_range:type_name -> rv.data.IntRange
	14, // 20: rv.data.Presentation.SocialMedia.time:type_name -> rv.data.Timestamp
	11, // 21: rv.data.Presentation.Timeline.cues:type_name -> rv.data.Presentation.Timeline.Cue
	20, // 22: rv.data.Presentation.Timeline.audio_action:type_name -> rv.data.Action
	13, // 23: rv.data.Presentation.Arrangement.uuid:type_name -> rv.data.UUID
	13, // 24: rv.data.Presentation.Arrangement.group_identifiers:type_name -> rv.data.UUID
	21, // 25: rv.data.Presentation.CueGroup.group:type_name -> rv.data.Group
	13, // 26: rv.data.Presentation.CueGroup.cue_identifiers:type_name -> rv.data.UUID
	14, // 27: rv.data.Presentation.MultiTracksLicensing.expiration_date:type_name -> rv.data.Timestamp
	14, // 28: rv.data.Presentation.MultiTracksLicensing.license_expiration:type_name -> rv.data.Timestamp
	1,  // 29: rv.data.Presentation.MultiTracksLicensing.subscription:type_name -> rv.data.Presentation.MultiTracksLicensing.Subscription
	22, // 30: rv.data.Presentation.Music.original:type_name -> rv.data.MusicKeyScale
	22, // 31: rv.data.Presentation.Music.user:type_name -> rv.data.MusicKeyScale
	13, // 32: rv.data.Presentation.Timeline.Cue.cue_id:type_name -> rv.data.UUID
	20, // 33: rv.data.Presentation.Timeline.Cue.media_action:type_name -> rv.data.Action
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_presentation_proto_init() }
func file_presentation_proto_init() {
	if File_presentation_proto != nil {
		return
	}
	file_action_proto_init()
	file_basicTypes_proto_init()
	file_cue_proto_init()
	file_timestamp_proto_init()
	file_background_proto_init()
	file_effects_proto_init()
	file_groups_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_presentation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_presentation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation_CCLI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_presentation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation_BibleReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_presentation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation_SocialMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_presentation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation_Timeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_presentation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation_Arrangement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_presentation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation_CueGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_presentation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation_MultiTracksLicensing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_presentation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation_Music); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_presentation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation_Timeline_Cue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_presentation_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Presentation_SlideShowDuration)(nil),
	}
	file_presentation_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Presentation_Timeline_Cue_CueId)(nil),
		(*Presentation_Timeline_Cue_MediaAction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_presentation_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_presentation_proto_goTypes,
		DependencyIndexes: file_presentation_proto_depIdxs,
		EnumInfos:         file_presentation_proto_enumTypes,
		MessageInfos:      file_presentation_proto_msgTypes,
	}.Build()
	File_presentation_proto = out.File
	file_presentation_proto_rawDesc = nil
	file_presentation_proto_goTypes = nil
	file_presentation_proto_depIdxs = nil
}
