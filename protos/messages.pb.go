// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: messages.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message_ClearType int32

const (
	Message_CLEAR_TYPE_MANUAL       Message_ClearType = 0
	Message_CLEAR_TYPE_AFTER_TIME   Message_ClearType = 1
	Message_CLEAR_TYPE_AFTER_TIMERS Message_ClearType = 2
)

// Enum value maps for Message_ClearType.
var (
	Message_ClearType_name = map[int32]string{
		0: "CLEAR_TYPE_MANUAL",
		1: "CLEAR_TYPE_AFTER_TIME",
		2: "CLEAR_TYPE_AFTER_TIMERS",
	}
	Message_ClearType_value = map[string]int32{
		"CLEAR_TYPE_MANUAL":       0,
		"CLEAR_TYPE_AFTER_TIME":   1,
		"CLEAR_TYPE_AFTER_TIMERS": 2,
	}
)

func (x Message_ClearType) Enum() *Message_ClearType {
	p := new(Message_ClearType)
	*p = x
	return p
}

func (x Message_ClearType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ClearType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[0].Descriptor()
}

func (Message_ClearType) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[0]
}

func (x Message_ClearType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_ClearType.Descriptor instead.
func (Message_ClearType) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid             *UUID                    `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title            string                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	TimeToRemove     float64                  `protobuf:"fixed64,3,opt,name=time_to_remove,json=timeToRemove,proto3" json:"time_to_remove,omitempty"`
	VisibleOnNetwork bool                     `protobuf:"varint,4,opt,name=visible_on_network,json=visibleOnNetwork,proto3" json:"visible_on_network,omitempty"`
	Template         *Template_Identification `protobuf:"bytes,6,opt,name=template,proto3" json:"template,omitempty"`
	ClearType        Message_ClearType        `protobuf:"varint,9,opt,name=clear_type,json=clearType,proto3,enum=rv.data.Message_ClearType" json:"clear_type,omitempty"`
	MessageText      string                   `protobuf:"bytes,10,opt,name=message_text,json=messageText,proto3" json:"message_text,omitempty"`
	Tokens           []*Message_Token         `protobuf:"bytes,11,rep,name=tokens,proto3" json:"tokens,omitempty"`
	TokenValues      []*Message_TokenValue    `protobuf:"bytes,12,rep,name=token_values,json=tokenValues,proto3" json:"token_values,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Message) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Message) GetTimeToRemove() float64 {
	if x != nil {
		return x.TimeToRemove
	}
	return 0
}

func (x *Message) GetVisibleOnNetwork() bool {
	if x != nil {
		return x.VisibleOnNetwork
	}
	return false
}

func (x *Message) GetTemplate() *Template_Identification {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Message) GetClearType() Message_ClearType {
	if x != nil {
		return x.ClearType
	}
	return Message_CLEAR_TYPE_MANUAL
}

func (x *Message) GetMessageText() string {
	if x != nil {
		return x.MessageText
	}
	return ""
}

func (x *Message) GetTokens() []*Message_Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *Message) GetTokenValues() []*Message_TokenValue {
	if x != nil {
		return x.TokenValues
	}
	return nil
}

type MessageDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationInfo *ApplicationInfo `protobuf:"bytes,1,opt,name=application_info,json=applicationInfo,proto3" json:"application_info,omitempty"`
	Messages        []*Message       `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *MessageDocument) Reset() {
	*x = MessageDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDocument) ProtoMessage() {}

func (x *MessageDocument) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDocument.ProtoReflect.Descriptor instead.
func (*MessageDocument) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *MessageDocument) GetApplicationInfo() *ApplicationInfo {
	if x != nil {
		return x.ApplicationInfo
	}
	return nil
}

func (x *MessageDocument) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type Message_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid *UUID `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to TokenType:
	//	*Message_Token_Text
	//	*Message_Token_Timer
	//	*Message_Token_Clock
	TokenType isMessage_Token_TokenType `protobuf_oneof:"TokenType"`
}

func (x *Message_Token) Reset() {
	*x = Message_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Token) ProtoMessage() {}

func (x *Message_Token) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Token.ProtoReflect.Descriptor instead.
func (*Message_Token) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Message_Token) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (m *Message_Token) GetTokenType() isMessage_Token_TokenType {
	if m != nil {
		return m.TokenType
	}
	return nil
}

func (x *Message_Token) GetText() *Message_Token_TokenTypeText {
	if x, ok := x.GetTokenType().(*Message_Token_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Message_Token) GetTimer() *Message_Token_TokenTypeTimer {
	if x, ok := x.GetTokenType().(*Message_Token_Timer); ok {
		return x.Timer
	}
	return nil
}

func (x *Message_Token) GetClock() *Message_Token_TokenTypeClock {
	if x, ok := x.GetTokenType().(*Message_Token_Clock); ok {
		return x.Clock
	}
	return nil
}

type isMessage_Token_TokenType interface {
	isMessage_Token_TokenType()
}

type Message_Token_Text struct {
	Text *Message_Token_TokenTypeText `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type Message_Token_Timer struct {
	Timer *Message_Token_TokenTypeTimer `protobuf:"bytes,3,opt,name=timer,proto3,oneof"`
}

type Message_Token_Clock struct {
	Clock *Message_Token_TokenTypeClock `protobuf:"bytes,4,opt,name=clock,proto3,oneof"`
}

func (*Message_Token_Text) isMessage_Token_TokenType() {}

func (*Message_Token_Timer) isMessage_Token_TokenType() {}

func (*Message_Token_Clock) isMessage_Token_TokenType() {}

type Message_TokenValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   *UUID  `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenName string `protobuf:"bytes,5,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	// Types that are assignable to TokenValueType:
	//	*Message_TokenValue_Text
	//	*Message_TokenValue_Timer
	//	*Message_TokenValue_Clock
	TokenValueType isMessage_TokenValue_TokenValueType `protobuf_oneof:"TokenValueType"`
}

func (x *Message_TokenValue) Reset() {
	*x = Message_TokenValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_TokenValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_TokenValue) ProtoMessage() {}

func (x *Message_TokenValue) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_TokenValue.ProtoReflect.Descriptor instead.
func (*Message_TokenValue) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Message_TokenValue) GetTokenId() *UUID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *Message_TokenValue) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (m *Message_TokenValue) GetTokenValueType() isMessage_TokenValue_TokenValueType {
	if m != nil {
		return m.TokenValueType
	}
	return nil
}

func (x *Message_TokenValue) GetText() *Message_TokenValue_TokenValueText {
	if x, ok := x.GetTokenValueType().(*Message_TokenValue_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Message_TokenValue) GetTimer() *Message_TokenValue_TokenValueTimer {
	if x, ok := x.GetTokenValueType().(*Message_TokenValue_Timer); ok {
		return x.Timer
	}
	return nil
}

func (x *Message_TokenValue) GetClock() *Message_TokenValue_TokenValueClock {
	if x, ok := x.GetTokenValueType().(*Message_TokenValue_Clock); ok {
		return x.Clock
	}
	return nil
}

type isMessage_TokenValue_TokenValueType interface {
	isMessage_TokenValue_TokenValueType()
}

type Message_TokenValue_Text struct {
	Text *Message_TokenValue_TokenValueText `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type Message_TokenValue_Timer struct {
	Timer *Message_TokenValue_TokenValueTimer `protobuf:"bytes,3,opt,name=timer,proto3,oneof"`
}

type Message_TokenValue_Clock struct {
	Clock *Message_TokenValue_TokenValueClock `protobuf:"bytes,4,opt,name=clock,proto3,oneof"`
}

func (*Message_TokenValue_Text) isMessage_TokenValue_TokenValueType() {}

func (*Message_TokenValue_Timer) isMessage_TokenValue_TokenValueType() {}

func (*Message_TokenValue_Clock) isMessage_TokenValue_TokenValueType() {}

type Message_Token_TokenTypeText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Message_Token_TokenTypeText) Reset() {
	*x = Message_Token_TokenTypeText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Token_TokenTypeText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Token_TokenTypeText) ProtoMessage() {}

func (x *Message_Token_TokenTypeText) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Token_TokenTypeText.ProtoReflect.Descriptor instead.
func (*Message_Token_TokenTypeText) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Message_Token_TokenTypeText) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Message_Token_TokenTypeTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TimerUuid *UUID  `protobuf:"bytes,2,opt,name=timer_uuid,json=timerUuid,proto3" json:"timer_uuid,omitempty"`
}

func (x *Message_Token_TokenTypeTimer) Reset() {
	*x = Message_Token_TokenTypeTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Token_TokenTypeTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Token_TokenTypeTimer) ProtoMessage() {}

func (x *Message_Token_TokenTypeTimer) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Token_TokenTypeTimer.ProtoReflect.Descriptor instead.
func (*Message_Token_TokenTypeTimer) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Message_Token_TokenTypeTimer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Message_Token_TokenTypeTimer) GetTimerUuid() *UUID {
	if x != nil {
		return x.TimerUuid
	}
	return nil
}

type Message_Token_TokenTypeClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Message_Token_TokenTypeClock) Reset() {
	*x = Message_Token_TokenTypeClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Token_TokenTypeClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Token_TokenTypeClock) ProtoMessage() {}

func (x *Message_Token_TokenTypeClock) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Token_TokenTypeClock.ProtoReflect.Descriptor instead.
func (*Message_Token_TokenTypeClock) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 0, 2}
}

type Message_TokenValue_TokenValueText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Message_TokenValue_TokenValueText) Reset() {
	*x = Message_TokenValue_TokenValueText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_TokenValue_TokenValueText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_TokenValue_TokenValueText) ProtoMessage() {}

func (x *Message_TokenValue_TokenValueText) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_TokenValue_TokenValueText.ProtoReflect.Descriptor instead.
func (*Message_TokenValue_TokenValueText) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Message_TokenValue_TokenValueText) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Message_TokenValue_TokenValueTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *Timer_Configuration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Format        *Timer_Format        `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Message_TokenValue_TokenValueTimer) Reset() {
	*x = Message_TokenValue_TokenValueTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_TokenValue_TokenValueTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_TokenValue_TokenValueTimer) ProtoMessage() {}

func (x *Message_TokenValue_TokenValueTimer) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_TokenValue_TokenValueTimer.ProtoReflect.Descriptor instead.
func (*Message_TokenValue_TokenValueTimer) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Message_TokenValue_TokenValueTimer) GetConfiguration() *Timer_Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Message_TokenValue_TokenValueTimer) GetFormat() *Timer_Format {
	if x != nil {
		return x.Format
	}
	return nil
}

type Message_TokenValue_TokenValueClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *Clock_Format `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Message_TokenValue_TokenValueClock) Reset() {
	*x = Message_TokenValue_TokenValueClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_TokenValue_TokenValueClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_TokenValue_TokenValueClock) ProtoMessage() {}

func (x *Message_TokenValue_TokenValueClock) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_TokenValue_TokenValueClock.ProtoReflect.Descriptor instead.
func (*Message_TokenValue_TokenValueClock) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *Message_TokenValue_TokenValueClock) GetFormat() *Clock_Format {
	if x != nil {
		return x.Format
	}
	return nil
}

var File_messages_proto protoreflect.FileDescriptor

var file_messages_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x0b, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e,
	0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x3e,
	0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xfc,
	0x02, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x23, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x52, 0x0a, 0x0e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x10,
	0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x0b, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa4, 0x04,
	0x0a, 0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x1a, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x84, 0x01, 0x0a, 0x0f, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x1a, 0x40, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x53, 0x10, 0x02,
	0x22, 0x84, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData = file_messages_proto_rawDesc
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_proto_rawDescData)
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_messages_proto_goTypes = []interface{}{
	(Message_ClearType)(0),                     // 0: rv.data.Message.ClearType
	(*Message)(nil),                            // 1: rv.data.Message
	(*MessageDocument)(nil),                    // 2: rv.data.MessageDocument
	(*Message_Token)(nil),                      // 3: rv.data.Message.Token
	(*Message_TokenValue)(nil),                 // 4: rv.data.Message.TokenValue
	(*Message_Token_TokenTypeText)(nil),        // 5: rv.data.Message.Token.TokenTypeText
	(*Message_Token_TokenTypeTimer)(nil),       // 6: rv.data.Message.Token.TokenTypeTimer
	(*Message_Token_TokenTypeClock)(nil),       // 7: rv.data.Message.Token.TokenTypeClock
	(*Message_TokenValue_TokenValueText)(nil),  // 8: rv.data.Message.TokenValue.TokenValueText
	(*Message_TokenValue_TokenValueTimer)(nil), // 9: rv.data.Message.TokenValue.TokenValueTimer
	(*Message_TokenValue_TokenValueClock)(nil), // 10: rv.data.Message.TokenValue.TokenValueClock
	(*UUID)(nil),                               // 11: rv.data.UUID
	(*Template_Identification)(nil),            // 12: rv.data.Template.Identification
	(*ApplicationInfo)(nil),                    // 13: rv.data.ApplicationInfo
	(*Timer_Configuration)(nil),                // 14: rv.data.Timer.Configuration
	(*Timer_Format)(nil),                       // 15: rv.data.Timer.Format
	(*Clock_Format)(nil),                       // 16: rv.data.Clock.Format
}
var file_messages_proto_depIdxs = []int32{
	11, // 0: rv.data.Message.uuid:type_name -> rv.data.UUID
	12, // 1: rv.data.Message.template:type_name -> rv.data.Template.Identification
	0,  // 2: rv.data.Message.clear_type:type_name -> rv.data.Message.ClearType
	3,  // 3: rv.data.Message.tokens:type_name -> rv.data.Message.Token
	4,  // 4: rv.data.Message.token_values:type_name -> rv.data.Message.TokenValue
	13, // 5: rv.data.MessageDocument.application_info:type_name -> rv.data.ApplicationInfo
	1,  // 6: rv.data.MessageDocument.messages:type_name -> rv.data.Message
	11, // 7: rv.data.Message.Token.uuid:type_name -> rv.data.UUID
	5,  // 8: rv.data.Message.Token.text:type_name -> rv.data.Message.Token.TokenTypeText
	6,  // 9: rv.data.Message.Token.timer:type_name -> rv.data.Message.Token.TokenTypeTimer
	7,  // 10: rv.data.Message.Token.clock:type_name -> rv.data.Message.Token.TokenTypeClock
	11, // 11: rv.data.Message.TokenValue.token_id:type_name -> rv.data.UUID
	8,  // 12: rv.data.Message.TokenValue.text:type_name -> rv.data.Message.TokenValue.TokenValueText
	9,  // 13: rv.data.Message.TokenValue.timer:type_name -> rv.data.Message.TokenValue.TokenValueTimer
	10, // 14: rv.data.Message.TokenValue.clock:type_name -> rv.data.Message.TokenValue.TokenValueClock
	11, // 15: rv.data.Message.Token.TokenTypeTimer.timer_uuid:type_name -> rv.data.UUID
	14, // 16: rv.data.Message.TokenValue.TokenValueTimer.configuration:type_name -> rv.data.Timer.Configuration
	15, // 17: rv.data.Message.TokenValue.TokenValueTimer.format:type_name -> rv.data.Timer.Format
	16, // 18: rv.data.Message.TokenValue.TokenValueClock.format:type_name -> rv.data.Clock.Format
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	file_basicTypes_proto_init()
	file_template_proto_init()
	file_timers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_TokenValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Token_TokenTypeText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Token_TokenTypeTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Token_TokenTypeClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_TokenValue_TokenValueText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_TokenValue_TokenValueTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_TokenValue_TokenValueClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messages_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Message_Token_Text)(nil),
		(*Message_Token_Timer)(nil),
		(*Message_Token_Clock)(nil),
	}
	file_messages_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Message_TokenValue_Text)(nil),
		(*Message_TokenValue_Timer)(nil),
		(*Message_TokenValue_Clock)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		EnumInfos:         file_messages_proto_enumTypes,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_rawDesc = nil
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
