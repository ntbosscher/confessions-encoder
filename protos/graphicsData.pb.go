// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: graphicsData.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Graphics_Element_FlipMode int32

const (
	Graphics_Element_FLIP_MODE_NONE       Graphics_Element_FlipMode = 0
	Graphics_Element_FLIP_MODE_VERTICAL   Graphics_Element_FlipMode = 1
	Graphics_Element_FLIP_MODE_HORIZONTAL Graphics_Element_FlipMode = 2
	Graphics_Element_FLIP_MODE_BOTH       Graphics_Element_FlipMode = 3
)

// Enum value maps for Graphics_Element_FlipMode.
var (
	Graphics_Element_FlipMode_name = map[int32]string{
		0: "FLIP_MODE_NONE",
		1: "FLIP_MODE_VERTICAL",
		2: "FLIP_MODE_HORIZONTAL",
		3: "FLIP_MODE_BOTH",
	}
	Graphics_Element_FlipMode_value = map[string]int32{
		"FLIP_MODE_NONE":       0,
		"FLIP_MODE_VERTICAL":   1,
		"FLIP_MODE_HORIZONTAL": 2,
		"FLIP_MODE_BOTH":       3,
	}
)

func (x Graphics_Element_FlipMode) Enum() *Graphics_Element_FlipMode {
	p := new(Graphics_Element_FlipMode)
	*p = x
	return p
}

func (x Graphics_Element_FlipMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Element_FlipMode) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[0].Descriptor()
}

func (Graphics_Element_FlipMode) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[0]
}

func (x Graphics_Element_FlipMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Element_FlipMode.Descriptor instead.
func (Graphics_Element_FlipMode) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Graphics_Path_Shape_Type int32

const (
	Graphics_Path_Shape_TYPE_UNKNOWN            Graphics_Path_Shape_Type = 0
	Graphics_Path_Shape_TYPE_RECTANGLE          Graphics_Path_Shape_Type = 1
	Graphics_Path_Shape_TYPE_ELLIPSE            Graphics_Path_Shape_Type = 2
	Graphics_Path_Shape_TYPE_ISOSCELES_TRIANGLE Graphics_Path_Shape_Type = 3
	Graphics_Path_Shape_TYPE_RIGHT_TRIANGLE     Graphics_Path_Shape_Type = 4
	Graphics_Path_Shape_TYPE_RHOMBUS            Graphics_Path_Shape_Type = 5
	Graphics_Path_Shape_TYPE_STAR               Graphics_Path_Shape_Type = 6
	Graphics_Path_Shape_TYPE_POLYGON            Graphics_Path_Shape_Type = 7
	Graphics_Path_Shape_TYPE_CUSTOM             Graphics_Path_Shape_Type = 8
	Graphics_Path_Shape_TYPE_RIGHT_ARROW        Graphics_Path_Shape_Type = 9
	Graphics_Path_Shape_TYPE_DOUBLE_ARROW       Graphics_Path_Shape_Type = 10
	Graphics_Path_Shape_TYPE_ROUNDED_RECTANGLE  Graphics_Path_Shape_Type = 11
)

// Enum value maps for Graphics_Path_Shape_Type.
var (
	Graphics_Path_Shape_Type_name = map[int32]string{
		0:  "TYPE_UNKNOWN",
		1:  "TYPE_RECTANGLE",
		2:  "TYPE_ELLIPSE",
		3:  "TYPE_ISOSCELES_TRIANGLE",
		4:  "TYPE_RIGHT_TRIANGLE",
		5:  "TYPE_RHOMBUS",
		6:  "TYPE_STAR",
		7:  "TYPE_POLYGON",
		8:  "TYPE_CUSTOM",
		9:  "TYPE_RIGHT_ARROW",
		10: "TYPE_DOUBLE_ARROW",
		11: "TYPE_ROUNDED_RECTANGLE",
	}
	Graphics_Path_Shape_Type_value = map[string]int32{
		"TYPE_UNKNOWN":            0,
		"TYPE_RECTANGLE":          1,
		"TYPE_ELLIPSE":            2,
		"TYPE_ISOSCELES_TRIANGLE": 3,
		"TYPE_RIGHT_TRIANGLE":     4,
		"TYPE_RHOMBUS":            5,
		"TYPE_STAR":               6,
		"TYPE_POLYGON":            7,
		"TYPE_CUSTOM":             8,
		"TYPE_RIGHT_ARROW":        9,
		"TYPE_DOUBLE_ARROW":       10,
		"TYPE_ROUNDED_RECTANGLE":  11,
	}
)

func (x Graphics_Path_Shape_Type) Enum() *Graphics_Path_Shape_Type {
	p := new(Graphics_Path_Shape_Type)
	*p = x
	return p
}

func (x Graphics_Path_Shape_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Path_Shape_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[1].Descriptor()
}

func (Graphics_Path_Shape_Type) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[1]
}

func (x Graphics_Path_Shape_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Path_Shape_Type.Descriptor instead.
func (Graphics_Path_Shape_Type) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 5, 1, 0}
}

type Graphics_Gradient_Type int32

const (
	Graphics_Gradient_TYPE_LINEAR Graphics_Gradient_Type = 0
	Graphics_Gradient_TYPE_RADIAL Graphics_Gradient_Type = 1
	Graphics_Gradient_TYPE_ANGLE  Graphics_Gradient_Type = 2
)

// Enum value maps for Graphics_Gradient_Type.
var (
	Graphics_Gradient_Type_name = map[int32]string{
		0: "TYPE_LINEAR",
		1: "TYPE_RADIAL",
		2: "TYPE_ANGLE",
	}
	Graphics_Gradient_Type_value = map[string]int32{
		"TYPE_LINEAR": 0,
		"TYPE_RADIAL": 1,
		"TYPE_ANGLE":  2,
	}
)

func (x Graphics_Gradient_Type) Enum() *Graphics_Gradient_Type {
	p := new(Graphics_Gradient_Type)
	*p = x
	return p
}

func (x Graphics_Gradient_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Gradient_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[2].Descriptor()
}

func (Graphics_Gradient_Type) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[2]
}

func (x Graphics_Gradient_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Gradient_Type.Descriptor instead.
func (Graphics_Gradient_Type) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 7, 0}
}

type Graphics_Shadow_Style int32

const (
	Graphics_Shadow_STYLE_DROP Graphics_Shadow_Style = 0
)

// Enum value maps for Graphics_Shadow_Style.
var (
	Graphics_Shadow_Style_name = map[int32]string{
		0: "STYLE_DROP",
	}
	Graphics_Shadow_Style_value = map[string]int32{
		"STYLE_DROP": 0,
	}
)

func (x Graphics_Shadow_Style) Enum() *Graphics_Shadow_Style {
	p := new(Graphics_Shadow_Style)
	*p = x
	return p
}

func (x Graphics_Shadow_Style) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Shadow_Style) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[3].Descriptor()
}

func (Graphics_Shadow_Style) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[3]
}

func (x Graphics_Shadow_Style) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Shadow_Style.Descriptor instead.
func (Graphics_Shadow_Style) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 8, 0}
}

type Graphics_Stroke_Style int32

const (
	Graphics_Stroke_STYLE_SOLID_LINE  Graphics_Stroke_Style = 0
	Graphics_Stroke_STYLE_SQUARE_DASH Graphics_Stroke_Style = 1
	Graphics_Stroke_STYLE_SHORT_DASH  Graphics_Stroke_Style = 2
	Graphics_Stroke_STYLE_LONG_DASH   Graphics_Stroke_Style = 3
)

// Enum value maps for Graphics_Stroke_Style.
var (
	Graphics_Stroke_Style_name = map[int32]string{
		0: "STYLE_SOLID_LINE",
		1: "STYLE_SQUARE_DASH",
		2: "STYLE_SHORT_DASH",
		3: "STYLE_LONG_DASH",
	}
	Graphics_Stroke_Style_value = map[string]int32{
		"STYLE_SOLID_LINE":  0,
		"STYLE_SQUARE_DASH": 1,
		"STYLE_SHORT_DASH":  2,
		"STYLE_LONG_DASH":   3,
	}
)

func (x Graphics_Stroke_Style) Enum() *Graphics_Stroke_Style {
	p := new(Graphics_Stroke_Style)
	*p = x
	return p
}

func (x Graphics_Stroke_Style) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Stroke_Style) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[4].Descriptor()
}

func (Graphics_Stroke_Style) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[4]
}

func (x Graphics_Stroke_Style) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Stroke_Style.Descriptor instead.
func (Graphics_Stroke_Style) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 9, 0}
}

type Graphics_Feather_Style int32

const (
	Graphics_Feather_STYLE_INSIDE  Graphics_Feather_Style = 0
	Graphics_Feather_STYLE_CENTER  Graphics_Feather_Style = 1
	Graphics_Feather_STYLE_OUTSIDE Graphics_Feather_Style = 2
)

// Enum value maps for Graphics_Feather_Style.
var (
	Graphics_Feather_Style_name = map[int32]string{
		0: "STYLE_INSIDE",
		1: "STYLE_CENTER",
		2: "STYLE_OUTSIDE",
	}
	Graphics_Feather_Style_value = map[string]int32{
		"STYLE_INSIDE":  0,
		"STYLE_CENTER":  1,
		"STYLE_OUTSIDE": 2,
	}
)

func (x Graphics_Feather_Style) Enum() *Graphics_Feather_Style {
	p := new(Graphics_Feather_Style)
	*p = x
	return p
}

func (x Graphics_Feather_Style) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Feather_Style) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[5].Descriptor()
}

func (Graphics_Feather_Style) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[5]
}

func (x Graphics_Feather_Style) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Feather_Style.Descriptor instead.
func (Graphics_Feather_Style) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 10, 0}
}

type Graphics_Text_VerticalAlignment int32

const (
	Graphics_Text_VERTICAL_ALIGNMENT_TOP    Graphics_Text_VerticalAlignment = 0
	Graphics_Text_VERTICAL_ALIGNMENT_MIDDLE Graphics_Text_VerticalAlignment = 1
	Graphics_Text_VERTICAL_ALIGNMENT_BOTTOM Graphics_Text_VerticalAlignment = 2
)

// Enum value maps for Graphics_Text_VerticalAlignment.
var (
	Graphics_Text_VerticalAlignment_name = map[int32]string{
		0: "VERTICAL_ALIGNMENT_TOP",
		1: "VERTICAL_ALIGNMENT_MIDDLE",
		2: "VERTICAL_ALIGNMENT_BOTTOM",
	}
	Graphics_Text_VerticalAlignment_value = map[string]int32{
		"VERTICAL_ALIGNMENT_TOP":    0,
		"VERTICAL_ALIGNMENT_MIDDLE": 1,
		"VERTICAL_ALIGNMENT_BOTTOM": 2,
	}
)

func (x Graphics_Text_VerticalAlignment) Enum() *Graphics_Text_VerticalAlignment {
	p := new(Graphics_Text_VerticalAlignment)
	*p = x
	return p
}

func (x Graphics_Text_VerticalAlignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_VerticalAlignment) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[6].Descriptor()
}

func (Graphics_Text_VerticalAlignment) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[6]
}

func (x Graphics_Text_VerticalAlignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_VerticalAlignment.Descriptor instead.
func (Graphics_Text_VerticalAlignment) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 0}
}

type Graphics_Text_ScaleBehavior int32

const (
	Graphics_Text_SCALE_BEHAVIOR_NONE                    Graphics_Text_ScaleBehavior = 0
	Graphics_Text_SCALE_BEHAVIOR_ADJUST_CONTAINER_HEIGHT Graphics_Text_ScaleBehavior = 1
	Graphics_Text_SCALE_BEHAVIOR_SCALE_FONT_DOWN         Graphics_Text_ScaleBehavior = 2
	Graphics_Text_SCALE_BEHAVIOR_SCALE_FONT_UP           Graphics_Text_ScaleBehavior = 3
	Graphics_Text_SCALE_BEHAVIOR_SCALE_FONT_UP_DOWN      Graphics_Text_ScaleBehavior = 4
)

// Enum value maps for Graphics_Text_ScaleBehavior.
var (
	Graphics_Text_ScaleBehavior_name = map[int32]string{
		0: "SCALE_BEHAVIOR_NONE",
		1: "SCALE_BEHAVIOR_ADJUST_CONTAINER_HEIGHT",
		2: "SCALE_BEHAVIOR_SCALE_FONT_DOWN",
		3: "SCALE_BEHAVIOR_SCALE_FONT_UP",
		4: "SCALE_BEHAVIOR_SCALE_FONT_UP_DOWN",
	}
	Graphics_Text_ScaleBehavior_value = map[string]int32{
		"SCALE_BEHAVIOR_NONE":                    0,
		"SCALE_BEHAVIOR_ADJUST_CONTAINER_HEIGHT": 1,
		"SCALE_BEHAVIOR_SCALE_FONT_DOWN":         2,
		"SCALE_BEHAVIOR_SCALE_FONT_UP":           3,
		"SCALE_BEHAVIOR_SCALE_FONT_UP_DOWN":      4,
	}
)

func (x Graphics_Text_ScaleBehavior) Enum() *Graphics_Text_ScaleBehavior {
	p := new(Graphics_Text_ScaleBehavior)
	*p = x
	return p
}

func (x Graphics_Text_ScaleBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_ScaleBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[7].Descriptor()
}

func (Graphics_Text_ScaleBehavior) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[7]
}

func (x Graphics_Text_ScaleBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_ScaleBehavior.Descriptor instead.
func (Graphics_Text_ScaleBehavior) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 1}
}

type Graphics_Text_Transform int32

const (
	Graphics_Text_TRANSFORM_NONE                   Graphics_Text_Transform = 0
	Graphics_Text_TRANSFORM_SINGLE_LINE            Graphics_Text_Transform = 1
	Graphics_Text_TRANSFORM_ONE_WORD_PER_LINE      Graphics_Text_Transform = 2
	Graphics_Text_TRANSFORM_ONE_CHARACTER_PER_LINE Graphics_Text_Transform = 3
	Graphics_Text_TRANSFORM_REPLACE_LINE_RETURNS   Graphics_Text_Transform = 4
)

// Enum value maps for Graphics_Text_Transform.
var (
	Graphics_Text_Transform_name = map[int32]string{
		0: "TRANSFORM_NONE",
		1: "TRANSFORM_SINGLE_LINE",
		2: "TRANSFORM_ONE_WORD_PER_LINE",
		3: "TRANSFORM_ONE_CHARACTER_PER_LINE",
		4: "TRANSFORM_REPLACE_LINE_RETURNS",
	}
	Graphics_Text_Transform_value = map[string]int32{
		"TRANSFORM_NONE":                   0,
		"TRANSFORM_SINGLE_LINE":            1,
		"TRANSFORM_ONE_WORD_PER_LINE":      2,
		"TRANSFORM_ONE_CHARACTER_PER_LINE": 3,
		"TRANSFORM_REPLACE_LINE_RETURNS":   4,
	}
)

func (x Graphics_Text_Transform) Enum() *Graphics_Text_Transform {
	p := new(Graphics_Text_Transform)
	*p = x
	return p
}

func (x Graphics_Text_Transform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_Transform) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[8].Descriptor()
}

func (Graphics_Text_Transform) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[8]
}

func (x Graphics_Text_Transform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_Transform.Descriptor instead.
func (Graphics_Text_Transform) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 2}
}

type Graphics_Text_LineFillMask_LineMaskStyle int32

const (
	Graphics_Text_LineFillMask_LINE_MASK_STYLE_FULL_WIDTH     Graphics_Text_LineFillMask_LineMaskStyle = 0
	Graphics_Text_LineFillMask_LINE_MASK_STYLE_LINE_WIDTH     Graphics_Text_LineFillMask_LineMaskStyle = 1
	Graphics_Text_LineFillMask_LINE_MASK_STYLE_MAX_LINE_WIDTH Graphics_Text_LineFillMask_LineMaskStyle = 2
)

// Enum value maps for Graphics_Text_LineFillMask_LineMaskStyle.
var (
	Graphics_Text_LineFillMask_LineMaskStyle_name = map[int32]string{
		0: "LINE_MASK_STYLE_FULL_WIDTH",
		1: "LINE_MASK_STYLE_LINE_WIDTH",
		2: "LINE_MASK_STYLE_MAX_LINE_WIDTH",
	}
	Graphics_Text_LineFillMask_LineMaskStyle_value = map[string]int32{
		"LINE_MASK_STYLE_FULL_WIDTH":     0,
		"LINE_MASK_STYLE_LINE_WIDTH":     1,
		"LINE_MASK_STYLE_MAX_LINE_WIDTH": 2,
	}
)

func (x Graphics_Text_LineFillMask_LineMaskStyle) Enum() *Graphics_Text_LineFillMask_LineMaskStyle {
	p := new(Graphics_Text_LineFillMask_LineMaskStyle)
	*p = x
	return p
}

func (x Graphics_Text_LineFillMask_LineMaskStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_LineFillMask_LineMaskStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[9].Descriptor()
}

func (Graphics_Text_LineFillMask_LineMaskStyle) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[9]
}

func (x Graphics_Text_LineFillMask_LineMaskStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_LineFillMask_LineMaskStyle.Descriptor instead.
func (Graphics_Text_LineFillMask_LineMaskStyle) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 0, 0}
}

type Graphics_Text_ChordPro_Notation int32

const (
	Graphics_Text_ChordPro_NOTATION_CHORDS   Graphics_Text_ChordPro_Notation = 0
	Graphics_Text_ChordPro_NOTATION_NUMBERS  Graphics_Text_ChordPro_Notation = 1
	Graphics_Text_ChordPro_NOTATION_NUMERALS Graphics_Text_ChordPro_Notation = 2
	Graphics_Text_ChordPro_NOTATION_DO_RE_MI Graphics_Text_ChordPro_Notation = 3
)

// Enum value maps for Graphics_Text_ChordPro_Notation.
var (
	Graphics_Text_ChordPro_Notation_name = map[int32]string{
		0: "NOTATION_CHORDS",
		1: "NOTATION_NUMBERS",
		2: "NOTATION_NUMERALS",
		3: "NOTATION_DO_RE_MI",
	}
	Graphics_Text_ChordPro_Notation_value = map[string]int32{
		"NOTATION_CHORDS":   0,
		"NOTATION_NUMBERS":  1,
		"NOTATION_NUMERALS": 2,
		"NOTATION_DO_RE_MI": 3,
	}
)

func (x Graphics_Text_ChordPro_Notation) Enum() *Graphics_Text_ChordPro_Notation {
	p := new(Graphics_Text_ChordPro_Notation)
	*p = x
	return p
}

func (x Graphics_Text_ChordPro_Notation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_ChordPro_Notation) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[10].Descriptor()
}

func (Graphics_Text_ChordPro_Notation) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[10]
}

func (x Graphics_Text_ChordPro_Notation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_ChordPro_Notation.Descriptor instead.
func (Graphics_Text_ChordPro_Notation) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 2, 0}
}

type Graphics_Text_Attributes_Capitalization int32

const (
	Graphics_Text_Attributes_CAPITALIZATION_NONE       Graphics_Text_Attributes_Capitalization = 0
	Graphics_Text_Attributes_CAPITALIZATION_ALL_CAPS   Graphics_Text_Attributes_Capitalization = 1
	Graphics_Text_Attributes_CAPITALIZATION_SMALL_CAPS Graphics_Text_Attributes_Capitalization = 2
	Graphics_Text_Attributes_CAPITALIZATION_TITLE_CASE Graphics_Text_Attributes_Capitalization = 3
	Graphics_Text_Attributes_CAPITALIZATION_START_CASE Graphics_Text_Attributes_Capitalization = 4
)

// Enum value maps for Graphics_Text_Attributes_Capitalization.
var (
	Graphics_Text_Attributes_Capitalization_name = map[int32]string{
		0: "CAPITALIZATION_NONE",
		1: "CAPITALIZATION_ALL_CAPS",
		2: "CAPITALIZATION_SMALL_CAPS",
		3: "CAPITALIZATION_TITLE_CASE",
		4: "CAPITALIZATION_START_CASE",
	}
	Graphics_Text_Attributes_Capitalization_value = map[string]int32{
		"CAPITALIZATION_NONE":       0,
		"CAPITALIZATION_ALL_CAPS":   1,
		"CAPITALIZATION_SMALL_CAPS": 2,
		"CAPITALIZATION_TITLE_CASE": 3,
		"CAPITALIZATION_START_CASE": 4,
	}
)

func (x Graphics_Text_Attributes_Capitalization) Enum() *Graphics_Text_Attributes_Capitalization {
	p := new(Graphics_Text_Attributes_Capitalization)
	*p = x
	return p
}

func (x Graphics_Text_Attributes_Capitalization) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_Attributes_Capitalization) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[11].Descriptor()
}

func (Graphics_Text_Attributes_Capitalization) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[11]
}

func (x Graphics_Text_Attributes_Capitalization) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_Attributes_Capitalization.Descriptor instead.
func (Graphics_Text_Attributes_Capitalization) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 0}
}

type Graphics_Text_Attributes_Underline_Style int32

const (
	Graphics_Text_Attributes_Underline_STYLE_NONE   Graphics_Text_Attributes_Underline_Style = 0
	Graphics_Text_Attributes_Underline_STYLE_SINGLE Graphics_Text_Attributes_Underline_Style = 1
	Graphics_Text_Attributes_Underline_STYLE_THICK  Graphics_Text_Attributes_Underline_Style = 2
	Graphics_Text_Attributes_Underline_STYLE_DOUBLE Graphics_Text_Attributes_Underline_Style = 3
)

// Enum value maps for Graphics_Text_Attributes_Underline_Style.
var (
	Graphics_Text_Attributes_Underline_Style_name = map[int32]string{
		0: "STYLE_NONE",
		1: "STYLE_SINGLE",
		2: "STYLE_THICK",
		3: "STYLE_DOUBLE",
	}
	Graphics_Text_Attributes_Underline_Style_value = map[string]int32{
		"STYLE_NONE":   0,
		"STYLE_SINGLE": 1,
		"STYLE_THICK":  2,
		"STYLE_DOUBLE": 3,
	}
)

func (x Graphics_Text_Attributes_Underline_Style) Enum() *Graphics_Text_Attributes_Underline_Style {
	p := new(Graphics_Text_Attributes_Underline_Style)
	*p = x
	return p
}

func (x Graphics_Text_Attributes_Underline_Style) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_Attributes_Underline_Style) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[12].Descriptor()
}

func (Graphics_Text_Attributes_Underline_Style) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[12]
}

func (x Graphics_Text_Attributes_Underline_Style) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_Attributes_Underline_Style.Descriptor instead.
func (Graphics_Text_Attributes_Underline_Style) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 1, 0}
}

type Graphics_Text_Attributes_Underline_Pattern int32

const (
	Graphics_Text_Attributes_Underline_PATTERN_SOLID        Graphics_Text_Attributes_Underline_Pattern = 0
	Graphics_Text_Attributes_Underline_PATTERN_DOT          Graphics_Text_Attributes_Underline_Pattern = 1
	Graphics_Text_Attributes_Underline_PATTERN_DASH         Graphics_Text_Attributes_Underline_Pattern = 2
	Graphics_Text_Attributes_Underline_PATTERN_DASH_DOT     Graphics_Text_Attributes_Underline_Pattern = 3
	Graphics_Text_Attributes_Underline_PATTERN_DASH_DOT_DOT Graphics_Text_Attributes_Underline_Pattern = 4
)

// Enum value maps for Graphics_Text_Attributes_Underline_Pattern.
var (
	Graphics_Text_Attributes_Underline_Pattern_name = map[int32]string{
		0: "PATTERN_SOLID",
		1: "PATTERN_DOT",
		2: "PATTERN_DASH",
		3: "PATTERN_DASH_DOT",
		4: "PATTERN_DASH_DOT_DOT",
	}
	Graphics_Text_Attributes_Underline_Pattern_value = map[string]int32{
		"PATTERN_SOLID":        0,
		"PATTERN_DOT":          1,
		"PATTERN_DASH":         2,
		"PATTERN_DASH_DOT":     3,
		"PATTERN_DASH_DOT_DOT": 4,
	}
)

func (x Graphics_Text_Attributes_Underline_Pattern) Enum() *Graphics_Text_Attributes_Underline_Pattern {
	p := new(Graphics_Text_Attributes_Underline_Pattern)
	*p = x
	return p
}

func (x Graphics_Text_Attributes_Underline_Pattern) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_Attributes_Underline_Pattern) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[13].Descriptor()
}

func (Graphics_Text_Attributes_Underline_Pattern) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[13]
}

func (x Graphics_Text_Attributes_Underline_Pattern) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_Attributes_Underline_Pattern.Descriptor instead.
func (Graphics_Text_Attributes_Underline_Pattern) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 1, 1}
}

type Graphics_Text_Attributes_Paragraph_Alignment int32

const (
	Graphics_Text_Attributes_Paragraph_ALIGNMENT_LEFT      Graphics_Text_Attributes_Paragraph_Alignment = 0
	Graphics_Text_Attributes_Paragraph_ALIGNMENT_RIGHT     Graphics_Text_Attributes_Paragraph_Alignment = 1
	Graphics_Text_Attributes_Paragraph_ALIGNMENT_CENTER    Graphics_Text_Attributes_Paragraph_Alignment = 2
	Graphics_Text_Attributes_Paragraph_ALIGNMENT_JUSTIFIED Graphics_Text_Attributes_Paragraph_Alignment = 3
	Graphics_Text_Attributes_Paragraph_ALIGNMENT_NATURAL   Graphics_Text_Attributes_Paragraph_Alignment = 4
)

// Enum value maps for Graphics_Text_Attributes_Paragraph_Alignment.
var (
	Graphics_Text_Attributes_Paragraph_Alignment_name = map[int32]string{
		0: "ALIGNMENT_LEFT",
		1: "ALIGNMENT_RIGHT",
		2: "ALIGNMENT_CENTER",
		3: "ALIGNMENT_JUSTIFIED",
		4: "ALIGNMENT_NATURAL",
	}
	Graphics_Text_Attributes_Paragraph_Alignment_value = map[string]int32{
		"ALIGNMENT_LEFT":      0,
		"ALIGNMENT_RIGHT":     1,
		"ALIGNMENT_CENTER":    2,
		"ALIGNMENT_JUSTIFIED": 3,
		"ALIGNMENT_NATURAL":   4,
	}
)

func (x Graphics_Text_Attributes_Paragraph_Alignment) Enum() *Graphics_Text_Attributes_Paragraph_Alignment {
	p := new(Graphics_Text_Attributes_Paragraph_Alignment)
	*p = x
	return p
}

func (x Graphics_Text_Attributes_Paragraph_Alignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_Attributes_Paragraph_Alignment) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[14].Descriptor()
}

func (Graphics_Text_Attributes_Paragraph_Alignment) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[14]
}

func (x Graphics_Text_Attributes_Paragraph_Alignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_Attributes_Paragraph_Alignment.Descriptor instead.
func (Graphics_Text_Attributes_Paragraph_Alignment) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 2, 0}
}

type Graphics_Text_Attributes_Paragraph_TabStop_Alignment int32

const (
	Graphics_Text_Attributes_Paragraph_TabStop_ALIGNMENT_LEFT      Graphics_Text_Attributes_Paragraph_TabStop_Alignment = 0
	Graphics_Text_Attributes_Paragraph_TabStop_ALIGNMENT_RIGHT     Graphics_Text_Attributes_Paragraph_TabStop_Alignment = 1
	Graphics_Text_Attributes_Paragraph_TabStop_ALIGNMENT_CENTER    Graphics_Text_Attributes_Paragraph_TabStop_Alignment = 2
	Graphics_Text_Attributes_Paragraph_TabStop_ALIGNMENT_JUSTIFIED Graphics_Text_Attributes_Paragraph_TabStop_Alignment = 3
	Graphics_Text_Attributes_Paragraph_TabStop_ALIGNMENT_NATURAL   Graphics_Text_Attributes_Paragraph_TabStop_Alignment = 4
)

// Enum value maps for Graphics_Text_Attributes_Paragraph_TabStop_Alignment.
var (
	Graphics_Text_Attributes_Paragraph_TabStop_Alignment_name = map[int32]string{
		0: "ALIGNMENT_LEFT",
		1: "ALIGNMENT_RIGHT",
		2: "ALIGNMENT_CENTER",
		3: "ALIGNMENT_JUSTIFIED",
		4: "ALIGNMENT_NATURAL",
	}
	Graphics_Text_Attributes_Paragraph_TabStop_Alignment_value = map[string]int32{
		"ALIGNMENT_LEFT":      0,
		"ALIGNMENT_RIGHT":     1,
		"ALIGNMENT_CENTER":    2,
		"ALIGNMENT_JUSTIFIED": 3,
		"ALIGNMENT_NATURAL":   4,
	}
)

func (x Graphics_Text_Attributes_Paragraph_TabStop_Alignment) Enum() *Graphics_Text_Attributes_Paragraph_TabStop_Alignment {
	p := new(Graphics_Text_Attributes_Paragraph_TabStop_Alignment)
	*p = x
	return p
}

func (x Graphics_Text_Attributes_Paragraph_TabStop_Alignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_Attributes_Paragraph_TabStop_Alignment) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[15].Descriptor()
}

func (Graphics_Text_Attributes_Paragraph_TabStop_Alignment) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[15]
}

func (x Graphics_Text_Attributes_Paragraph_TabStop_Alignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_Attributes_Paragraph_TabStop_Alignment.Descriptor instead.
func (Graphics_Text_Attributes_Paragraph_TabStop_Alignment) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 2, 0, 0}
}

type Graphics_Text_Attributes_Paragraph_TextList_NumberType int32

const (
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_BOX             Graphics_Text_Attributes_Paragraph_TextList_NumberType = 0
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_CHECK           Graphics_Text_Attributes_Paragraph_TextList_NumberType = 1
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_CIRCLE          Graphics_Text_Attributes_Paragraph_TextList_NumberType = 2
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_DIAMOND         Graphics_Text_Attributes_Paragraph_TextList_NumberType = 3
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_DISC            Graphics_Text_Attributes_Paragraph_TextList_NumberType = 4
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_HYPHEN          Graphics_Text_Attributes_Paragraph_TextList_NumberType = 5
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_SQUARE          Graphics_Text_Attributes_Paragraph_TextList_NumberType = 6
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_DECIMAL         Graphics_Text_Attributes_Paragraph_TextList_NumberType = 7
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_LOWERCASE_ALPHA Graphics_Text_Attributes_Paragraph_TextList_NumberType = 8
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_UPPERCASE_ALPHA Graphics_Text_Attributes_Paragraph_TextList_NumberType = 9
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_LOWERCASE_ROMAN Graphics_Text_Attributes_Paragraph_TextList_NumberType = 10
	Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_UPPERCASE_ROMAN Graphics_Text_Attributes_Paragraph_TextList_NumberType = 11
)

// Enum value maps for Graphics_Text_Attributes_Paragraph_TextList_NumberType.
var (
	Graphics_Text_Attributes_Paragraph_TextList_NumberType_name = map[int32]string{
		0:  "NUMBER_TYPE_BOX",
		1:  "NUMBER_TYPE_CHECK",
		2:  "NUMBER_TYPE_CIRCLE",
		3:  "NUMBER_TYPE_DIAMOND",
		4:  "NUMBER_TYPE_DISC",
		5:  "NUMBER_TYPE_HYPHEN",
		6:  "NUMBER_TYPE_SQUARE",
		7:  "NUMBER_TYPE_DECIMAL",
		8:  "NUMBER_TYPE_LOWERCASE_ALPHA",
		9:  "NUMBER_TYPE_UPPERCASE_ALPHA",
		10: "NUMBER_TYPE_LOWERCASE_ROMAN",
		11: "NUMBER_TYPE_UPPERCASE_ROMAN",
	}
	Graphics_Text_Attributes_Paragraph_TextList_NumberType_value = map[string]int32{
		"NUMBER_TYPE_BOX":             0,
		"NUMBER_TYPE_CHECK":           1,
		"NUMBER_TYPE_CIRCLE":          2,
		"NUMBER_TYPE_DIAMOND":         3,
		"NUMBER_TYPE_DISC":            4,
		"NUMBER_TYPE_HYPHEN":          5,
		"NUMBER_TYPE_SQUARE":          6,
		"NUMBER_TYPE_DECIMAL":         7,
		"NUMBER_TYPE_LOWERCASE_ALPHA": 8,
		"NUMBER_TYPE_UPPERCASE_ALPHA": 9,
		"NUMBER_TYPE_LOWERCASE_ROMAN": 10,
		"NUMBER_TYPE_UPPERCASE_ROMAN": 11,
	}
)

func (x Graphics_Text_Attributes_Paragraph_TextList_NumberType) Enum() *Graphics_Text_Attributes_Paragraph_TextList_NumberType {
	p := new(Graphics_Text_Attributes_Paragraph_TextList_NumberType)
	*p = x
	return p
}

func (x Graphics_Text_Attributes_Paragraph_TextList_NumberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_Attributes_Paragraph_TextList_NumberType) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[16].Descriptor()
}

func (Graphics_Text_Attributes_Paragraph_TextList_NumberType) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[16]
}

func (x Graphics_Text_Attributes_Paragraph_TextList_NumberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_Attributes_Paragraph_TextList_NumberType.Descriptor instead.
func (Graphics_Text_Attributes_Paragraph_TextList_NumberType) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 2, 1, 0}
}

type Graphics_Text_Attributes_CustomAttribute_Capitalization int32

const (
	Graphics_Text_Attributes_CustomAttribute_CAPITALIZATION_NONE       Graphics_Text_Attributes_CustomAttribute_Capitalization = 0
	Graphics_Text_Attributes_CustomAttribute_CAPITALIZATION_ALL_CAPS   Graphics_Text_Attributes_CustomAttribute_Capitalization = 1
	Graphics_Text_Attributes_CustomAttribute_CAPITALIZATION_SMALL_CAPS Graphics_Text_Attributes_CustomAttribute_Capitalization = 2
	Graphics_Text_Attributes_CustomAttribute_CAPITALIZATION_TITLE_CASE Graphics_Text_Attributes_CustomAttribute_Capitalization = 3
	Graphics_Text_Attributes_CustomAttribute_CAPITALIZATION_START_CASE Graphics_Text_Attributes_CustomAttribute_Capitalization = 4
)

// Enum value maps for Graphics_Text_Attributes_CustomAttribute_Capitalization.
var (
	Graphics_Text_Attributes_CustomAttribute_Capitalization_name = map[int32]string{
		0: "CAPITALIZATION_NONE",
		1: "CAPITALIZATION_ALL_CAPS",
		2: "CAPITALIZATION_SMALL_CAPS",
		3: "CAPITALIZATION_TITLE_CASE",
		4: "CAPITALIZATION_START_CASE",
	}
	Graphics_Text_Attributes_CustomAttribute_Capitalization_value = map[string]int32{
		"CAPITALIZATION_NONE":       0,
		"CAPITALIZATION_ALL_CAPS":   1,
		"CAPITALIZATION_SMALL_CAPS": 2,
		"CAPITALIZATION_TITLE_CASE": 3,
		"CAPITALIZATION_START_CASE": 4,
	}
)

func (x Graphics_Text_Attributes_CustomAttribute_Capitalization) Enum() *Graphics_Text_Attributes_CustomAttribute_Capitalization {
	p := new(Graphics_Text_Attributes_CustomAttribute_Capitalization)
	*p = x
	return p
}

func (x Graphics_Text_Attributes_CustomAttribute_Capitalization) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Graphics_Text_Attributes_CustomAttribute_Capitalization) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[17].Descriptor()
}

func (Graphics_Text_Attributes_CustomAttribute_Capitalization) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[17]
}

func (x Graphics_Text_Attributes_CustomAttribute_Capitalization) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Graphics_Text_Attributes_CustomAttribute_Capitalization.Descriptor instead.
func (Graphics_Text_Attributes_CustomAttribute_Capitalization) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 3, 0}
}

type Media_VideoDevice_Type int32

const (
	Media_VideoDevice_TYPE_GENERIC    Media_VideoDevice_Type = 0
	Media_VideoDevice_TYPE_DIRECTSHOW Media_VideoDevice_Type = 1
	Media_VideoDevice_TYPE_BLACKMAGIC Media_VideoDevice_Type = 2
	Media_VideoDevice_TYPE_AJA        Media_VideoDevice_Type = 3
	Media_VideoDevice_TYPE_AV         Media_VideoDevice_Type = 4
	Media_VideoDevice_TYPE_SYPHON     Media_VideoDevice_Type = 5
	Media_VideoDevice_TYPE_NDI        Media_VideoDevice_Type = 6
	Media_VideoDevice_TYPE_BLUEFISH   Media_VideoDevice_Type = 7
)

// Enum value maps for Media_VideoDevice_Type.
var (
	Media_VideoDevice_Type_name = map[int32]string{
		0: "TYPE_GENERIC",
		1: "TYPE_DIRECTSHOW",
		2: "TYPE_BLACKMAGIC",
		3: "TYPE_AJA",
		4: "TYPE_AV",
		5: "TYPE_SYPHON",
		6: "TYPE_NDI",
		7: "TYPE_BLUEFISH",
	}
	Media_VideoDevice_Type_value = map[string]int32{
		"TYPE_GENERIC":    0,
		"TYPE_DIRECTSHOW": 1,
		"TYPE_BLACKMAGIC": 2,
		"TYPE_AJA":        3,
		"TYPE_AV":         4,
		"TYPE_SYPHON":     5,
		"TYPE_NDI":        6,
		"TYPE_BLUEFISH":   7,
	}
)

func (x Media_VideoDevice_Type) Enum() *Media_VideoDevice_Type {
	p := new(Media_VideoDevice_Type)
	*p = x
	return p
}

func (x Media_VideoDevice_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Media_VideoDevice_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[18].Descriptor()
}

func (Media_VideoDevice_Type) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[18]
}

func (x Media_VideoDevice_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Media_VideoDevice_Type.Descriptor instead.
func (Media_VideoDevice_Type) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 1, 0}
}

type Media_TransportProperties_PlaybackBehavior int32

const (
	Media_TransportProperties_PLAYBACK_BEHAVIOR_STOP           Media_TransportProperties_PlaybackBehavior = 0
	Media_TransportProperties_PLAYBACK_BEHAVIOR_LOOP           Media_TransportProperties_PlaybackBehavior = 1
	Media_TransportProperties_PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT Media_TransportProperties_PlaybackBehavior = 2
	Media_TransportProperties_PLAYBACK_BEHAVIOR_LOOP_FOR_TIME  Media_TransportProperties_PlaybackBehavior = 3
)

// Enum value maps for Media_TransportProperties_PlaybackBehavior.
var (
	Media_TransportProperties_PlaybackBehavior_name = map[int32]string{
		0: "PLAYBACK_BEHAVIOR_STOP",
		1: "PLAYBACK_BEHAVIOR_LOOP",
		2: "PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT",
		3: "PLAYBACK_BEHAVIOR_LOOP_FOR_TIME",
	}
	Media_TransportProperties_PlaybackBehavior_value = map[string]int32{
		"PLAYBACK_BEHAVIOR_STOP":           0,
		"PLAYBACK_BEHAVIOR_LOOP":           1,
		"PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT": 2,
		"PLAYBACK_BEHAVIOR_LOOP_FOR_TIME":  3,
	}
)

func (x Media_TransportProperties_PlaybackBehavior) Enum() *Media_TransportProperties_PlaybackBehavior {
	p := new(Media_TransportProperties_PlaybackBehavior)
	*p = x
	return p
}

func (x Media_TransportProperties_PlaybackBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Media_TransportProperties_PlaybackBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[19].Descriptor()
}

func (Media_TransportProperties_PlaybackBehavior) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[19]
}

func (x Media_TransportProperties_PlaybackBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Media_TransportProperties_PlaybackBehavior.Descriptor instead.
func (Media_TransportProperties_PlaybackBehavior) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 5, 0}
}

type Media_DrawingProperties_ScaleBehavior int32

const (
	Media_DrawingProperties_SCALE_BEHAVIOR_FIT     Media_DrawingProperties_ScaleBehavior = 0
	Media_DrawingProperties_SCALE_BEHAVIOR_FILL    Media_DrawingProperties_ScaleBehavior = 1
	Media_DrawingProperties_SCALE_BEHAVIOR_STRETCH Media_DrawingProperties_ScaleBehavior = 2
	Media_DrawingProperties_SCALE_BEHAVIOR_CUSTOM  Media_DrawingProperties_ScaleBehavior = 3
)

// Enum value maps for Media_DrawingProperties_ScaleBehavior.
var (
	Media_DrawingProperties_ScaleBehavior_name = map[int32]string{
		0: "SCALE_BEHAVIOR_FIT",
		1: "SCALE_BEHAVIOR_FILL",
		2: "SCALE_BEHAVIOR_STRETCH",
		3: "SCALE_BEHAVIOR_CUSTOM",
	}
	Media_DrawingProperties_ScaleBehavior_value = map[string]int32{
		"SCALE_BEHAVIOR_FIT":     0,
		"SCALE_BEHAVIOR_FILL":    1,
		"SCALE_BEHAVIOR_STRETCH": 2,
		"SCALE_BEHAVIOR_CUSTOM":  3,
	}
)

func (x Media_DrawingProperties_ScaleBehavior) Enum() *Media_DrawingProperties_ScaleBehavior {
	p := new(Media_DrawingProperties_ScaleBehavior)
	*p = x
	return p
}

func (x Media_DrawingProperties_ScaleBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Media_DrawingProperties_ScaleBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[20].Descriptor()
}

func (Media_DrawingProperties_ScaleBehavior) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[20]
}

func (x Media_DrawingProperties_ScaleBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Media_DrawingProperties_ScaleBehavior.Descriptor instead.
func (Media_DrawingProperties_ScaleBehavior) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 6, 0}
}

type Media_DrawingProperties_ScaleAlignment int32

const (
	Media_DrawingProperties_SCALE_ALIGNMENT_MIDDLE_CENTER Media_DrawingProperties_ScaleAlignment = 0
	Media_DrawingProperties_SCALE_ALIGNMENT_TOP_LEFT      Media_DrawingProperties_ScaleAlignment = 1
	Media_DrawingProperties_SCALE_ALIGNMENT_TOP_CENTER    Media_DrawingProperties_ScaleAlignment = 2
	Media_DrawingProperties_SCALE_ALIGNMENT_TOP_RIGHT     Media_DrawingProperties_ScaleAlignment = 3
	Media_DrawingProperties_SCALE_ALIGNMENT_MIDDLE_RIGHT  Media_DrawingProperties_ScaleAlignment = 4
	Media_DrawingProperties_SCALE_ALIGNMENT_BOTTOM_RIGHT  Media_DrawingProperties_ScaleAlignment = 5
	Media_DrawingProperties_SCALE_ALIGNMENT_BOTTOM_CENTER Media_DrawingProperties_ScaleAlignment = 6
	Media_DrawingProperties_SCALE_ALIGNMENT_BOTTOM_LEFT   Media_DrawingProperties_ScaleAlignment = 7
	Media_DrawingProperties_SCALE_ALIGNMENT_MIDDLE_LEFT   Media_DrawingProperties_ScaleAlignment = 8
)

// Enum value maps for Media_DrawingProperties_ScaleAlignment.
var (
	Media_DrawingProperties_ScaleAlignment_name = map[int32]string{
		0: "SCALE_ALIGNMENT_MIDDLE_CENTER",
		1: "SCALE_ALIGNMENT_TOP_LEFT",
		2: "SCALE_ALIGNMENT_TOP_CENTER",
		3: "SCALE_ALIGNMENT_TOP_RIGHT",
		4: "SCALE_ALIGNMENT_MIDDLE_RIGHT",
		5: "SCALE_ALIGNMENT_BOTTOM_RIGHT",
		6: "SCALE_ALIGNMENT_BOTTOM_CENTER",
		7: "SCALE_ALIGNMENT_BOTTOM_LEFT",
		8: "SCALE_ALIGNMENT_MIDDLE_LEFT",
	}
	Media_DrawingProperties_ScaleAlignment_value = map[string]int32{
		"SCALE_ALIGNMENT_MIDDLE_CENTER": 0,
		"SCALE_ALIGNMENT_TOP_LEFT":      1,
		"SCALE_ALIGNMENT_TOP_CENTER":    2,
		"SCALE_ALIGNMENT_TOP_RIGHT":     3,
		"SCALE_ALIGNMENT_MIDDLE_RIGHT":  4,
		"SCALE_ALIGNMENT_BOTTOM_RIGHT":  5,
		"SCALE_ALIGNMENT_BOTTOM_CENTER": 6,
		"SCALE_ALIGNMENT_BOTTOM_LEFT":   7,
		"SCALE_ALIGNMENT_MIDDLE_LEFT":   8,
	}
)

func (x Media_DrawingProperties_ScaleAlignment) Enum() *Media_DrawingProperties_ScaleAlignment {
	p := new(Media_DrawingProperties_ScaleAlignment)
	*p = x
	return p
}

func (x Media_DrawingProperties_ScaleAlignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Media_DrawingProperties_ScaleAlignment) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[21].Descriptor()
}

func (Media_DrawingProperties_ScaleAlignment) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[21]
}

func (x Media_DrawingProperties_ScaleAlignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Media_DrawingProperties_ScaleAlignment.Descriptor instead.
func (Media_DrawingProperties_ScaleAlignment) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 6, 1}
}

type Media_DrawingProperties_NativeRotationType int32

const (
	Media_DrawingProperties_NATIVE_ROTATION_TYPE_ROTATE_STANDARD Media_DrawingProperties_NativeRotationType = 0
	Media_DrawingProperties_NATIVE_ROTATION_TYPE_ROTATE_90       Media_DrawingProperties_NativeRotationType = 90
	Media_DrawingProperties_NATIVE_ROTATION_TYPE_ROTATE_180      Media_DrawingProperties_NativeRotationType = 180
	Media_DrawingProperties_NATIVE_ROTATION_TYPE_ROTATE_270      Media_DrawingProperties_NativeRotationType = 270
)

// Enum value maps for Media_DrawingProperties_NativeRotationType.
var (
	Media_DrawingProperties_NativeRotationType_name = map[int32]string{
		0:   "NATIVE_ROTATION_TYPE_ROTATE_STANDARD",
		90:  "NATIVE_ROTATION_TYPE_ROTATE_90",
		180: "NATIVE_ROTATION_TYPE_ROTATE_180",
		270: "NATIVE_ROTATION_TYPE_ROTATE_270",
	}
	Media_DrawingProperties_NativeRotationType_value = map[string]int32{
		"NATIVE_ROTATION_TYPE_ROTATE_STANDARD": 0,
		"NATIVE_ROTATION_TYPE_ROTATE_90":       90,
		"NATIVE_ROTATION_TYPE_ROTATE_180":      180,
		"NATIVE_ROTATION_TYPE_ROTATE_270":      270,
	}
)

func (x Media_DrawingProperties_NativeRotationType) Enum() *Media_DrawingProperties_NativeRotationType {
	p := new(Media_DrawingProperties_NativeRotationType)
	*p = x
	return p
}

func (x Media_DrawingProperties_NativeRotationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Media_DrawingProperties_NativeRotationType) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[22].Descriptor()
}

func (Media_DrawingProperties_NativeRotationType) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[22]
}

func (x Media_DrawingProperties_NativeRotationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Media_DrawingProperties_NativeRotationType.Descriptor instead.
func (Media_DrawingProperties_NativeRotationType) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 6, 2}
}

type Media_VideoProperties_FieldType int32

const (
	Media_VideoProperties_FIELD_TYPE_UNKNOWN                Media_VideoProperties_FieldType = 0
	Media_VideoProperties_FIELD_TYPE_PROGRESSIVE            Media_VideoProperties_FieldType = 1
	Media_VideoProperties_FIELD_TYPE_INTERLACED_UPPER_FIRST Media_VideoProperties_FieldType = 2
	Media_VideoProperties_FIELD_TYPE_INTERLACED_LOWER_FIRST Media_VideoProperties_FieldType = 3
)

// Enum value maps for Media_VideoProperties_FieldType.
var (
	Media_VideoProperties_FieldType_name = map[int32]string{
		0: "FIELD_TYPE_UNKNOWN",
		1: "FIELD_TYPE_PROGRESSIVE",
		2: "FIELD_TYPE_INTERLACED_UPPER_FIRST",
		3: "FIELD_TYPE_INTERLACED_LOWER_FIRST",
	}
	Media_VideoProperties_FieldType_value = map[string]int32{
		"FIELD_TYPE_UNKNOWN":                0,
		"FIELD_TYPE_PROGRESSIVE":            1,
		"FIELD_TYPE_INTERLACED_UPPER_FIRST": 2,
		"FIELD_TYPE_INTERLACED_LOWER_FIRST": 3,
	}
)

func (x Media_VideoProperties_FieldType) Enum() *Media_VideoProperties_FieldType {
	p := new(Media_VideoProperties_FieldType)
	*p = x
	return p
}

func (x Media_VideoProperties_FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Media_VideoProperties_FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[23].Descriptor()
}

func (Media_VideoProperties_FieldType) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[23]
}

func (x Media_VideoProperties_FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Media_VideoProperties_FieldType.Descriptor instead.
func (Media_VideoProperties_FieldType) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 7, 0}
}

type Media_VideoProperties_EndBehavior int32

const (
	Media_VideoProperties_END_BEHAVIOR_STOP          Media_VideoProperties_EndBehavior = 0
	Media_VideoProperties_END_BEHAVIOR_STOP_ON_BLACK Media_VideoProperties_EndBehavior = 1
	Media_VideoProperties_END_BEHAVIOR_STOP_ON_CLEAR Media_VideoProperties_EndBehavior = 2
	Media_VideoProperties_END_BEHAVIOR_FADE_TO_BLACK Media_VideoProperties_EndBehavior = 3
	Media_VideoProperties_END_BEHAVIOR_FADE_TO_CLEAR Media_VideoProperties_EndBehavior = 4
)

// Enum value maps for Media_VideoProperties_EndBehavior.
var (
	Media_VideoProperties_EndBehavior_name = map[int32]string{
		0: "END_BEHAVIOR_STOP",
		1: "END_BEHAVIOR_STOP_ON_BLACK",
		2: "END_BEHAVIOR_STOP_ON_CLEAR",
		3: "END_BEHAVIOR_FADE_TO_BLACK",
		4: "END_BEHAVIOR_FADE_TO_CLEAR",
	}
	Media_VideoProperties_EndBehavior_value = map[string]int32{
		"END_BEHAVIOR_STOP":          0,
		"END_BEHAVIOR_STOP_ON_BLACK": 1,
		"END_BEHAVIOR_STOP_ON_CLEAR": 2,
		"END_BEHAVIOR_FADE_TO_BLACK": 3,
		"END_BEHAVIOR_FADE_TO_CLEAR": 4,
	}
)

func (x Media_VideoProperties_EndBehavior) Enum() *Media_VideoProperties_EndBehavior {
	p := new(Media_VideoProperties_EndBehavior)
	*p = x
	return p
}

func (x Media_VideoProperties_EndBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Media_VideoProperties_EndBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_graphicsData_proto_enumTypes[24].Descriptor()
}

func (Media_VideoProperties_EndBehavior) Type() protoreflect.EnumType {
	return &file_graphicsData_proto_enumTypes[24]
}

func (x Media_VideoProperties_EndBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Media_VideoProperties_EndBehavior.Descriptor instead.
func (Media_VideoProperties_EndBehavior) EnumDescriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 7, 1}
}

type Graphics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Graphics) Reset() {
	*x = Graphics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics) ProtoMessage() {}

func (x *Graphics) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics.ProtoReflect.Descriptor instead.
func (*Graphics) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0}
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     *UUID           `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Url      *URL            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Metadata *Media_Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to TypeProperties:
	//	*Media_Audio_
	//	*Media_Image
	//	*Media_Video
	//	*Media_LiveVideo
	//	*Media_WebContent
	TypeProperties isMedia_TypeProperties `protobuf_oneof:"TypeProperties"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1}
}

func (x *Media) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Media) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Media) GetMetadata() *Media_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *Media) GetTypeProperties() isMedia_TypeProperties {
	if m != nil {
		return m.TypeProperties
	}
	return nil
}

func (x *Media) GetAudio() *Media_AudioTypeProperties {
	if x, ok := x.GetTypeProperties().(*Media_Audio_); ok {
		return x.Audio
	}
	return nil
}

func (x *Media) GetImage() *Media_ImageTypeProperties {
	if x, ok := x.GetTypeProperties().(*Media_Image); ok {
		return x.Image
	}
	return nil
}

func (x *Media) GetVideo() *Media_VideoTypeProperties {
	if x, ok := x.GetTypeProperties().(*Media_Video); ok {
		return x.Video
	}
	return nil
}

func (x *Media) GetLiveVideo() *Media_LiveVideoTypeProperties {
	if x, ok := x.GetTypeProperties().(*Media_LiveVideo); ok {
		return x.LiveVideo
	}
	return nil
}

func (x *Media) GetWebContent() *Media_WebContentTypeProperties {
	if x, ok := x.GetTypeProperties().(*Media_WebContent); ok {
		return x.WebContent
	}
	return nil
}

type isMedia_TypeProperties interface {
	isMedia_TypeProperties()
}

type Media_Audio_ struct {
	Audio *Media_AudioTypeProperties `protobuf:"bytes,4,opt,name=audio,proto3,oneof"`
}

type Media_Image struct {
	Image *Media_ImageTypeProperties `protobuf:"bytes,5,opt,name=image,proto3,oneof"`
}

type Media_Video struct {
	Video *Media_VideoTypeProperties `protobuf:"bytes,6,opt,name=video,proto3,oneof"`
}

type Media_LiveVideo struct {
	LiveVideo *Media_LiveVideoTypeProperties `protobuf:"bytes,7,opt,name=live_video,json=liveVideo,proto3,oneof"`
}

type Media_WebContent struct {
	WebContent *Media_WebContentTypeProperties `protobuf:"bytes,8,opt,name=web_content,json=webContent,proto3,oneof"`
}

func (*Media_Audio_) isMedia_TypeProperties() {}

func (*Media_Image) isMedia_TypeProperties() {}

func (*Media_Video) isMedia_TypeProperties() {}

func (*Media_LiveVideo) isMedia_TypeProperties() {}

func (*Media_WebContent) isMedia_TypeProperties() {}

type Graphics_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid              *UUID                     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name              string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bounds            *Graphics_Rect            `protobuf:"bytes,3,opt,name=bounds,proto3" json:"bounds,omitempty"`
	Rotation          float64                   `protobuf:"fixed64,4,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Opacity           float64                   `protobuf:"fixed64,5,opt,name=opacity,proto3" json:"opacity,omitempty"`
	Locked            bool                      `protobuf:"varint,6,opt,name=locked,proto3" json:"locked,omitempty"`
	AspectRatioLocked bool                      `protobuf:"varint,7,opt,name=aspect_ratio_locked,json=aspectRatioLocked,proto3" json:"aspect_ratio_locked,omitempty"`
	Path              *Graphics_Path            `protobuf:"bytes,8,opt,name=path,proto3" json:"path,omitempty"`
	Fill              *Graphics_Fill            `protobuf:"bytes,9,opt,name=fill,proto3" json:"fill,omitempty"`
	Stroke            *Graphics_Stroke          `protobuf:"bytes,10,opt,name=stroke,proto3" json:"stroke,omitempty"`
	Shadow            *Graphics_Shadow          `protobuf:"bytes,11,opt,name=shadow,proto3" json:"shadow,omitempty"`
	Feather           *Graphics_Feather         `protobuf:"bytes,12,opt,name=feather,proto3" json:"feather,omitempty"`
	Text              *Graphics_Text            `protobuf:"bytes,13,opt,name=text,proto3" json:"text,omitempty"`
	FlipMode          Graphics_Element_FlipMode `protobuf:"varint,15,opt,name=flipMode,proto3,enum=rv.data.Graphics_Element_FlipMode" json:"flipMode,omitempty"`
	Hidden            bool                      `protobuf:"varint,16,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Types that are assignable to Mask:
	//	*Graphics_Element_TextLineMask
	Mask isGraphics_Element_Mask `protobuf_oneof:"Mask"`
}

func (x *Graphics_Element) Reset() {
	*x = Graphics_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Element) ProtoMessage() {}

func (x *Graphics_Element) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Element.ProtoReflect.Descriptor instead.
func (*Graphics_Element) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Graphics_Element) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Graphics_Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Graphics_Element) GetBounds() *Graphics_Rect {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *Graphics_Element) GetRotation() float64 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *Graphics_Element) GetOpacity() float64 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *Graphics_Element) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *Graphics_Element) GetAspectRatioLocked() bool {
	if x != nil {
		return x.AspectRatioLocked
	}
	return false
}

func (x *Graphics_Element) GetPath() *Graphics_Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Graphics_Element) GetFill() *Graphics_Fill {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *Graphics_Element) GetStroke() *Graphics_Stroke {
	if x != nil {
		return x.Stroke
	}
	return nil
}

func (x *Graphics_Element) GetShadow() *Graphics_Shadow {
	if x != nil {
		return x.Shadow
	}
	return nil
}

func (x *Graphics_Element) GetFeather() *Graphics_Feather {
	if x != nil {
		return x.Feather
	}
	return nil
}

func (x *Graphics_Element) GetText() *Graphics_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Graphics_Element) GetFlipMode() Graphics_Element_FlipMode {
	if x != nil {
		return x.FlipMode
	}
	return Graphics_Element_FLIP_MODE_NONE
}

func (x *Graphics_Element) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (m *Graphics_Element) GetMask() isGraphics_Element_Mask {
	if m != nil {
		return m.Mask
	}
	return nil
}

func (x *Graphics_Element) GetTextLineMask() *Graphics_Text_LineFillMask {
	if x, ok := x.GetMask().(*Graphics_Element_TextLineMask); ok {
		return x.TextLineMask
	}
	return nil
}

type isGraphics_Element_Mask interface {
	isGraphics_Element_Mask()
}

type Graphics_Element_TextLineMask struct {
	TextLineMask *Graphics_Text_LineFillMask `protobuf:"bytes,14,opt,name=text_line_mask,json=textLineMask,proto3,oneof"`
}

func (*Graphics_Element_TextLineMask) isGraphics_Element_Mask() {}

type Graphics_Rect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *Graphics_Point `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Size   *Graphics_Size  `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Graphics_Rect) Reset() {
	*x = Graphics_Rect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Rect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Rect) ProtoMessage() {}

func (x *Graphics_Rect) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Rect.ProtoReflect.Descriptor instead.
func (*Graphics_Rect) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Graphics_Rect) GetOrigin() *Graphics_Point {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Graphics_Rect) GetSize() *Graphics_Size {
	if x != nil {
		return x.Size
	}
	return nil
}

type Graphics_Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Graphics_Point) Reset() {
	*x = Graphics_Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Point) ProtoMessage() {}

func (x *Graphics_Point) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Point.ProtoReflect.Descriptor instead.
func (*Graphics_Point) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Graphics_Point) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Graphics_Point) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Graphics_Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  float64 `protobuf:"fixed64,1,opt,name=width,proto3" json:"width,omitempty"`
	Height float64 `protobuf:"fixed64,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Graphics_Size) Reset() {
	*x = Graphics_Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Size) ProtoMessage() {}

func (x *Graphics_Size) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Size.ProtoReflect.Descriptor instead.
func (*Graphics_Size) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Graphics_Size) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Graphics_Size) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Graphics_EdgeInsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left   float64 `protobuf:"fixed64,1,opt,name=left,proto3" json:"left,omitempty"`
	Right  float64 `protobuf:"fixed64,2,opt,name=right,proto3" json:"right,omitempty"`
	Top    float64 `protobuf:"fixed64,3,opt,name=top,proto3" json:"top,omitempty"`
	Bottom float64 `protobuf:"fixed64,4,opt,name=bottom,proto3" json:"bottom,omitempty"`
}

func (x *Graphics_EdgeInsets) Reset() {
	*x = Graphics_EdgeInsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_EdgeInsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_EdgeInsets) ProtoMessage() {}

func (x *Graphics_EdgeInsets) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_EdgeInsets.ProtoReflect.Descriptor instead.
func (*Graphics_EdgeInsets) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Graphics_EdgeInsets) GetLeft() float64 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *Graphics_EdgeInsets) GetRight() float64 {
	if x != nil {
		return x.Right
	}
	return 0
}

func (x *Graphics_EdgeInsets) GetTop() float64 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *Graphics_EdgeInsets) GetBottom() float64 {
	if x != nil {
		return x.Bottom
	}
	return 0
}

type Graphics_Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Closed bool                         `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
	Points []*Graphics_Path_BezierPoint `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
	Shape  *Graphics_Path_Shape         `protobuf:"bytes,3,opt,name=shape,proto3" json:"shape,omitempty"`
}

func (x *Graphics_Path) Reset() {
	*x = Graphics_Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Path) ProtoMessage() {}

func (x *Graphics_Path) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Path.ProtoReflect.Descriptor instead.
func (*Graphics_Path) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Graphics_Path) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *Graphics_Path) GetPoints() []*Graphics_Path_BezierPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Graphics_Path) GetShape() *Graphics_Path_Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

type Graphics_Fill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	// Types that are assignable to FillType:
	//	*Graphics_Fill_Color
	//	*Graphics_Fill_Gradient
	//	*Graphics_Fill_Media
	FillType isGraphics_Fill_FillType `protobuf_oneof:"FillType"`
}

func (x *Graphics_Fill) Reset() {
	*x = Graphics_Fill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Fill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Fill) ProtoMessage() {}

func (x *Graphics_Fill) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Fill.ProtoReflect.Descriptor instead.
func (*Graphics_Fill) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Graphics_Fill) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (m *Graphics_Fill) GetFillType() isGraphics_Fill_FillType {
	if m != nil {
		return m.FillType
	}
	return nil
}

func (x *Graphics_Fill) GetColor() *Color {
	if x, ok := x.GetFillType().(*Graphics_Fill_Color); ok {
		return x.Color
	}
	return nil
}

func (x *Graphics_Fill) GetGradient() *Graphics_Gradient {
	if x, ok := x.GetFillType().(*Graphics_Fill_Gradient); ok {
		return x.Gradient
	}
	return nil
}

func (x *Graphics_Fill) GetMedia() *Media {
	if x, ok := x.GetFillType().(*Graphics_Fill_Media); ok {
		return x.Media
	}
	return nil
}

type isGraphics_Fill_FillType interface {
	isGraphics_Fill_FillType()
}

type Graphics_Fill_Color struct {
	Color *Color `protobuf:"bytes,1,opt,name=color,proto3,oneof"`
}

type Graphics_Fill_Gradient struct {
	Gradient *Graphics_Gradient `protobuf:"bytes,2,opt,name=gradient,proto3,oneof"`
}

type Graphics_Fill_Media struct {
	Media *Media `protobuf:"bytes,3,opt,name=media,proto3,oneof"`
}

func (*Graphics_Fill_Color) isGraphics_Fill_FillType() {}

func (*Graphics_Fill_Gradient) isGraphics_Fill_FillType() {}

func (*Graphics_Fill_Media) isGraphics_Fill_FillType() {}

type Graphics_Gradient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   Graphics_Gradient_Type         `protobuf:"varint,1,opt,name=type,proto3,enum=rv.data.Graphics_Gradient_Type" json:"type,omitempty"`
	Angle  float64                        `protobuf:"fixed64,2,opt,name=angle,proto3" json:"angle,omitempty"`
	Length float64                        `protobuf:"fixed64,3,opt,name=length,proto3" json:"length,omitempty"`
	Stops  []*Graphics_Gradient_ColorStop `protobuf:"bytes,4,rep,name=stops,proto3" json:"stops,omitempty"`
}

func (x *Graphics_Gradient) Reset() {
	*x = Graphics_Gradient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Gradient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Gradient) ProtoMessage() {}

func (x *Graphics_Gradient) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Gradient.ProtoReflect.Descriptor instead.
func (*Graphics_Gradient) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Graphics_Gradient) GetType() Graphics_Gradient_Type {
	if x != nil {
		return x.Type
	}
	return Graphics_Gradient_TYPE_LINEAR
}

func (x *Graphics_Gradient) GetAngle() float64 {
	if x != nil {
		return x.Angle
	}
	return 0
}

func (x *Graphics_Gradient) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Graphics_Gradient) GetStops() []*Graphics_Gradient_ColorStop {
	if x != nil {
		return x.Stops
	}
	return nil
}

type Graphics_Shadow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style   Graphics_Shadow_Style `protobuf:"varint,1,opt,name=style,proto3,enum=rv.data.Graphics_Shadow_Style" json:"style,omitempty"`
	Angle   float64               `protobuf:"fixed64,2,opt,name=angle,proto3" json:"angle,omitempty"`
	Offset  float64               `protobuf:"fixed64,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Radius  float64               `protobuf:"fixed64,4,opt,name=radius,proto3" json:"radius,omitempty"`
	Color   *Color                `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Opacity float64               `protobuf:"fixed64,6,opt,name=opacity,proto3" json:"opacity,omitempty"`
	Enable  bool                  `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Graphics_Shadow) Reset() {
	*x = Graphics_Shadow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Shadow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Shadow) ProtoMessage() {}

func (x *Graphics_Shadow) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Shadow.ProtoReflect.Descriptor instead.
func (*Graphics_Shadow) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Graphics_Shadow) GetStyle() Graphics_Shadow_Style {
	if x != nil {
		return x.Style
	}
	return Graphics_Shadow_STYLE_DROP
}

func (x *Graphics_Shadow) GetAngle() float64 {
	if x != nil {
		return x.Angle
	}
	return 0
}

func (x *Graphics_Shadow) GetOffset() float64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Graphics_Shadow) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Graphics_Shadow) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Graphics_Shadow) GetOpacity() float64 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *Graphics_Shadow) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Graphics_Stroke struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style   Graphics_Stroke_Style `protobuf:"varint,1,opt,name=style,proto3,enum=rv.data.Graphics_Stroke_Style" json:"style,omitempty"`
	Width   float64               `protobuf:"fixed64,2,opt,name=width,proto3" json:"width,omitempty"`
	Color   *Color                `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Pattern []float64             `protobuf:"fixed64,4,rep,packed,name=pattern,proto3" json:"pattern,omitempty"`
	Enable  bool                  `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Graphics_Stroke) Reset() {
	*x = Graphics_Stroke{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Stroke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Stroke) ProtoMessage() {}

func (x *Graphics_Stroke) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Stroke.ProtoReflect.Descriptor instead.
func (*Graphics_Stroke) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Graphics_Stroke) GetStyle() Graphics_Stroke_Style {
	if x != nil {
		return x.Style
	}
	return Graphics_Stroke_STYLE_SOLID_LINE
}

func (x *Graphics_Stroke) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Graphics_Stroke) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Graphics_Stroke) GetPattern() []float64 {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *Graphics_Stroke) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Graphics_Feather struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style  Graphics_Feather_Style `protobuf:"varint,1,opt,name=style,proto3,enum=rv.data.Graphics_Feather_Style" json:"style,omitempty"`
	Radius float64                `protobuf:"fixed64,2,opt,name=radius,proto3" json:"radius,omitempty"`
	Enable bool                   `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Graphics_Feather) Reset() {
	*x = Graphics_Feather{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Feather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Feather) ProtoMessage() {}

func (x *Graphics_Feather) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Feather.ProtoReflect.Descriptor instead.
func (*Graphics_Feather) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Graphics_Feather) GetStyle() Graphics_Feather_Style {
	if x != nil {
		return x.Style
	}
	return Graphics_Feather_STYLE_INSIDE
}

func (x *Graphics_Feather) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Graphics_Feather) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Graphics_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes                *Graphics_Text_Attributes       `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Shadow                    *Graphics_Shadow                `protobuf:"bytes,4,opt,name=shadow,proto3" json:"shadow,omitempty"`
	RtfData                   []byte                          `protobuf:"bytes,5,opt,name=rtf_data,json=rtfData,proto3" json:"rtf_data,omitempty"`
	VerticalAlignment         Graphics_Text_VerticalAlignment `protobuf:"varint,6,opt,name=vertical_alignment,json=verticalAlignment,proto3,enum=rv.data.Graphics_Text_VerticalAlignment" json:"vertical_alignment,omitempty"`
	ScaleBehavior             Graphics_Text_ScaleBehavior     `protobuf:"varint,7,opt,name=scale_behavior,json=scaleBehavior,proto3,enum=rv.data.Graphics_Text_ScaleBehavior" json:"scale_behavior,omitempty"`
	Margins                   *Graphics_EdgeInsets            `protobuf:"bytes,8,opt,name=margins,proto3" json:"margins,omitempty"`
	IsSuperscriptStandardized bool                            `protobuf:"varint,9,opt,name=is_superscript_standardized,json=isSuperscriptStandardized,proto3" json:"is_superscript_standardized,omitempty"`
	Transform                 Graphics_Text_Transform         `protobuf:"varint,10,opt,name=transform,proto3,enum=rv.data.Graphics_Text_Transform" json:"transform,omitempty"`
	TransformDelimiter        string                          `protobuf:"bytes,11,opt,name=transformDelimiter,proto3" json:"transformDelimiter,omitempty"`
	ChordPro                  *Graphics_Text_ChordPro         `protobuf:"bytes,12,opt,name=chord_pro,json=chordPro,proto3" json:"chord_pro,omitempty"`
}

func (x *Graphics_Text) Reset() {
	*x = Graphics_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text) ProtoMessage() {}

func (x *Graphics_Text) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text.ProtoReflect.Descriptor instead.
func (*Graphics_Text) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11}
}

func (x *Graphics_Text) GetAttributes() *Graphics_Text_Attributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Graphics_Text) GetShadow() *Graphics_Shadow {
	if x != nil {
		return x.Shadow
	}
	return nil
}

func (x *Graphics_Text) GetRtfData() []byte {
	if x != nil {
		return x.RtfData
	}
	return nil
}

func (x *Graphics_Text) GetVerticalAlignment() Graphics_Text_VerticalAlignment {
	if x != nil {
		return x.VerticalAlignment
	}
	return Graphics_Text_VERTICAL_ALIGNMENT_TOP
}

func (x *Graphics_Text) GetScaleBehavior() Graphics_Text_ScaleBehavior {
	if x != nil {
		return x.ScaleBehavior
	}
	return Graphics_Text_SCALE_BEHAVIOR_NONE
}

func (x *Graphics_Text) GetMargins() *Graphics_EdgeInsets {
	if x != nil {
		return x.Margins
	}
	return nil
}

func (x *Graphics_Text) GetIsSuperscriptStandardized() bool {
	if x != nil {
		return x.IsSuperscriptStandardized
	}
	return false
}

func (x *Graphics_Text) GetTransform() Graphics_Text_Transform {
	if x != nil {
		return x.Transform
	}
	return Graphics_Text_TRANSFORM_NONE
}

func (x *Graphics_Text) GetTransformDelimiter() string {
	if x != nil {
		return x.TransformDelimiter
	}
	return ""
}

func (x *Graphics_Text) GetChordPro() *Graphics_Text_ChordPro {
	if x != nil {
		return x.ChordPro
	}
	return nil
}

type Graphics_Path_BezierPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point  *Graphics_Point `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	Q0     *Graphics_Point `protobuf:"bytes,2,opt,name=q0,proto3" json:"q0,omitempty"`
	Q1     *Graphics_Point `protobuf:"bytes,3,opt,name=q1,proto3" json:"q1,omitempty"`
	Curved bool            `protobuf:"varint,4,opt,name=curved,proto3" json:"curved,omitempty"`
}

func (x *Graphics_Path_BezierPoint) Reset() {
	*x = Graphics_Path_BezierPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Path_BezierPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Path_BezierPoint) ProtoMessage() {}

func (x *Graphics_Path_BezierPoint) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Path_BezierPoint.ProtoReflect.Descriptor instead.
func (*Graphics_Path_BezierPoint) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *Graphics_Path_BezierPoint) GetPoint() *Graphics_Point {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *Graphics_Path_BezierPoint) GetQ0() *Graphics_Point {
	if x != nil {
		return x.Q0
	}
	return nil
}

func (x *Graphics_Path_BezierPoint) GetQ1() *Graphics_Point {
	if x != nil {
		return x.Q1
	}
	return nil
}

func (x *Graphics_Path_BezierPoint) GetCurved() bool {
	if x != nil {
		return x.Curved
	}
	return false
}

type Graphics_Path_Shape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Graphics_Path_Shape_Type `protobuf:"varint,1,opt,name=type,proto3,enum=rv.data.Graphics_Path_Shape_Type" json:"type,omitempty"`
	// Types that are assignable to AdditionalData:
	//	*Graphics_Path_Shape_RoundedRectangle_
	//	*Graphics_Path_Shape_Polygon_
	//	*Graphics_Path_Shape_Star_
	//	*Graphics_Path_Shape_Arrow_
	AdditionalData isGraphics_Path_Shape_AdditionalData `protobuf_oneof:"AdditionalData"`
}

func (x *Graphics_Path_Shape) Reset() {
	*x = Graphics_Path_Shape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Path_Shape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Path_Shape) ProtoMessage() {}

func (x *Graphics_Path_Shape) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Path_Shape.ProtoReflect.Descriptor instead.
func (*Graphics_Path_Shape) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *Graphics_Path_Shape) GetType() Graphics_Path_Shape_Type {
	if x != nil {
		return x.Type
	}
	return Graphics_Path_Shape_TYPE_UNKNOWN
}

func (m *Graphics_Path_Shape) GetAdditionalData() isGraphics_Path_Shape_AdditionalData {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

func (x *Graphics_Path_Shape) GetRoundedRectangle() *Graphics_Path_Shape_RoundedRectangle {
	if x, ok := x.GetAdditionalData().(*Graphics_Path_Shape_RoundedRectangle_); ok {
		return x.RoundedRectangle
	}
	return nil
}

func (x *Graphics_Path_Shape) GetPolygon() *Graphics_Path_Shape_Polygon {
	if x, ok := x.GetAdditionalData().(*Graphics_Path_Shape_Polygon_); ok {
		return x.Polygon
	}
	return nil
}

func (x *Graphics_Path_Shape) GetStar() *Graphics_Path_Shape_Star {
	if x, ok := x.GetAdditionalData().(*Graphics_Path_Shape_Star_); ok {
		return x.Star
	}
	return nil
}

func (x *Graphics_Path_Shape) GetArrow() *Graphics_Path_Shape_Arrow {
	if x, ok := x.GetAdditionalData().(*Graphics_Path_Shape_Arrow_); ok {
		return x.Arrow
	}
	return nil
}

type isGraphics_Path_Shape_AdditionalData interface {
	isGraphics_Path_Shape_AdditionalData()
}

type Graphics_Path_Shape_RoundedRectangle_ struct {
	RoundedRectangle *Graphics_Path_Shape_RoundedRectangle `protobuf:"bytes,2,opt,name=rounded_rectangle,json=roundedRectangle,proto3,oneof"`
}

type Graphics_Path_Shape_Polygon_ struct {
	Polygon *Graphics_Path_Shape_Polygon `protobuf:"bytes,3,opt,name=polygon,proto3,oneof"`
}

type Graphics_Path_Shape_Star_ struct {
	Star *Graphics_Path_Shape_Star `protobuf:"bytes,4,opt,name=star,proto3,oneof"`
}

type Graphics_Path_Shape_Arrow_ struct {
	Arrow *Graphics_Path_Shape_Arrow `protobuf:"bytes,5,opt,name=arrow,proto3,oneof"`
}

func (*Graphics_Path_Shape_RoundedRectangle_) isGraphics_Path_Shape_AdditionalData() {}

func (*Graphics_Path_Shape_Polygon_) isGraphics_Path_Shape_AdditionalData() {}

func (*Graphics_Path_Shape_Star_) isGraphics_Path_Shape_AdditionalData() {}

func (*Graphics_Path_Shape_Arrow_) isGraphics_Path_Shape_AdditionalData() {}

type Graphics_Path_Shape_RoundedRectangle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roundness float64 `protobuf:"fixed64,1,opt,name=roundness,proto3" json:"roundness,omitempty"`
}

func (x *Graphics_Path_Shape_RoundedRectangle) Reset() {
	*x = Graphics_Path_Shape_RoundedRectangle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Path_Shape_RoundedRectangle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Path_Shape_RoundedRectangle) ProtoMessage() {}

func (x *Graphics_Path_Shape_RoundedRectangle) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Path_Shape_RoundedRectangle.ProtoReflect.Descriptor instead.
func (*Graphics_Path_Shape_RoundedRectangle) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 5, 1, 0}
}

func (x *Graphics_Path_Shape_RoundedRectangle) GetRoundness() float64 {
	if x != nil {
		return x.Roundness
	}
	return 0
}

type Graphics_Path_Shape_Arrow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corner *Graphics_Point `protobuf:"bytes,1,opt,name=corner,proto3" json:"corner,omitempty"`
}

func (x *Graphics_Path_Shape_Arrow) Reset() {
	*x = Graphics_Path_Shape_Arrow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Path_Shape_Arrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Path_Shape_Arrow) ProtoMessage() {}

func (x *Graphics_Path_Shape_Arrow) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Path_Shape_Arrow.ProtoReflect.Descriptor instead.
func (*Graphics_Path_Shape_Arrow) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 5, 1, 1}
}

func (x *Graphics_Path_Shape_Arrow) GetCorner() *Graphics_Point {
	if x != nil {
		return x.Corner
	}
	return nil
}

type Graphics_Path_Shape_Polygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberSides uint32 `protobuf:"varint,1,opt,name=number_sides,json=numberSides,proto3" json:"number_sides,omitempty"`
}

func (x *Graphics_Path_Shape_Polygon) Reset() {
	*x = Graphics_Path_Shape_Polygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Path_Shape_Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Path_Shape_Polygon) ProtoMessage() {}

func (x *Graphics_Path_Shape_Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Path_Shape_Polygon.ProtoReflect.Descriptor instead.
func (*Graphics_Path_Shape_Polygon) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 5, 1, 2}
}

func (x *Graphics_Path_Shape_Polygon) GetNumberSides() uint32 {
	if x != nil {
		return x.NumberSides
	}
	return 0
}

type Graphics_Path_Shape_Star struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerRadius  float64 `protobuf:"fixed64,1,opt,name=inner_radius,json=innerRadius,proto3" json:"inner_radius,omitempty"`
	NumberPoints uint32  `protobuf:"varint,2,opt,name=number_points,json=numberPoints,proto3" json:"number_points,omitempty"`
}

func (x *Graphics_Path_Shape_Star) Reset() {
	*x = Graphics_Path_Shape_Star{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Path_Shape_Star) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Path_Shape_Star) ProtoMessage() {}

func (x *Graphics_Path_Shape_Star) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Path_Shape_Star.ProtoReflect.Descriptor instead.
func (*Graphics_Path_Shape_Star) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 5, 1, 3}
}

func (x *Graphics_Path_Shape_Star) GetInnerRadius() float64 {
	if x != nil {
		return x.InnerRadius
	}
	return 0
}

func (x *Graphics_Path_Shape_Star) GetNumberPoints() uint32 {
	if x != nil {
		return x.NumberPoints
	}
	return 0
}

type Graphics_Gradient_ColorStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color      *Color  `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Position   float64 `protobuf:"fixed64,2,opt,name=position,proto3" json:"position,omitempty"`
	BlendPoint float64 `protobuf:"fixed64,3,opt,name=blend_point,json=blendPoint,proto3" json:"blend_point,omitempty"`
}

func (x *Graphics_Gradient_ColorStop) Reset() {
	*x = Graphics_Gradient_ColorStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Gradient_ColorStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Gradient_ColorStop) ProtoMessage() {}

func (x *Graphics_Gradient_ColorStop) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Gradient_ColorStop.ProtoReflect.Descriptor instead.
func (*Graphics_Gradient_ColorStop) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *Graphics_Gradient_ColorStop) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Graphics_Gradient_ColorStop) GetPosition() float64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Graphics_Gradient_ColorStop) GetBlendPoint() float64 {
	if x != nil {
		return x.BlendPoint
	}
	return 0
}

type Graphics_Text_LineFillMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          bool                                     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HeightOffset     float64                                  `protobuf:"fixed64,2,opt,name=height_offset,json=heightOffset,proto3" json:"height_offset,omitempty"`
	VerticalOffset   float64                                  `protobuf:"fixed64,3,opt,name=vertical_offset,json=verticalOffset,proto3" json:"vertical_offset,omitempty"`
	MaskStyle        Graphics_Text_LineFillMask_LineMaskStyle `protobuf:"varint,4,opt,name=mask_style,json=maskStyle,proto3,enum=rv.data.Graphics_Text_LineFillMask_LineMaskStyle" json:"mask_style,omitempty"`
	WidthOffset      float64                                  `protobuf:"fixed64,5,opt,name=width_offset,json=widthOffset,proto3" json:"width_offset,omitempty"`
	HorizontalOffset float64                                  `protobuf:"fixed64,6,opt,name=horizontal_offset,json=horizontalOffset,proto3" json:"horizontal_offset,omitempty"`
}

func (x *Graphics_Text_LineFillMask) Reset() {
	*x = Graphics_Text_LineFillMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text_LineFillMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text_LineFillMask) ProtoMessage() {}

func (x *Graphics_Text_LineFillMask) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text_LineFillMask.ProtoReflect.Descriptor instead.
func (*Graphics_Text_LineFillMask) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (x *Graphics_Text_LineFillMask) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Graphics_Text_LineFillMask) GetHeightOffset() float64 {
	if x != nil {
		return x.HeightOffset
	}
	return 0
}

func (x *Graphics_Text_LineFillMask) GetVerticalOffset() float64 {
	if x != nil {
		return x.VerticalOffset
	}
	return 0
}

func (x *Graphics_Text_LineFillMask) GetMaskStyle() Graphics_Text_LineFillMask_LineMaskStyle {
	if x != nil {
		return x.MaskStyle
	}
	return Graphics_Text_LineFillMask_LINE_MASK_STYLE_FULL_WIDTH
}

func (x *Graphics_Text_LineFillMask) GetWidthOffset() float64 {
	if x != nil {
		return x.WidthOffset
	}
	return 0
}

func (x *Graphics_Text_LineFillMask) GetHorizontalOffset() float64 {
	if x != nil {
		return x.HorizontalOffset
	}
	return 0
}

type Graphics_Text_GradientFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gradient                *Graphics_Gradient `protobuf:"bytes,1,opt,name=gradient,proto3" json:"gradient,omitempty"`
	StretchToDocumentBounds bool               `protobuf:"varint,2,opt,name=stretch_to_document_bounds,json=stretchToDocumentBounds,proto3" json:"stretch_to_document_bounds,omitempty"`
}

func (x *Graphics_Text_GradientFill) Reset() {
	*x = Graphics_Text_GradientFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text_GradientFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text_GradientFill) ProtoMessage() {}

func (x *Graphics_Text_GradientFill) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text_GradientFill.ProtoReflect.Descriptor instead.
func (*Graphics_Text_GradientFill) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 1}
}

func (x *Graphics_Text_GradientFill) GetGradient() *Graphics_Gradient {
	if x != nil {
		return x.Gradient
	}
	return nil
}

func (x *Graphics_Text_GradientFill) GetStretchToDocumentBounds() bool {
	if x != nil {
		return x.StretchToDocumentBounds
	}
	return false
}

type Graphics_Text_ChordPro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled  bool                            `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Notation Graphics_Text_ChordPro_Notation `protobuf:"varint,2,opt,name=notation,proto3,enum=rv.data.Graphics_Text_ChordPro_Notation" json:"notation,omitempty"`
	Color    *Color                          `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Graphics_Text_ChordPro) Reset() {
	*x = Graphics_Text_ChordPro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text_ChordPro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text_ChordPro) ProtoMessage() {}

func (x *Graphics_Text_ChordPro) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text_ChordPro.ProtoReflect.Descriptor instead.
func (*Graphics_Text_ChordPro) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 2}
}

func (x *Graphics_Text_ChordPro) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Graphics_Text_ChordPro) GetNotation() Graphics_Text_ChordPro_Notation {
	if x != nil {
		return x.Notation
	}
	return Graphics_Text_ChordPro_NOTATION_CHORDS
}

func (x *Graphics_Text_ChordPro) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type Graphics_Text_Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Font               *Graphics_Text_Attributes_Font              `protobuf:"bytes,1,opt,name=font,proto3" json:"font,omitempty"`
	Capitalization     Graphics_Text_Attributes_Capitalization     `protobuf:"varint,2,opt,name=capitalization,proto3,enum=rv.data.Graphics_Text_Attributes_Capitalization" json:"capitalization,omitempty"`
	UnderlineStyle     *Graphics_Text_Attributes_Underline         `protobuf:"bytes,4,opt,name=underline_style,json=underlineStyle,proto3" json:"underline_style,omitempty"`
	UnderlineColor     *Color                                      `protobuf:"bytes,5,opt,name=underline_color,json=underlineColor,proto3" json:"underline_color,omitempty"`
	ParagraphStyle     *Graphics_Text_Attributes_Paragraph         `protobuf:"bytes,6,opt,name=paragraph_style,json=paragraphStyle,proto3" json:"paragraph_style,omitempty"`
	Kerning            float64                                     `protobuf:"fixed64,7,opt,name=kerning,proto3" json:"kerning,omitempty"`
	Superscript        int32                                       `protobuf:"varint,8,opt,name=superscript,proto3" json:"superscript,omitempty"`
	StrikethroughStyle *Graphics_Text_Attributes_Underline         `protobuf:"bytes,9,opt,name=strikethrough_style,json=strikethroughStyle,proto3" json:"strikethrough_style,omitempty"`
	StrikethroughColor *Color                                      `protobuf:"bytes,10,opt,name=strikethrough_color,json=strikethroughColor,proto3" json:"strikethrough_color,omitempty"`
	StrokeWidth        float64                                     `protobuf:"fixed64,11,opt,name=stroke_width,json=strokeWidth,proto3" json:"stroke_width,omitempty"`
	StrokeColor        *Color                                      `protobuf:"bytes,12,opt,name=stroke_color,json=strokeColor,proto3" json:"stroke_color,omitempty"`
	CustomAttributes   []*Graphics_Text_Attributes_CustomAttribute `protobuf:"bytes,13,rep,name=custom_attributes,json=customAttributes,proto3" json:"custom_attributes,omitempty"`
	BackgroundColor    *Color                                      `protobuf:"bytes,15,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	// Types that are assignable to Fill:
	//	*Graphics_Text_Attributes_TextSolidFill
	//	*Graphics_Text_Attributes_TextGradientFill
	Fill isGraphics_Text_Attributes_Fill `protobuf_oneof:"fill"`
}

func (x *Graphics_Text_Attributes) Reset() {
	*x = Graphics_Text_Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text_Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text_Attributes) ProtoMessage() {}

func (x *Graphics_Text_Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text_Attributes.ProtoReflect.Descriptor instead.
func (*Graphics_Text_Attributes) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3}
}

func (x *Graphics_Text_Attributes) GetFont() *Graphics_Text_Attributes_Font {
	if x != nil {
		return x.Font
	}
	return nil
}

func (x *Graphics_Text_Attributes) GetCapitalization() Graphics_Text_Attributes_Capitalization {
	if x != nil {
		return x.Capitalization
	}
	return Graphics_Text_Attributes_CAPITALIZATION_NONE
}

func (x *Graphics_Text_Attributes) GetUnderlineStyle() *Graphics_Text_Attributes_Underline {
	if x != nil {
		return x.UnderlineStyle
	}
	return nil
}

func (x *Graphics_Text_Attributes) GetUnderlineColor() *Color {
	if x != nil {
		return x.UnderlineColor
	}
	return nil
}

func (x *Graphics_Text_Attributes) GetParagraphStyle() *Graphics_Text_Attributes_Paragraph {
	if x != nil {
		return x.ParagraphStyle
	}
	return nil
}

func (x *Graphics_Text_Attributes) GetKerning() float64 {
	if x != nil {
		return x.Kerning
	}
	return 0
}

func (x *Graphics_Text_Attributes) GetSuperscript() int32 {
	if x != nil {
		return x.Superscript
	}
	return 0
}

func (x *Graphics_Text_Attributes) GetStrikethroughStyle() *Graphics_Text_Attributes_Underline {
	if x != nil {
		return x.StrikethroughStyle
	}
	return nil
}

func (x *Graphics_Text_Attributes) GetStrikethroughColor() *Color {
	if x != nil {
		return x.StrikethroughColor
	}
	return nil
}

func (x *Graphics_Text_Attributes) GetStrokeWidth() float64 {
	if x != nil {
		return x.StrokeWidth
	}
	return 0
}

func (x *Graphics_Text_Attributes) GetStrokeColor() *Color {
	if x != nil {
		return x.StrokeColor
	}
	return nil
}

func (x *Graphics_Text_Attributes) GetCustomAttributes() []*Graphics_Text_Attributes_CustomAttribute {
	if x != nil {
		return x.CustomAttributes
	}
	return nil
}

func (x *Graphics_Text_Attributes) GetBackgroundColor() *Color {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

func (m *Graphics_Text_Attributes) GetFill() isGraphics_Text_Attributes_Fill {
	if m != nil {
		return m.Fill
	}
	return nil
}

func (x *Graphics_Text_Attributes) GetTextSolidFill() *Color {
	if x, ok := x.GetFill().(*Graphics_Text_Attributes_TextSolidFill); ok {
		return x.TextSolidFill
	}
	return nil
}

func (x *Graphics_Text_Attributes) GetTextGradientFill() *Graphics_Text_GradientFill {
	if x, ok := x.GetFill().(*Graphics_Text_Attributes_TextGradientFill); ok {
		return x.TextGradientFill
	}
	return nil
}

type isGraphics_Text_Attributes_Fill interface {
	isGraphics_Text_Attributes_Fill()
}

type Graphics_Text_Attributes_TextSolidFill struct {
	TextSolidFill *Color `protobuf:"bytes,3,opt,name=text_solid_fill,json=textSolidFill,proto3,oneof"`
}

type Graphics_Text_Attributes_TextGradientFill struct {
	TextGradientFill *Graphics_Text_GradientFill `protobuf:"bytes,14,opt,name=text_gradient_fill,json=textGradientFill,proto3,oneof"`
}

func (*Graphics_Text_Attributes_TextSolidFill) isGraphics_Text_Attributes_Fill() {}

func (*Graphics_Text_Attributes_TextGradientFill) isGraphics_Text_Attributes_Fill() {}

type Graphics_Text_Attributes_Font struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size   float64 `protobuf:"fixed64,2,opt,name=size,proto3" json:"size,omitempty"`
	Italic bool    `protobuf:"varint,4,opt,name=italic,proto3" json:"italic,omitempty"`
	Bold   bool    `protobuf:"varint,8,opt,name=bold,proto3" json:"bold,omitempty"`
	Family string  `protobuf:"bytes,9,opt,name=family,proto3" json:"family,omitempty"`
	Face   string  `protobuf:"bytes,10,opt,name=face,proto3" json:"face,omitempty"`
}

func (x *Graphics_Text_Attributes_Font) Reset() {
	*x = Graphics_Text_Attributes_Font{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text_Attributes_Font) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text_Attributes_Font) ProtoMessage() {}

func (x *Graphics_Text_Attributes_Font) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text_Attributes_Font.ProtoReflect.Descriptor instead.
func (*Graphics_Text_Attributes_Font) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 0}
}

func (x *Graphics_Text_Attributes_Font) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Graphics_Text_Attributes_Font) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Graphics_Text_Attributes_Font) GetItalic() bool {
	if x != nil {
		return x.Italic
	}
	return false
}

func (x *Graphics_Text_Attributes_Font) GetBold() bool {
	if x != nil {
		return x.Bold
	}
	return false
}

func (x *Graphics_Text_Attributes_Font) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *Graphics_Text_Attributes_Font) GetFace() string {
	if x != nil {
		return x.Face
	}
	return ""
}

type Graphics_Text_Attributes_Underline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style   Graphics_Text_Attributes_Underline_Style   `protobuf:"varint,1,opt,name=style,proto3,enum=rv.data.Graphics_Text_Attributes_Underline_Style" json:"style,omitempty"`
	Pattern Graphics_Text_Attributes_Underline_Pattern `protobuf:"varint,2,opt,name=pattern,proto3,enum=rv.data.Graphics_Text_Attributes_Underline_Pattern" json:"pattern,omitempty"`
	ByWord  bool                                       `protobuf:"varint,3,opt,name=by_word,json=byWord,proto3" json:"by_word,omitempty"`
}

func (x *Graphics_Text_Attributes_Underline) Reset() {
	*x = Graphics_Text_Attributes_Underline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text_Attributes_Underline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text_Attributes_Underline) ProtoMessage() {}

func (x *Graphics_Text_Attributes_Underline) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text_Attributes_Underline.ProtoReflect.Descriptor instead.
func (*Graphics_Text_Attributes_Underline) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 1}
}

func (x *Graphics_Text_Attributes_Underline) GetStyle() Graphics_Text_Attributes_Underline_Style {
	if x != nil {
		return x.Style
	}
	return Graphics_Text_Attributes_Underline_STYLE_NONE
}

func (x *Graphics_Text_Attributes_Underline) GetPattern() Graphics_Text_Attributes_Underline_Pattern {
	if x != nil {
		return x.Pattern
	}
	return Graphics_Text_Attributes_Underline_PATTERN_SOLID
}

func (x *Graphics_Text_Attributes_Underline) GetByWord() bool {
	if x != nil {
		return x.ByWord
	}
	return false
}

type Graphics_Text_Attributes_Paragraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alignment              Graphics_Text_Attributes_Paragraph_Alignment   `protobuf:"varint,1,opt,name=alignment,proto3,enum=rv.data.Graphics_Text_Attributes_Paragraph_Alignment" json:"alignment,omitempty"`
	FirstLineHeadIndent    float64                                        `protobuf:"fixed64,2,opt,name=first_line_head_indent,json=firstLineHeadIndent,proto3" json:"first_line_head_indent,omitempty"`
	HeadIndent             float64                                        `protobuf:"fixed64,3,opt,name=head_indent,json=headIndent,proto3" json:"head_indent,omitempty"`
	TailIndent             float64                                        `protobuf:"fixed64,4,opt,name=tail_indent,json=tailIndent,proto3" json:"tail_indent,omitempty"`
	LineHeightMultiple     float64                                        `protobuf:"fixed64,5,opt,name=line_height_multiple,json=lineHeightMultiple,proto3" json:"line_height_multiple,omitempty"`
	MaximumLineHeight      float64                                        `protobuf:"fixed64,6,opt,name=maximum_line_height,json=maximumLineHeight,proto3" json:"maximum_line_height,omitempty"`
	MinimumLineHeight      float64                                        `protobuf:"fixed64,7,opt,name=minimum_line_height,json=minimumLineHeight,proto3" json:"minimum_line_height,omitempty"`
	LineSpacing            float64                                        `protobuf:"fixed64,8,opt,name=line_spacing,json=lineSpacing,proto3" json:"line_spacing,omitempty"`
	ParagraphSpacing       float64                                        `protobuf:"fixed64,9,opt,name=paragraph_spacing,json=paragraphSpacing,proto3" json:"paragraph_spacing,omitempty"`
	ParagraphSpacingBefore float64                                        `protobuf:"fixed64,10,opt,name=paragraph_spacing_before,json=paragraphSpacingBefore,proto3" json:"paragraph_spacing_before,omitempty"`
	TabStops               []*Graphics_Text_Attributes_Paragraph_TabStop  `protobuf:"bytes,11,rep,name=tab_stops,json=tabStops,proto3" json:"tab_stops,omitempty"`
	DefaultTabInterval     float64                                        `protobuf:"fixed64,12,opt,name=default_tab_interval,json=defaultTabInterval,proto3" json:"default_tab_interval,omitempty"`
	TextList               *Graphics_Text_Attributes_Paragraph_TextList   `protobuf:"bytes,13,opt,name=text_list,json=textList,proto3" json:"text_list,omitempty"`
	TextLists              []*Graphics_Text_Attributes_Paragraph_TextList `protobuf:"bytes,14,rep,name=text_lists,json=textLists,proto3" json:"text_lists,omitempty"`
}

func (x *Graphics_Text_Attributes_Paragraph) Reset() {
	*x = Graphics_Text_Attributes_Paragraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text_Attributes_Paragraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text_Attributes_Paragraph) ProtoMessage() {}

func (x *Graphics_Text_Attributes_Paragraph) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text_Attributes_Paragraph.ProtoReflect.Descriptor instead.
func (*Graphics_Text_Attributes_Paragraph) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 2}
}

func (x *Graphics_Text_Attributes_Paragraph) GetAlignment() Graphics_Text_Attributes_Paragraph_Alignment {
	if x != nil {
		return x.Alignment
	}
	return Graphics_Text_Attributes_Paragraph_ALIGNMENT_LEFT
}

func (x *Graphics_Text_Attributes_Paragraph) GetFirstLineHeadIndent() float64 {
	if x != nil {
		return x.FirstLineHeadIndent
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph) GetHeadIndent() float64 {
	if x != nil {
		return x.HeadIndent
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph) GetTailIndent() float64 {
	if x != nil {
		return x.TailIndent
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph) GetLineHeightMultiple() float64 {
	if x != nil {
		return x.LineHeightMultiple
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph) GetMaximumLineHeight() float64 {
	if x != nil {
		return x.MaximumLineHeight
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph) GetMinimumLineHeight() float64 {
	if x != nil {
		return x.MinimumLineHeight
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph) GetLineSpacing() float64 {
	if x != nil {
		return x.LineSpacing
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph) GetParagraphSpacing() float64 {
	if x != nil {
		return x.ParagraphSpacing
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph) GetParagraphSpacingBefore() float64 {
	if x != nil {
		return x.ParagraphSpacingBefore
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph) GetTabStops() []*Graphics_Text_Attributes_Paragraph_TabStop {
	if x != nil {
		return x.TabStops
	}
	return nil
}

func (x *Graphics_Text_Attributes_Paragraph) GetDefaultTabInterval() float64 {
	if x != nil {
		return x.DefaultTabInterval
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph) GetTextList() *Graphics_Text_Attributes_Paragraph_TextList {
	if x != nil {
		return x.TextList
	}
	return nil
}

func (x *Graphics_Text_Attributes_Paragraph) GetTextLists() []*Graphics_Text_Attributes_Paragraph_TextList {
	if x != nil {
		return x.TextLists
	}
	return nil
}

type Graphics_Text_Attributes_CustomAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range *IntRange `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// Types that are assignable to Attribute:
	//	*Graphics_Text_Attributes_CustomAttribute_Capitalization_
	//	*Graphics_Text_Attributes_CustomAttribute_OriginalFontSize
	//	*Graphics_Text_Attributes_CustomAttribute_FontScaleFactor
	//	*Graphics_Text_Attributes_CustomAttribute_TextGradientFill
	//	*Graphics_Text_Attributes_CustomAttribute_ShouldPreserveForegroundColor
	//	*Graphics_Text_Attributes_CustomAttribute_Chord
	Attribute isGraphics_Text_Attributes_CustomAttribute_Attribute `protobuf_oneof:"Attribute"`
}

func (x *Graphics_Text_Attributes_CustomAttribute) Reset() {
	*x = Graphics_Text_Attributes_CustomAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text_Attributes_CustomAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text_Attributes_CustomAttribute) ProtoMessage() {}

func (x *Graphics_Text_Attributes_CustomAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text_Attributes_CustomAttribute.ProtoReflect.Descriptor instead.
func (*Graphics_Text_Attributes_CustomAttribute) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 3}
}

func (x *Graphics_Text_Attributes_CustomAttribute) GetRange() *IntRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (m *Graphics_Text_Attributes_CustomAttribute) GetAttribute() isGraphics_Text_Attributes_CustomAttribute_Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (x *Graphics_Text_Attributes_CustomAttribute) GetCapitalization() Graphics_Text_Attributes_CustomAttribute_Capitalization {
	if x, ok := x.GetAttribute().(*Graphics_Text_Attributes_CustomAttribute_Capitalization_); ok {
		return x.Capitalization
	}
	return Graphics_Text_Attributes_CustomAttribute_CAPITALIZATION_NONE
}

func (x *Graphics_Text_Attributes_CustomAttribute) GetOriginalFontSize() float64 {
	if x, ok := x.GetAttribute().(*Graphics_Text_Attributes_CustomAttribute_OriginalFontSize); ok {
		return x.OriginalFontSize
	}
	return 0
}

func (x *Graphics_Text_Attributes_CustomAttribute) GetFontScaleFactor() float64 {
	if x, ok := x.GetAttribute().(*Graphics_Text_Attributes_CustomAttribute_FontScaleFactor); ok {
		return x.FontScaleFactor
	}
	return 0
}

func (x *Graphics_Text_Attributes_CustomAttribute) GetTextGradientFill() *Graphics_Text_GradientFill {
	if x, ok := x.GetAttribute().(*Graphics_Text_Attributes_CustomAttribute_TextGradientFill); ok {
		return x.TextGradientFill
	}
	return nil
}

func (x *Graphics_Text_Attributes_CustomAttribute) GetShouldPreserveForegroundColor() bool {
	if x, ok := x.GetAttribute().(*Graphics_Text_Attributes_CustomAttribute_ShouldPreserveForegroundColor); ok {
		return x.ShouldPreserveForegroundColor
	}
	return false
}

func (x *Graphics_Text_Attributes_CustomAttribute) GetChord() string {
	if x, ok := x.GetAttribute().(*Graphics_Text_Attributes_CustomAttribute_Chord); ok {
		return x.Chord
	}
	return ""
}

type isGraphics_Text_Attributes_CustomAttribute_Attribute interface {
	isGraphics_Text_Attributes_CustomAttribute_Attribute()
}

type Graphics_Text_Attributes_CustomAttribute_Capitalization_ struct {
	Capitalization Graphics_Text_Attributes_CustomAttribute_Capitalization `protobuf:"varint,2,opt,name=capitalization,proto3,enum=rv.data.Graphics_Text_Attributes_CustomAttribute_Capitalization,oneof"`
}

type Graphics_Text_Attributes_CustomAttribute_OriginalFontSize struct {
	OriginalFontSize float64 `protobuf:"fixed64,3,opt,name=original_font_size,json=originalFontSize,proto3,oneof"`
}

type Graphics_Text_Attributes_CustomAttribute_FontScaleFactor struct {
	FontScaleFactor float64 `protobuf:"fixed64,4,opt,name=font_scale_factor,json=fontScaleFactor,proto3,oneof"`
}

type Graphics_Text_Attributes_CustomAttribute_TextGradientFill struct {
	TextGradientFill *Graphics_Text_GradientFill `protobuf:"bytes,5,opt,name=text_gradient_fill,json=textGradientFill,proto3,oneof"`
}

type Graphics_Text_Attributes_CustomAttribute_ShouldPreserveForegroundColor struct {
	ShouldPreserveForegroundColor bool `protobuf:"varint,6,opt,name=should_preserve_foreground_color,json=shouldPreserveForegroundColor,proto3,oneof"`
}

type Graphics_Text_Attributes_CustomAttribute_Chord struct {
	Chord string `protobuf:"bytes,7,opt,name=chord,proto3,oneof"`
}

func (*Graphics_Text_Attributes_CustomAttribute_Capitalization_) isGraphics_Text_Attributes_CustomAttribute_Attribute() {
}

func (*Graphics_Text_Attributes_CustomAttribute_OriginalFontSize) isGraphics_Text_Attributes_CustomAttribute_Attribute() {
}

func (*Graphics_Text_Attributes_CustomAttribute_FontScaleFactor) isGraphics_Text_Attributes_CustomAttribute_Attribute() {
}

func (*Graphics_Text_Attributes_CustomAttribute_TextGradientFill) isGraphics_Text_Attributes_CustomAttribute_Attribute() {
}

func (*Graphics_Text_Attributes_CustomAttribute_ShouldPreserveForegroundColor) isGraphics_Text_Attributes_CustomAttribute_Attribute() {
}

func (*Graphics_Text_Attributes_CustomAttribute_Chord) isGraphics_Text_Attributes_CustomAttribute_Attribute() {
}

type Graphics_Text_Attributes_Paragraph_TabStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location  float64                                              `protobuf:"fixed64,1,opt,name=location,proto3" json:"location,omitempty"`
	Alignment Graphics_Text_Attributes_Paragraph_TabStop_Alignment `protobuf:"varint,2,opt,name=alignment,proto3,enum=rv.data.Graphics_Text_Attributes_Paragraph_TabStop_Alignment" json:"alignment,omitempty"`
}

func (x *Graphics_Text_Attributes_Paragraph_TabStop) Reset() {
	*x = Graphics_Text_Attributes_Paragraph_TabStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text_Attributes_Paragraph_TabStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text_Attributes_Paragraph_TabStop) ProtoMessage() {}

func (x *Graphics_Text_Attributes_Paragraph_TabStop) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text_Attributes_Paragraph_TabStop.ProtoReflect.Descriptor instead.
func (*Graphics_Text_Attributes_Paragraph_TabStop) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 2, 0}
}

func (x *Graphics_Text_Attributes_Paragraph_TabStop) GetLocation() float64 {
	if x != nil {
		return x.Location
	}
	return 0
}

func (x *Graphics_Text_Attributes_Paragraph_TabStop) GetAlignment() Graphics_Text_Attributes_Paragraph_TabStop_Alignment {
	if x != nil {
		return x.Alignment
	}
	return Graphics_Text_Attributes_Paragraph_TabStop_ALIGNMENT_LEFT
}

type Graphics_Text_Attributes_Paragraph_TextList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled      bool                                                   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	NumberType     Graphics_Text_Attributes_Paragraph_TextList_NumberType `protobuf:"varint,2,opt,name=number_type,json=numberType,proto3,enum=rv.data.Graphics_Text_Attributes_Paragraph_TextList_NumberType" json:"number_type,omitempty"`
	Prefix         string                                                 `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Postfix        string                                                 `protobuf:"bytes,4,opt,name=postfix,proto3" json:"postfix,omitempty"`
	StartingNumber int32                                                  `protobuf:"varint,5,opt,name=starting_number,json=startingNumber,proto3" json:"starting_number,omitempty"`
}

func (x *Graphics_Text_Attributes_Paragraph_TextList) Reset() {
	*x = Graphics_Text_Attributes_Paragraph_TextList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graphics_Text_Attributes_Paragraph_TextList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graphics_Text_Attributes_Paragraph_TextList) ProtoMessage() {}

func (x *Graphics_Text_Attributes_Paragraph_TextList) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graphics_Text_Attributes_Paragraph_TextList.ProtoReflect.Descriptor instead.
func (*Graphics_Text_Attributes_Paragraph_TextList) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{0, 11, 3, 2, 1}
}

func (x *Graphics_Text_Attributes_Paragraph_TextList) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Graphics_Text_Attributes_Paragraph_TextList) GetNumberType() Graphics_Text_Attributes_Paragraph_TextList_NumberType {
	if x != nil {
		return x.NumberType
	}
	return Graphics_Text_Attributes_Paragraph_TextList_NUMBER_TYPE_BOX
}

func (x *Graphics_Text_Attributes_Paragraph_TextList) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Graphics_Text_Attributes_Paragraph_TextList) GetPostfix() string {
	if x != nil {
		return x.Postfix
	}
	return ""
}

func (x *Graphics_Text_Attributes_Paragraph_TextList) GetStartingNumber() int32 {
	if x != nil {
		return x.StartingNumber
	}
	return 0
}

type Media_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManufactureName string `protobuf:"bytes,1,opt,name=manufacture_name,json=manufactureName,proto3" json:"manufacture_name,omitempty"`
	ManufactureUrl  *URL   `protobuf:"bytes,2,opt,name=manufacture_url,json=manufactureUrl,proto3" json:"manufacture_url,omitempty"`
	Information     string `protobuf:"bytes,3,opt,name=information,proto3" json:"information,omitempty"`
	Artist          string `protobuf:"bytes,4,opt,name=artist,proto3" json:"artist,omitempty"`
	Format          string `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Media_Metadata) Reset() {
	*x = Media_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_Metadata) ProtoMessage() {}

func (x *Media_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_Metadata.ProtoReflect.Descriptor instead.
func (*Media_Metadata) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Media_Metadata) GetManufactureName() string {
	if x != nil {
		return x.ManufactureName
	}
	return ""
}

func (x *Media_Metadata) GetManufactureUrl() *URL {
	if x != nil {
		return x.ManufactureUrl
	}
	return nil
}

func (x *Media_Metadata) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *Media_Metadata) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *Media_Metadata) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type Media_VideoDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Media_VideoDevice_Type       `protobuf:"varint,1,opt,name=type,proto3,enum=rv.data.Media_VideoDevice_Type" json:"type,omitempty"`
	Name         string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId     string                       `protobuf:"bytes,3,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	ModelId      string                       `protobuf:"bytes,4,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	FormatIndex  uint32                       `protobuf:"varint,5,opt,name=format_index,json=formatIndex,proto3" json:"format_index,omitempty"`
	AudioRouting *DigitalAudio_Device_Routing `protobuf:"bytes,6,opt,name=audio_routing,json=audioRouting,proto3" json:"audio_routing,omitempty"`
}

func (x *Media_VideoDevice) Reset() {
	*x = Media_VideoDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_VideoDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_VideoDevice) ProtoMessage() {}

func (x *Media_VideoDevice) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_VideoDevice.ProtoReflect.Descriptor instead.
func (*Media_VideoDevice) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Media_VideoDevice) GetType() Media_VideoDevice_Type {
	if x != nil {
		return x.Type
	}
	return Media_VideoDevice_TYPE_GENERIC
}

func (x *Media_VideoDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Media_VideoDevice) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *Media_VideoDevice) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *Media_VideoDevice) GetFormatIndex() uint32 {
	if x != nil {
		return x.FormatIndex
	}
	return 0
}

func (x *Media_VideoDevice) GetAudioRouting() *DigitalAudio_Device_Routing {
	if x != nil {
		return x.AudioRouting
	}
	return nil
}

type Media_AudioDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId     string `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	ModelId      string `protobuf:"bytes,3,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ChannelCount uint32 `protobuf:"varint,4,opt,name=channel_count,json=channelCount,proto3" json:"channel_count,omitempty"`
}

func (x *Media_AudioDevice) Reset() {
	*x = Media_AudioDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_AudioDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_AudioDevice) ProtoMessage() {}

func (x *Media_AudioDevice) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_AudioDevice.ProtoReflect.Descriptor instead.
func (*Media_AudioDevice) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Media_AudioDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Media_AudioDevice) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *Media_AudioDevice) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *Media_AudioDevice) GetChannelCount() uint32 {
	if x != nil {
		return x.ChannelCount
	}
	return 0
}

type Media_Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Media_Audio) Reset() {
	*x = Media_Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_Audio) ProtoMessage() {}

func (x *Media_Audio) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_Audio.ProtoReflect.Descriptor instead.
func (*Media_Audio) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 3}
}

type Media_AudioProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume          float64                `protobuf:"fixed64,1,opt,name=volume,proto3" json:"volume,omitempty"`
	AudioChannels   []*Media_Audio_Channel `protobuf:"bytes,2,rep,name=audio_channels,json=audioChannels,proto3" json:"audio_channels,omitempty"`
	IsCustomMapping bool                   `protobuf:"varint,3,opt,name=is_custom_mapping,json=isCustomMapping,proto3" json:"is_custom_mapping,omitempty"`
}

func (x *Media_AudioProperties) Reset() {
	*x = Media_AudioProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_AudioProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_AudioProperties) ProtoMessage() {}

func (x *Media_AudioProperties) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_AudioProperties.ProtoReflect.Descriptor instead.
func (*Media_AudioProperties) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Media_AudioProperties) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Media_AudioProperties) GetAudioChannels() []*Media_Audio_Channel {
	if x != nil {
		return x.AudioChannels
	}
	return nil
}

func (x *Media_AudioProperties) GetIsCustomMapping() bool {
	if x != nil {
		return x.IsCustomMapping
	}
	return false
}

type Media_TransportProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayRate         float64                                    `protobuf:"fixed64,1,opt,name=play_rate,json=playRate,proto3" json:"play_rate,omitempty"`
	InPoint          float64                                    `protobuf:"fixed64,2,opt,name=in_point,json=inPoint,proto3" json:"in_point,omitempty"`
	OutPoint         float64                                    `protobuf:"fixed64,3,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	FadeInDuration   float64                                    `protobuf:"fixed64,7,opt,name=fade_in_duration,json=fadeInDuration,proto3" json:"fade_in_duration,omitempty"`
	FadeOutDuration  float64                                    `protobuf:"fixed64,8,opt,name=fade_out_duration,json=fadeOutDuration,proto3" json:"fade_out_duration,omitempty"`
	ShouldFadeIn     bool                                       `protobuf:"varint,9,opt,name=should_fade_in,json=shouldFadeIn,proto3" json:"should_fade_in,omitempty"`
	ShouldFadeOut    bool                                       `protobuf:"varint,10,opt,name=should_fade_out,json=shouldFadeOut,proto3" json:"should_fade_out,omitempty"`
	EndPoint         float64                                    `protobuf:"fixed64,11,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`
	PlaybackBehavior Media_TransportProperties_PlaybackBehavior `protobuf:"varint,12,opt,name=playback_behavior,json=playbackBehavior,proto3,enum=rv.data.Media_TransportProperties_PlaybackBehavior" json:"playback_behavior,omitempty"`
	LoopTime         float64                                    `protobuf:"fixed64,13,opt,name=loop_time,json=loopTime,proto3" json:"loop_time,omitempty"`
	TimesToLoop      uint32                                     `protobuf:"varint,14,opt,name=times_to_loop,json=timesToLoop,proto3" json:"times_to_loop,omitempty"`
}

func (x *Media_TransportProperties) Reset() {
	*x = Media_TransportProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_TransportProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_TransportProperties) ProtoMessage() {}

func (x *Media_TransportProperties) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_TransportProperties.ProtoReflect.Descriptor instead.
func (*Media_TransportProperties) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Media_TransportProperties) GetPlayRate() float64 {
	if x != nil {
		return x.PlayRate
	}
	return 0
}

func (x *Media_TransportProperties) GetInPoint() float64 {
	if x != nil {
		return x.InPoint
	}
	return 0
}

func (x *Media_TransportProperties) GetOutPoint() float64 {
	if x != nil {
		return x.OutPoint
	}
	return 0
}

func (x *Media_TransportProperties) GetFadeInDuration() float64 {
	if x != nil {
		return x.FadeInDuration
	}
	return 0
}

func (x *Media_TransportProperties) GetFadeOutDuration() float64 {
	if x != nil {
		return x.FadeOutDuration
	}
	return 0
}

func (x *Media_TransportProperties) GetShouldFadeIn() bool {
	if x != nil {
		return x.ShouldFadeIn
	}
	return false
}

func (x *Media_TransportProperties) GetShouldFadeOut() bool {
	if x != nil {
		return x.ShouldFadeOut
	}
	return false
}

func (x *Media_TransportProperties) GetEndPoint() float64 {
	if x != nil {
		return x.EndPoint
	}
	return 0
}

func (x *Media_TransportProperties) GetPlaybackBehavior() Media_TransportProperties_PlaybackBehavior {
	if x != nil {
		return x.PlaybackBehavior
	}
	return Media_TransportProperties_PLAYBACK_BEHAVIOR_STOP
}

func (x *Media_TransportProperties) GetLoopTime() float64 {
	if x != nil {
		return x.LoopTime
	}
	return 0
}

func (x *Media_TransportProperties) GetTimesToLoop() uint32 {
	if x != nil {
		return x.TimesToLoop
	}
	return 0
}

type Media_DrawingProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScaleBehavior            Media_DrawingProperties_ScaleBehavior      `protobuf:"varint,1,opt,name=scale_behavior,json=scaleBehavior,proto3,enum=rv.data.Media_DrawingProperties_ScaleBehavior" json:"scale_behavior,omitempty"`
	ScaleAlignment           Media_DrawingProperties_ScaleAlignment     `protobuf:"varint,2,opt,name=scale_alignment,json=scaleAlignment,proto3,enum=rv.data.Media_DrawingProperties_ScaleAlignment" json:"scale_alignment,omitempty"`
	FlippedHorizontally      bool                                       `protobuf:"varint,3,opt,name=flipped_horizontally,json=flippedHorizontally,proto3" json:"flipped_horizontally,omitempty"`
	FlippedVertically        bool                                       `protobuf:"varint,4,opt,name=flipped_vertically,json=flippedVertically,proto3" json:"flipped_vertically,omitempty"`
	NaturalSize              *Graphics_Size                             `protobuf:"bytes,5,opt,name=natural_size,json=naturalSize,proto3" json:"natural_size,omitempty"`
	CustomImageRotation      float64                                    `protobuf:"fixed64,6,opt,name=custom_image_rotation,json=customImageRotation,proto3" json:"custom_image_rotation,omitempty"`
	CustomImageBounds        *Graphics_Rect                             `protobuf:"bytes,7,opt,name=custom_image_bounds,json=customImageBounds,proto3" json:"custom_image_bounds,omitempty"`
	CustomImageAspectLocked  bool                                       `protobuf:"varint,8,opt,name=custom_image_aspect_locked,json=customImageAspectLocked,proto3" json:"custom_image_aspect_locked,omitempty"`
	AlphaInverted            bool                                       `protobuf:"varint,9,opt,name=alpha_inverted,json=alphaInverted,proto3" json:"alpha_inverted,omitempty"`
	NativeRotation           Media_DrawingProperties_NativeRotationType `protobuf:"varint,10,opt,name=native_rotation,json=nativeRotation,proto3,enum=rv.data.Media_DrawingProperties_NativeRotationType" json:"native_rotation,omitempty"`
	SelectedEffectPresetUuid *UUID                                      `protobuf:"bytes,11,opt,name=selected_effect_preset_uuid,json=selectedEffectPresetUuid,proto3" json:"selected_effect_preset_uuid,omitempty"`
	Effects                  []*Effect                                  `protobuf:"bytes,12,rep,name=effects,proto3" json:"effects,omitempty"`
	CropEnable               bool                                       `protobuf:"varint,13,opt,name=crop_enable,json=cropEnable,proto3" json:"crop_enable,omitempty"`
	CropInsets               *Graphics_EdgeInsets                       `protobuf:"bytes,14,opt,name=crop_insets,json=cropInsets,proto3" json:"crop_insets,omitempty"`
}

func (x *Media_DrawingProperties) Reset() {
	*x = Media_DrawingProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_DrawingProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_DrawingProperties) ProtoMessage() {}

func (x *Media_DrawingProperties) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_DrawingProperties.ProtoReflect.Descriptor instead.
func (*Media_DrawingProperties) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 6}
}

func (x *Media_DrawingProperties) GetScaleBehavior() Media_DrawingProperties_ScaleBehavior {
	if x != nil {
		return x.ScaleBehavior
	}
	return Media_DrawingProperties_SCALE_BEHAVIOR_FIT
}

func (x *Media_DrawingProperties) GetScaleAlignment() Media_DrawingProperties_ScaleAlignment {
	if x != nil {
		return x.ScaleAlignment
	}
	return Media_DrawingProperties_SCALE_ALIGNMENT_MIDDLE_CENTER
}

func (x *Media_DrawingProperties) GetFlippedHorizontally() bool {
	if x != nil {
		return x.FlippedHorizontally
	}
	return false
}

func (x *Media_DrawingProperties) GetFlippedVertically() bool {
	if x != nil {
		return x.FlippedVertically
	}
	return false
}

func (x *Media_DrawingProperties) GetNaturalSize() *Graphics_Size {
	if x != nil {
		return x.NaturalSize
	}
	return nil
}

func (x *Media_DrawingProperties) GetCustomImageRotation() float64 {
	if x != nil {
		return x.CustomImageRotation
	}
	return 0
}

func (x *Media_DrawingProperties) GetCustomImageBounds() *Graphics_Rect {
	if x != nil {
		return x.CustomImageBounds
	}
	return nil
}

func (x *Media_DrawingProperties) GetCustomImageAspectLocked() bool {
	if x != nil {
		return x.CustomImageAspectLocked
	}
	return false
}

func (x *Media_DrawingProperties) GetAlphaInverted() bool {
	if x != nil {
		return x.AlphaInverted
	}
	return false
}

func (x *Media_DrawingProperties) GetNativeRotation() Media_DrawingProperties_NativeRotationType {
	if x != nil {
		return x.NativeRotation
	}
	return Media_DrawingProperties_NATIVE_ROTATION_TYPE_ROTATE_STANDARD
}

func (x *Media_DrawingProperties) GetSelectedEffectPresetUuid() *UUID {
	if x != nil {
		return x.SelectedEffectPresetUuid
	}
	return nil
}

func (x *Media_DrawingProperties) GetEffects() []*Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *Media_DrawingProperties) GetCropEnable() bool {
	if x != nil {
		return x.CropEnable
	}
	return false
}

func (x *Media_DrawingProperties) GetCropInsets() *Graphics_EdgeInsets {
	if x != nil {
		return x.CropInsets
	}
	return nil
}

type Media_VideoProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameRate         float64                           `protobuf:"fixed64,1,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	FieldType         Media_VideoProperties_FieldType   `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=rv.data.Media_VideoProperties_FieldType" json:"field_type,omitempty"`
	ThumbnailPosition float64                           `protobuf:"fixed64,3,opt,name=thumbnail_position,json=thumbnailPosition,proto3" json:"thumbnail_position,omitempty"`
	EndBehavior       Media_VideoProperties_EndBehavior `protobuf:"varint,4,opt,name=end_behavior,json=endBehavior,proto3,enum=rv.data.Media_VideoProperties_EndBehavior" json:"end_behavior,omitempty"`
	SoftLoop          bool                              `protobuf:"varint,5,opt,name=soft_loop,json=softLoop,proto3" json:"soft_loop,omitempty"`
	SoftLoopDuration  float64                           `protobuf:"fixed64,6,opt,name=soft_loop_duration,json=softLoopDuration,proto3" json:"soft_loop_duration,omitempty"`
}

func (x *Media_VideoProperties) Reset() {
	*x = Media_VideoProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_VideoProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_VideoProperties) ProtoMessage() {}

func (x *Media_VideoProperties) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_VideoProperties.ProtoReflect.Descriptor instead.
func (*Media_VideoProperties) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 7}
}

func (x *Media_VideoProperties) GetFrameRate() float64 {
	if x != nil {
		return x.FrameRate
	}
	return 0
}

func (x *Media_VideoProperties) GetFieldType() Media_VideoProperties_FieldType {
	if x != nil {
		return x.FieldType
	}
	return Media_VideoProperties_FIELD_TYPE_UNKNOWN
}

func (x *Media_VideoProperties) GetThumbnailPosition() float64 {
	if x != nil {
		return x.ThumbnailPosition
	}
	return 0
}

func (x *Media_VideoProperties) GetEndBehavior() Media_VideoProperties_EndBehavior {
	if x != nil {
		return x.EndBehavior
	}
	return Media_VideoProperties_END_BEHAVIOR_STOP
}

func (x *Media_VideoProperties) GetSoftLoop() bool {
	if x != nil {
		return x.SoftLoop
	}
	return false
}

func (x *Media_VideoProperties) GetSoftLoopDuration() float64 {
	if x != nil {
		return x.SoftLoopDuration
	}
	return 0
}

type Media_LiveVideoProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoDevice    *Media_VideoDevice `protobuf:"bytes,1,opt,name=video_device,json=videoDevice,proto3" json:"video_device,omitempty"`
	AudioDevice    *Media_AudioDevice `protobuf:"bytes,2,opt,name=audio_device,json=audioDevice,proto3" json:"audio_device,omitempty"`
	LiveVideoIndex int32              `protobuf:"varint,3,opt,name=live_video_index,json=liveVideoIndex,proto3" json:"live_video_index,omitempty"`
}

func (x *Media_LiveVideoProperties) Reset() {
	*x = Media_LiveVideoProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_LiveVideoProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_LiveVideoProperties) ProtoMessage() {}

func (x *Media_LiveVideoProperties) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_LiveVideoProperties.ProtoReflect.Descriptor instead.
func (*Media_LiveVideoProperties) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 8}
}

func (x *Media_LiveVideoProperties) GetVideoDevice() *Media_VideoDevice {
	if x != nil {
		return x.VideoDevice
	}
	return nil
}

func (x *Media_LiveVideoProperties) GetAudioDevice() *Media_AudioDevice {
	if x != nil {
		return x.AudioDevice
	}
	return nil
}

func (x *Media_LiveVideoProperties) GetLiveVideoIndex() int32 {
	if x != nil {
		return x.LiveVideoIndex
	}
	return 0
}

type Media_AudioTypeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Audio     *Media_AudioProperties     `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	Transport *Media_TransportProperties `protobuf:"bytes,2,opt,name=transport,proto3" json:"transport,omitempty"`
}

func (x *Media_AudioTypeProperties) Reset() {
	*x = Media_AudioTypeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_AudioTypeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_AudioTypeProperties) ProtoMessage() {}

func (x *Media_AudioTypeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_AudioTypeProperties.ProtoReflect.Descriptor instead.
func (*Media_AudioTypeProperties) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 9}
}

func (x *Media_AudioTypeProperties) GetAudio() *Media_AudioProperties {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *Media_AudioTypeProperties) GetTransport() *Media_TransportProperties {
	if x != nil {
		return x.Transport
	}
	return nil
}

type Media_ImageTypeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawing *Media_DrawingProperties `protobuf:"bytes,1,opt,name=drawing,proto3" json:"drawing,omitempty"`
}

func (x *Media_ImageTypeProperties) Reset() {
	*x = Media_ImageTypeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_ImageTypeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_ImageTypeProperties) ProtoMessage() {}

func (x *Media_ImageTypeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_ImageTypeProperties.ProtoReflect.Descriptor instead.
func (*Media_ImageTypeProperties) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 10}
}

func (x *Media_ImageTypeProperties) GetDrawing() *Media_DrawingProperties {
	if x != nil {
		return x.Drawing
	}
	return nil
}

type Media_VideoTypeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawing   *Media_DrawingProperties   `protobuf:"bytes,1,opt,name=drawing,proto3" json:"drawing,omitempty"`
	Audio     *Media_AudioProperties     `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
	Transport *Media_TransportProperties `protobuf:"bytes,3,opt,name=transport,proto3" json:"transport,omitempty"`
	Video     *Media_VideoProperties     `protobuf:"bytes,4,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *Media_VideoTypeProperties) Reset() {
	*x = Media_VideoTypeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_VideoTypeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_VideoTypeProperties) ProtoMessage() {}

func (x *Media_VideoTypeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_VideoTypeProperties.ProtoReflect.Descriptor instead.
func (*Media_VideoTypeProperties) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 11}
}

func (x *Media_VideoTypeProperties) GetDrawing() *Media_DrawingProperties {
	if x != nil {
		return x.Drawing
	}
	return nil
}

func (x *Media_VideoTypeProperties) GetAudio() *Media_AudioProperties {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *Media_VideoTypeProperties) GetTransport() *Media_TransportProperties {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *Media_VideoTypeProperties) GetVideo() *Media_VideoProperties {
	if x != nil {
		return x.Video
	}
	return nil
}

type Media_LiveVideoTypeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawing   *Media_DrawingProperties   `protobuf:"bytes,1,opt,name=drawing,proto3" json:"drawing,omitempty"`
	Audio     *Media_AudioProperties     `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
	LiveVideo *Media_LiveVideoProperties `protobuf:"bytes,3,opt,name=live_video,json=liveVideo,proto3" json:"live_video,omitempty"`
}

func (x *Media_LiveVideoTypeProperties) Reset() {
	*x = Media_LiveVideoTypeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_LiveVideoTypeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_LiveVideoTypeProperties) ProtoMessage() {}

func (x *Media_LiveVideoTypeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_LiveVideoTypeProperties.ProtoReflect.Descriptor instead.
func (*Media_LiveVideoTypeProperties) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 12}
}

func (x *Media_LiveVideoTypeProperties) GetDrawing() *Media_DrawingProperties {
	if x != nil {
		return x.Drawing
	}
	return nil
}

func (x *Media_LiveVideoTypeProperties) GetAudio() *Media_AudioProperties {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *Media_LiveVideoTypeProperties) GetLiveVideo() *Media_LiveVideoProperties {
	if x != nil {
		return x.LiveVideo
	}
	return nil
}

type Media_WebContentTypeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawing *Media_DrawingProperties `protobuf:"bytes,1,opt,name=drawing,proto3" json:"drawing,omitempty"`
	Url     *URL                     `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Media_WebContentTypeProperties) Reset() {
	*x = Media_WebContentTypeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_WebContentTypeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_WebContentTypeProperties) ProtoMessage() {}

func (x *Media_WebContentTypeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_WebContentTypeProperties.ProtoReflect.Descriptor instead.
func (*Media_WebContentTypeProperties) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 13}
}

func (x *Media_WebContentTypeProperties) GetDrawing() *Media_DrawingProperties {
	if x != nil {
		return x.Drawing
	}
	return nil
}

func (x *Media_WebContentTypeProperties) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

type Media_Audio_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index         uint32                        `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Muted         bool                          `protobuf:"varint,2,opt,name=muted,proto3" json:"muted,omitempty"`
	Volume        float64                       `protobuf:"fixed64,3,opt,name=volume,proto3" json:"volume,omitempty"`
	CompressLimit bool                          `protobuf:"varint,4,opt,name=compress_limit,json=compressLimit,proto3" json:"compress_limit,omitempty"`
	Outputs       []*Media_Audio_Channel_Output `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *Media_Audio_Channel) Reset() {
	*x = Media_Audio_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_Audio_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_Audio_Channel) ProtoMessage() {}

func (x *Media_Audio_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_Audio_Channel.ProtoReflect.Descriptor instead.
func (*Media_Audio_Channel) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 3, 0}
}

func (x *Media_Audio_Channel) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Media_Audio_Channel) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *Media_Audio_Channel) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Media_Audio_Channel) GetCompressLimit() bool {
	if x != nil {
		return x.CompressLimit
	}
	return false
}

func (x *Media_Audio_Channel) GetOutputs() []*Media_Audio_Channel_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type Media_Audio_Channel_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIndex int32 `protobuf:"varint,2,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
}

func (x *Media_Audio_Channel_Output) Reset() {
	*x = Media_Audio_Channel_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphicsData_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_Audio_Channel_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_Audio_Channel_Output) ProtoMessage() {}

func (x *Media_Audio_Channel_Output) ProtoReflect() protoreflect.Message {
	mi := &file_graphicsData_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_Audio_Channel_Output.ProtoReflect.Descriptor instead.
func (*Media_Audio_Channel_Output) Descriptor() ([]byte, []int) {
	return file_graphicsData_proto_rawDescGZIP(), []int{1, 3, 0, 0}
}

func (x *Media_Audio_Channel_Output) GetChannelIndex() int32 {
	if x != nil {
		return x.ChannelIndex
	}
	return 0
}

var File_graphicsData_proto protoreflect.FileDescriptor

var file_graphicsData_proto_rawDesc = []byte{
	0x0a, 0x12, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd6, 0x49, 0x0a, 0x08, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x1a,
	0x9e, 0x06, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x6c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x52, 0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x33, 0x0a, 0x07,
	0x66, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a,
	0x08, 0x66, 0x6c, 0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6c, 0x69, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x66, 0x6c, 0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x4d, 0x61,
	0x73, 0x6b, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x64, 0x0a, 0x08, 0x46, 0x6c, 0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x4c, 0x49, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4c, 0x49, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4c,
	0x49, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4c, 0x49, 0x50, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x03, 0x42, 0x06, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x6b,
	0x1a, 0x63, 0x0a, 0x04, 0x52, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x23, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x1a, 0x34, 0x0a, 0x04, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x1a, 0x60, 0x0a, 0x0a, 0x45, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x1a, 0x8d, 0x09, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x42, 0x65, 0x7a, 0x69,
	0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x32, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x1a, 0xa6, 0x01, 0x0a, 0x0b, 0x42, 0x65, 0x7a, 0x69, 0x65, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x71, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x71, 0x30, 0x12, 0x27, 0x0a, 0x02, 0x71,
	0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x02, 0x71, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x76, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x75, 0x72, 0x76, 0x65, 0x64, 0x1a, 0xd3, 0x06, 0x0a,
	0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a,
	0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x70,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x1a, 0x30, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x6e, 0x65, 0x73, 0x73, 0x1a, 0x38, 0x0a, 0x05, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x2f, 0x0a,
	0x06, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x1a, 0x2c,
	0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x04,
	0x53, 0x74, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x81, 0x02, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x43, 0x54, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4c, 0x4c, 0x49, 0x50, 0x53, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x53, 0x43, 0x45, 0x4c, 0x45, 0x53, 0x5f,
	0x54, 0x52, 0x49, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4e, 0x47, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x48, 0x4f, 0x4d,
	0x42, 0x55, 0x53, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c,
	0x59, 0x47, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x09, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x52, 0x52,
	0x4f, 0x57, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x54, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x0b,
	0x42, 0x10, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0xb4, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x0a, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xd3, 0x02, 0x0a, 0x08, 0x47, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x70, 0x73, 0x1a, 0x6e, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x6c, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x1a,
	0xf5, 0x01, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x17,
	0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x00, 0x1a, 0x8d, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x24,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5f, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x44, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53,
	0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x53, 0x48,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47,
	0x5f, 0x44, 0x41, 0x53, 0x48, 0x10, 0x03, 0x1a, 0xb0, 0x01, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3e, 0x0a, 0x05, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53,
	0x49, 0x44, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x43,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x10, 0x02, 0x1a, 0xae, 0x2e, 0x0a, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x52, 0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x74, 0x66, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x74, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x74, 0x73, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x68, 0x6f,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x1a,
	0x8d, 0x03, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x73,
	0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x09, 0x6d, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x73, 0x0a, 0x0d, 0x4c, 0x69,
	0x6e, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x5f, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x02, 0x1a,
	0x83, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c,
	0x12, 0x36, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x72, 0x65,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x74,
	0x72, 0x65, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0xf5, 0x01, 0x0a, 0x08, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x50,
	0x72, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x08,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x2e,
	0x4e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x4f, 0x52, 0x44, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x45,
	0x52, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x5f, 0x52, 0x45, 0x5f, 0x4d, 0x49, 0x10, 0x03, 0x1a, 0xe0, 0x1f,
	0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x04,
	0x66, 0x6f, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x6f,
	0x6e, 0x74, 0x52, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x54, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x5c, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x12, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x3f, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x12,
	0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x69,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d,
	0x74, 0x65, 0x78, 0x74, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x53, 0x0a,
	0x12, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x76, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x10, 0x74, 0x65, 0x78, 0x74, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x6c, 0x1a, 0x86, 0x01, 0x0a, 0x04, 0x46, 0x6f, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xfb, 0x02, 0x0a, 0x09,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x22, 0x4c, 0x0a, 0x05, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x54,
	0x48, 0x49, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x6f, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x53,
	0x4f, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x4e, 0x5f, 0x44, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x54, 0x54, 0x45,
	0x52, 0x4e, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x4e, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x5f, 0x44, 0x4f, 0x54, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x5f,
	0x44, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x10, 0x04, 0x1a, 0xd4, 0x0d, 0x0a, 0x09, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x70,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x50, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x54, 0x61, 0x62, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x08, 0x74, 0x61, 0x62, 0x53, 0x74, 0x6f, 0x70,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x51, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x65,
	0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0xfe, 0x01, 0x0a, 0x07,
	0x54, 0x61, 0x62, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x54, 0x61, 0x62, 0x53, 0x74, 0x6f, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x7a, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4a, 0x55, 0x53, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x04, 0x1a, 0xb5, 0x04, 0x0a,
	0x08, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xcc, 0x02, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x59, 0x50, 0x48, 0x45, 0x4e, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x51, 0x55, 0x41, 0x52, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x07,
	0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x4f, 0x57, 0x45, 0x52, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x10,
	0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x4f, 0x4d, 0x41,
	0x4e, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x4f, 0x4d,
	0x41, 0x4e, 0x10, 0x0b, 0x22, 0x7a, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x45, 0x46, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4a, 0x55,
	0x53, 0x54, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x04,
	0x1a, 0xef, 0x04, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x6a, 0x0a,
	0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6f, 0x6e,
	0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x20,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x6f, 0x72, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x22,
	0xa3, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x43, 0x41, 0x50, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x50, 0x49,
	0x54, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c,
	0x5f, 0x43, 0x41, 0x50, 0x53, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x50, 0x49, 0x54,
	0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f,
	0x43, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41,
	0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43,
	0x41, 0x53, 0x45, 0x10, 0x04, 0x42, 0x0b, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41, 0x4c,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4d,
	0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x53, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41,
	0x50, 0x49, 0x54, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x50,
	0x49, 0x54, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x04, 0x42, 0x06, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c,
	0x22, 0x6d, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x4c, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x22,
	0xc1, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56,
	0x49, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x4a,
	0x55, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x48, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f,
	0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x46,
	0x4f, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x43, 0x41,
	0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x04, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x4e,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f,
	0x4e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x53, 0x10, 0x04, 0x22, 0xec, 0x29, 0x0a, 0x05,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x55, 0x52, 0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x47, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x09, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x4a, 0x0a, 0x0b, 0x77, 0x65,
	0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xbe, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x8e, 0x03, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x0d, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x53, 0x48, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4a, 0x41, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x56, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x59, 0x50, 0x48, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x44, 0x49, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c,
	0x55, 0x45, 0x46, 0x49, 0x53, 0x48, 0x10, 0x07, 0x1a, 0x7e, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xec, 0x01, 0x0a, 0x05, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x1a, 0xe2, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x2d, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x9a, 0x01, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x1a, 0xe6, 0x04, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x61, 0x64,
	0x65, 0x49, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x66,
	0x61, 0x64, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x61, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x66, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66, 0x61, 0x64, 0x65, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x61,
	0x64, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f,
	0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x54,
	0x6f, 0x4c, 0x6f, 0x6f, 0x70, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c,
	0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41,
	0x43, 0x4b, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42,
	0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4c, 0x41, 0x59,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4c, 0x4f,
	0x4f, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x1a, 0xde, 0x0b,
	0x0a, 0x11, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0d, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x0f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x66, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x66, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x64, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x64, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x0c, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a,
	0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52,
	0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x70,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63,
	0x72, 0x6f, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x72, 0x6f,
	0x70, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x73, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x72,
	0x6f, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x41,
	0x4c, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x54, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56,
	0x49, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f,
	0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x03, 0x22, 0xb9, 0x02, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x43,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x41, 0x4c, 0x45,
	0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x4c,
	0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f,
	0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x41, 0x4c,
	0x45, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x54,
	0x4f, 0x4d, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x08, 0x22, 0xae, 0x01,
	0x0a, 0x12, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x39, 0x30,
	0x10, 0x5a, 0x12, 0x24, 0x0a, 0x1f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x31, 0x38, 0x30, 0x10, 0xb4, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x37, 0x30, 0x10, 0x8e, 0x02, 0x1a, 0xf9,
	0x04, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x45, 0x6e, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6f, 0x66,
	0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x6f,
	0x6f, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x5f, 0x55,
	0x50, 0x50, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4c, 0x41, 0x43, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x10, 0x03, 0x22, 0xa4, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56,
	0x49, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e,
	0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e,
	0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e,
	0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x44, 0x45, 0x5f,
	0x54, 0x4f, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e,
	0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x44, 0x45, 0x5f,
	0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x04, 0x1a, 0xbd, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x8d, 0x01, 0x0a, 0x13, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x76,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x51, 0x0a, 0x13, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x07, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x1a, 0xff, 0x01,
	0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x07, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e,
	0x67, 0x12, 0x34, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x76, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x1a,
	0xce, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x64,
	0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x72, 0x61,
	0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x07,
	0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x41, 0x0a,
	0x0a, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x1a, 0x76, 0x0a, 0x18, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x07,
	0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x72,
	0x61, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x07, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x76, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x55, 0x52, 0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f,
	0x6e, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_graphicsData_proto_rawDescOnce sync.Once
	file_graphicsData_proto_rawDescData = file_graphicsData_proto_rawDesc
)

func file_graphicsData_proto_rawDescGZIP() []byte {
	file_graphicsData_proto_rawDescOnce.Do(func() {
		file_graphicsData_proto_rawDescData = protoimpl.X.CompressGZIP(file_graphicsData_proto_rawDescData)
	})
	return file_graphicsData_proto_rawDescData
}

var file_graphicsData_proto_enumTypes = make([]protoimpl.EnumInfo, 25)
var file_graphicsData_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_graphicsData_proto_goTypes = []interface{}{
	(Graphics_Element_FlipMode)(0),                               // 0: rv.data.Graphics.Element.FlipMode
	(Graphics_Path_Shape_Type)(0),                                // 1: rv.data.Graphics.Path.Shape.Type
	(Graphics_Gradient_Type)(0),                                  // 2: rv.data.Graphics.Gradient.Type
	(Graphics_Shadow_Style)(0),                                   // 3: rv.data.Graphics.Shadow.Style
	(Graphics_Stroke_Style)(0),                                   // 4: rv.data.Graphics.Stroke.Style
	(Graphics_Feather_Style)(0),                                  // 5: rv.data.Graphics.Feather.Style
	(Graphics_Text_VerticalAlignment)(0),                         // 6: rv.data.Graphics.Text.VerticalAlignment
	(Graphics_Text_ScaleBehavior)(0),                             // 7: rv.data.Graphics.Text.ScaleBehavior
	(Graphics_Text_Transform)(0),                                 // 8: rv.data.Graphics.Text.Transform
	(Graphics_Text_LineFillMask_LineMaskStyle)(0),                // 9: rv.data.Graphics.Text.LineFillMask.LineMaskStyle
	(Graphics_Text_ChordPro_Notation)(0),                         // 10: rv.data.Graphics.Text.ChordPro.Notation
	(Graphics_Text_Attributes_Capitalization)(0),                 // 11: rv.data.Graphics.Text.Attributes.Capitalization
	(Graphics_Text_Attributes_Underline_Style)(0),                // 12: rv.data.Graphics.Text.Attributes.Underline.Style
	(Graphics_Text_Attributes_Underline_Pattern)(0),              // 13: rv.data.Graphics.Text.Attributes.Underline.Pattern
	(Graphics_Text_Attributes_Paragraph_Alignment)(0),            // 14: rv.data.Graphics.Text.Attributes.Paragraph.Alignment
	(Graphics_Text_Attributes_Paragraph_TabStop_Alignment)(0),    // 15: rv.data.Graphics.Text.Attributes.Paragraph.TabStop.Alignment
	(Graphics_Text_Attributes_Paragraph_TextList_NumberType)(0),  // 16: rv.data.Graphics.Text.Attributes.Paragraph.TextList.NumberType
	(Graphics_Text_Attributes_CustomAttribute_Capitalization)(0), // 17: rv.data.Graphics.Text.Attributes.CustomAttribute.Capitalization
	(Media_VideoDevice_Type)(0),                                  // 18: rv.data.Media.VideoDevice.Type
	(Media_TransportProperties_PlaybackBehavior)(0),              // 19: rv.data.Media.TransportProperties.PlaybackBehavior
	(Media_DrawingProperties_ScaleBehavior)(0),                   // 20: rv.data.Media.DrawingProperties.ScaleBehavior
	(Media_DrawingProperties_ScaleAlignment)(0),                  // 21: rv.data.Media.DrawingProperties.ScaleAlignment
	(Media_DrawingProperties_NativeRotationType)(0),              // 22: rv.data.Media.DrawingProperties.NativeRotationType
	(Media_VideoProperties_FieldType)(0),                         // 23: rv.data.Media.VideoProperties.FieldType
	(Media_VideoProperties_EndBehavior)(0),                       // 24: rv.data.Media.VideoProperties.EndBehavior
	(*Graphics)(nil),                                             // 25: rv.data.Graphics
	(*Media)(nil),                                                // 26: rv.data.Media
	(*Graphics_Element)(nil),                                     // 27: rv.data.Graphics.Element
	(*Graphics_Rect)(nil),                                        // 28: rv.data.Graphics.Rect
	(*Graphics_Point)(nil),                                       // 29: rv.data.Graphics.Point
	(*Graphics_Size)(nil),                                        // 30: rv.data.Graphics.Size
	(*Graphics_EdgeInsets)(nil),                                  // 31: rv.data.Graphics.EdgeInsets
	(*Graphics_Path)(nil),                                        // 32: rv.data.Graphics.Path
	(*Graphics_Fill)(nil),                                        // 33: rv.data.Graphics.Fill
	(*Graphics_Gradient)(nil),                                    // 34: rv.data.Graphics.Gradient
	(*Graphics_Shadow)(nil),                                      // 35: rv.data.Graphics.Shadow
	(*Graphics_Stroke)(nil),                                      // 36: rv.data.Graphics.Stroke
	(*Graphics_Feather)(nil),                                     // 37: rv.data.Graphics.Feather
	(*Graphics_Text)(nil),                                        // 38: rv.data.Graphics.Text
	(*Graphics_Path_BezierPoint)(nil),                            // 39: rv.data.Graphics.Path.BezierPoint
	(*Graphics_Path_Shape)(nil),                                  // 40: rv.data.Graphics.Path.Shape
	(*Graphics_Path_Shape_RoundedRectangle)(nil),                 // 41: rv.data.Graphics.Path.Shape.RoundedRectangle
	(*Graphics_Path_Shape_Arrow)(nil),                            // 42: rv.data.Graphics.Path.Shape.Arrow
	(*Graphics_Path_Shape_Polygon)(nil),                          // 43: rv.data.Graphics.Path.Shape.Polygon
	(*Graphics_Path_Shape_Star)(nil),                             // 44: rv.data.Graphics.Path.Shape.Star
	(*Graphics_Gradient_ColorStop)(nil),                          // 45: rv.data.Graphics.Gradient.ColorStop
	(*Graphics_Text_LineFillMask)(nil),                           // 46: rv.data.Graphics.Text.LineFillMask
	(*Graphics_Text_GradientFill)(nil),                           // 47: rv.data.Graphics.Text.GradientFill
	(*Graphics_Text_ChordPro)(nil),                               // 48: rv.data.Graphics.Text.ChordPro
	(*Graphics_Text_Attributes)(nil),                             // 49: rv.data.Graphics.Text.Attributes
	(*Graphics_Text_Attributes_Font)(nil),                        // 50: rv.data.Graphics.Text.Attributes.Font
	(*Graphics_Text_Attributes_Underline)(nil),                   // 51: rv.data.Graphics.Text.Attributes.Underline
	(*Graphics_Text_Attributes_Paragraph)(nil),                   // 52: rv.data.Graphics.Text.Attributes.Paragraph
	(*Graphics_Text_Attributes_CustomAttribute)(nil),             // 53: rv.data.Graphics.Text.Attributes.CustomAttribute
	(*Graphics_Text_Attributes_Paragraph_TabStop)(nil),           // 54: rv.data.Graphics.Text.Attributes.Paragraph.TabStop
	(*Graphics_Text_Attributes_Paragraph_TextList)(nil),          // 55: rv.data.Graphics.Text.Attributes.Paragraph.TextList
	(*Media_Metadata)(nil),                                       // 56: rv.data.Media.Metadata
	(*Media_VideoDevice)(nil),                                    // 57: rv.data.Media.VideoDevice
	(*Media_AudioDevice)(nil),                                    // 58: rv.data.Media.AudioDevice
	(*Media_Audio)(nil),                                          // 59: rv.data.Media.Audio
	(*Media_AudioProperties)(nil),                                // 60: rv.data.Media.AudioProperties
	(*Media_TransportProperties)(nil),                            // 61: rv.data.Media.TransportProperties
	(*Media_DrawingProperties)(nil),                              // 62: rv.data.Media.DrawingProperties
	(*Media_VideoProperties)(nil),                                // 63: rv.data.Media.VideoProperties
	(*Media_LiveVideoProperties)(nil),                            // 64: rv.data.Media.LiveVideoProperties
	(*Media_AudioTypeProperties)(nil),                            // 65: rv.data.Media.AudioTypeProperties
	(*Media_ImageTypeProperties)(nil),                            // 66: rv.data.Media.ImageTypeProperties
	(*Media_VideoTypeProperties)(nil),                            // 67: rv.data.Media.VideoTypeProperties
	(*Media_LiveVideoTypeProperties)(nil),                        // 68: rv.data.Media.LiveVideoTypeProperties
	(*Media_WebContentTypeProperties)(nil),                       // 69: rv.data.Media.WebContentTypeProperties
	(*Media_Audio_Channel)(nil),                                  // 70: rv.data.Media.Audio.Channel
	(*Media_Audio_Channel_Output)(nil),                           // 71: rv.data.Media.Audio.Channel.Output
	(*UUID)(nil),                                                 // 72: rv.data.UUID
	(*URL)(nil),                                                  // 73: rv.data.URL
	(*Color)(nil),                                                // 74: rv.data.Color
	(*IntRange)(nil),                                             // 75: rv.data.IntRange
	(*DigitalAudio_Device_Routing)(nil),                          // 76: rv.data.DigitalAudio.Device.Routing
	(*Effect)(nil),                                               // 77: rv.data.Effect
}
var file_graphicsData_proto_depIdxs = []int32{
	72,  // 0: rv.data.Media.uuid:type_name -> rv.data.UUID
	73,  // 1: rv.data.Media.url:type_name -> rv.data.URL
	56,  // 2: rv.data.Media.metadata:type_name -> rv.data.Media.Metadata
	65,  // 3: rv.data.Media.audio:type_name -> rv.data.Media.AudioTypeProperties
	66,  // 4: rv.data.Media.image:type_name -> rv.data.Media.ImageTypeProperties
	67,  // 5: rv.data.Media.video:type_name -> rv.data.Media.VideoTypeProperties
	68,  // 6: rv.data.Media.live_video:type_name -> rv.data.Media.LiveVideoTypeProperties
	69,  // 7: rv.data.Media.web_content:type_name -> rv.data.Media.WebContentTypeProperties
	72,  // 8: rv.data.Graphics.Element.uuid:type_name -> rv.data.UUID
	28,  // 9: rv.data.Graphics.Element.bounds:type_name -> rv.data.Graphics.Rect
	32,  // 10: rv.data.Graphics.Element.path:type_name -> rv.data.Graphics.Path
	33,  // 11: rv.data.Graphics.Element.fill:type_name -> rv.data.Graphics.Fill
	36,  // 12: rv.data.Graphics.Element.stroke:type_name -> rv.data.Graphics.Stroke
	35,  // 13: rv.data.Graphics.Element.shadow:type_name -> rv.data.Graphics.Shadow
	37,  // 14: rv.data.Graphics.Element.feather:type_name -> rv.data.Graphics.Feather
	38,  // 15: rv.data.Graphics.Element.text:type_name -> rv.data.Graphics.Text
	0,   // 16: rv.data.Graphics.Element.flipMode:type_name -> rv.data.Graphics.Element.FlipMode
	46,  // 17: rv.data.Graphics.Element.text_line_mask:type_name -> rv.data.Graphics.Text.LineFillMask
	29,  // 18: rv.data.Graphics.Rect.origin:type_name -> rv.data.Graphics.Point
	30,  // 19: rv.data.Graphics.Rect.size:type_name -> rv.data.Graphics.Size
	39,  // 20: rv.data.Graphics.Path.points:type_name -> rv.data.Graphics.Path.BezierPoint
	40,  // 21: rv.data.Graphics.Path.shape:type_name -> rv.data.Graphics.Path.Shape
	74,  // 22: rv.data.Graphics.Fill.color:type_name -> rv.data.Color
	34,  // 23: rv.data.Graphics.Fill.gradient:type_name -> rv.data.Graphics.Gradient
	26,  // 24: rv.data.Graphics.Fill.media:type_name -> rv.data.Media
	2,   // 25: rv.data.Graphics.Gradient.type:type_name -> rv.data.Graphics.Gradient.Type
	45,  // 26: rv.data.Graphics.Gradient.stops:type_name -> rv.data.Graphics.Gradient.ColorStop
	3,   // 27: rv.data.Graphics.Shadow.style:type_name -> rv.data.Graphics.Shadow.Style
	74,  // 28: rv.data.Graphics.Shadow.color:type_name -> rv.data.Color
	4,   // 29: rv.data.Graphics.Stroke.style:type_name -> rv.data.Graphics.Stroke.Style
	74,  // 30: rv.data.Graphics.Stroke.color:type_name -> rv.data.Color
	5,   // 31: rv.data.Graphics.Feather.style:type_name -> rv.data.Graphics.Feather.Style
	49,  // 32: rv.data.Graphics.Text.attributes:type_name -> rv.data.Graphics.Text.Attributes
	35,  // 33: rv.data.Graphics.Text.shadow:type_name -> rv.data.Graphics.Shadow
	6,   // 34: rv.data.Graphics.Text.vertical_alignment:type_name -> rv.data.Graphics.Text.VerticalAlignment
	7,   // 35: rv.data.Graphics.Text.scale_behavior:type_name -> rv.data.Graphics.Text.ScaleBehavior
	31,  // 36: rv.data.Graphics.Text.margins:type_name -> rv.data.Graphics.EdgeInsets
	8,   // 37: rv.data.Graphics.Text.transform:type_name -> rv.data.Graphics.Text.Transform
	48,  // 38: rv.data.Graphics.Text.chord_pro:type_name -> rv.data.Graphics.Text.ChordPro
	29,  // 39: rv.data.Graphics.Path.BezierPoint.point:type_name -> rv.data.Graphics.Point
	29,  // 40: rv.data.Graphics.Path.BezierPoint.q0:type_name -> rv.data.Graphics.Point
	29,  // 41: rv.data.Graphics.Path.BezierPoint.q1:type_name -> rv.data.Graphics.Point
	1,   // 42: rv.data.Graphics.Path.Shape.type:type_name -> rv.data.Graphics.Path.Shape.Type
	41,  // 43: rv.data.Graphics.Path.Shape.rounded_rectangle:type_name -> rv.data.Graphics.Path.Shape.RoundedRectangle
	43,  // 44: rv.data.Graphics.Path.Shape.polygon:type_name -> rv.data.Graphics.Path.Shape.Polygon
	44,  // 45: rv.data.Graphics.Path.Shape.star:type_name -> rv.data.Graphics.Path.Shape.Star
	42,  // 46: rv.data.Graphics.Path.Shape.arrow:type_name -> rv.data.Graphics.Path.Shape.Arrow
	29,  // 47: rv.data.Graphics.Path.Shape.Arrow.corner:type_name -> rv.data.Graphics.Point
	74,  // 48: rv.data.Graphics.Gradient.ColorStop.color:type_name -> rv.data.Color
	9,   // 49: rv.data.Graphics.Text.LineFillMask.mask_style:type_name -> rv.data.Graphics.Text.LineFillMask.LineMaskStyle
	34,  // 50: rv.data.Graphics.Text.GradientFill.gradient:type_name -> rv.data.Graphics.Gradient
	10,  // 51: rv.data.Graphics.Text.ChordPro.notation:type_name -> rv.data.Graphics.Text.ChordPro.Notation
	74,  // 52: rv.data.Graphics.Text.ChordPro.color:type_name -> rv.data.Color
	50,  // 53: rv.data.Graphics.Text.Attributes.font:type_name -> rv.data.Graphics.Text.Attributes.Font
	11,  // 54: rv.data.Graphics.Text.Attributes.capitalization:type_name -> rv.data.Graphics.Text.Attributes.Capitalization
	51,  // 55: rv.data.Graphics.Text.Attributes.underline_style:type_name -> rv.data.Graphics.Text.Attributes.Underline
	74,  // 56: rv.data.Graphics.Text.Attributes.underline_color:type_name -> rv.data.Color
	52,  // 57: rv.data.Graphics.Text.Attributes.paragraph_style:type_name -> rv.data.Graphics.Text.Attributes.Paragraph
	51,  // 58: rv.data.Graphics.Text.Attributes.strikethrough_style:type_name -> rv.data.Graphics.Text.Attributes.Underline
	74,  // 59: rv.data.Graphics.Text.Attributes.strikethrough_color:type_name -> rv.data.Color
	74,  // 60: rv.data.Graphics.Text.Attributes.stroke_color:type_name -> rv.data.Color
	53,  // 61: rv.data.Graphics.Text.Attributes.custom_attributes:type_name -> rv.data.Graphics.Text.Attributes.CustomAttribute
	74,  // 62: rv.data.Graphics.Text.Attributes.background_color:type_name -> rv.data.Color
	74,  // 63: rv.data.Graphics.Text.Attributes.text_solid_fill:type_name -> rv.data.Color
	47,  // 64: rv.data.Graphics.Text.Attributes.text_gradient_fill:type_name -> rv.data.Graphics.Text.GradientFill
	12,  // 65: rv.data.Graphics.Text.Attributes.Underline.style:type_name -> rv.data.Graphics.Text.Attributes.Underline.Style
	13,  // 66: rv.data.Graphics.Text.Attributes.Underline.pattern:type_name -> rv.data.Graphics.Text.Attributes.Underline.Pattern
	14,  // 67: rv.data.Graphics.Text.Attributes.Paragraph.alignment:type_name -> rv.data.Graphics.Text.Attributes.Paragraph.Alignment
	54,  // 68: rv.data.Graphics.Text.Attributes.Paragraph.tab_stops:type_name -> rv.data.Graphics.Text.Attributes.Paragraph.TabStop
	55,  // 69: rv.data.Graphics.Text.Attributes.Paragraph.text_list:type_name -> rv.data.Graphics.Text.Attributes.Paragraph.TextList
	55,  // 70: rv.data.Graphics.Text.Attributes.Paragraph.text_lists:type_name -> rv.data.Graphics.Text.Attributes.Paragraph.TextList
	75,  // 71: rv.data.Graphics.Text.Attributes.CustomAttribute.range:type_name -> rv.data.IntRange
	17,  // 72: rv.data.Graphics.Text.Attributes.CustomAttribute.capitalization:type_name -> rv.data.Graphics.Text.Attributes.CustomAttribute.Capitalization
	47,  // 73: rv.data.Graphics.Text.Attributes.CustomAttribute.text_gradient_fill:type_name -> rv.data.Graphics.Text.GradientFill
	15,  // 74: rv.data.Graphics.Text.Attributes.Paragraph.TabStop.alignment:type_name -> rv.data.Graphics.Text.Attributes.Paragraph.TabStop.Alignment
	16,  // 75: rv.data.Graphics.Text.Attributes.Paragraph.TextList.number_type:type_name -> rv.data.Graphics.Text.Attributes.Paragraph.TextList.NumberType
	73,  // 76: rv.data.Media.Metadata.manufacture_url:type_name -> rv.data.URL
	18,  // 77: rv.data.Media.VideoDevice.type:type_name -> rv.data.Media.VideoDevice.Type
	76,  // 78: rv.data.Media.VideoDevice.audio_routing:type_name -> rv.data.DigitalAudio.Device.Routing
	70,  // 79: rv.data.Media.AudioProperties.audio_channels:type_name -> rv.data.Media.Audio.Channel
	19,  // 80: rv.data.Media.TransportProperties.playback_behavior:type_name -> rv.data.Media.TransportProperties.PlaybackBehavior
	20,  // 81: rv.data.Media.DrawingProperties.scale_behavior:type_name -> rv.data.Media.DrawingProperties.ScaleBehavior
	21,  // 82: rv.data.Media.DrawingProperties.scale_alignment:type_name -> rv.data.Media.DrawingProperties.ScaleAlignment
	30,  // 83: rv.data.Media.DrawingProperties.natural_size:type_name -> rv.data.Graphics.Size
	28,  // 84: rv.data.Media.DrawingProperties.custom_image_bounds:type_name -> rv.data.Graphics.Rect
	22,  // 85: rv.data.Media.DrawingProperties.native_rotation:type_name -> rv.data.Media.DrawingProperties.NativeRotationType
	72,  // 86: rv.data.Media.DrawingProperties.selected_effect_preset_uuid:type_name -> rv.data.UUID
	77,  // 87: rv.data.Media.DrawingProperties.effects:type_name -> rv.data.Effect
	31,  // 88: rv.data.Media.DrawingProperties.crop_insets:type_name -> rv.data.Graphics.EdgeInsets
	23,  // 89: rv.data.Media.VideoProperties.field_type:type_name -> rv.data.Media.VideoProperties.FieldType
	24,  // 90: rv.data.Media.VideoProperties.end_behavior:type_name -> rv.data.Media.VideoProperties.EndBehavior
	57,  // 91: rv.data.Media.LiveVideoProperties.video_device:type_name -> rv.data.Media.VideoDevice
	58,  // 92: rv.data.Media.LiveVideoProperties.audio_device:type_name -> rv.data.Media.AudioDevice
	60,  // 93: rv.data.Media.AudioTypeProperties.audio:type_name -> rv.data.Media.AudioProperties
	61,  // 94: rv.data.Media.AudioTypeProperties.transport:type_name -> rv.data.Media.TransportProperties
	62,  // 95: rv.data.Media.ImageTypeProperties.drawing:type_name -> rv.data.Media.DrawingProperties
	62,  // 96: rv.data.Media.VideoTypeProperties.drawing:type_name -> rv.data.Media.DrawingProperties
	60,  // 97: rv.data.Media.VideoTypeProperties.audio:type_name -> rv.data.Media.AudioProperties
	61,  // 98: rv.data.Media.VideoTypeProperties.transport:type_name -> rv.data.Media.TransportProperties
	63,  // 99: rv.data.Media.VideoTypeProperties.video:type_name -> rv.data.Media.VideoProperties
	62,  // 100: rv.data.Media.LiveVideoTypeProperties.drawing:type_name -> rv.data.Media.DrawingProperties
	60,  // 101: rv.data.Media.LiveVideoTypeProperties.audio:type_name -> rv.data.Media.AudioProperties
	64,  // 102: rv.data.Media.LiveVideoTypeProperties.live_video:type_name -> rv.data.Media.LiveVideoProperties
	62,  // 103: rv.data.Media.WebContentTypeProperties.drawing:type_name -> rv.data.Media.DrawingProperties
	73,  // 104: rv.data.Media.WebContentTypeProperties.url:type_name -> rv.data.URL
	71,  // 105: rv.data.Media.Audio.Channel.outputs:type_name -> rv.data.Media.Audio.Channel.Output
	106, // [106:106] is the sub-list for method output_type
	106, // [106:106] is the sub-list for method input_type
	106, // [106:106] is the sub-list for extension type_name
	106, // [106:106] is the sub-list for extension extendee
	0,   // [0:106] is the sub-list for field type_name
}

func init() { file_graphicsData_proto_init() }
func file_graphicsData_proto_init() {
	if File_graphicsData_proto != nil {
		return
	}
	file_basicTypes_proto_init()
	file_effects_proto_init()
	file_digitalAudio_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_graphicsData_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Rect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_EdgeInsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Fill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Gradient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Shadow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Stroke); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Feather); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Path_BezierPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Path_Shape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Path_Shape_RoundedRectangle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Path_Shape_Arrow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Path_Shape_Polygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Path_Shape_Star); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Gradient_ColorStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text_LineFillMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text_GradientFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text_ChordPro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text_Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text_Attributes_Font); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text_Attributes_Underline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text_Attributes_Paragraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text_Attributes_CustomAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text_Attributes_Paragraph_TabStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graphics_Text_Attributes_Paragraph_TextList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_VideoDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_AudioDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_AudioProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_TransportProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_DrawingProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_VideoProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_LiveVideoProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_AudioTypeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_ImageTypeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_VideoTypeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_LiveVideoTypeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_WebContentTypeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_Audio_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphicsData_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_Audio_Channel_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_graphicsData_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Media_Audio_)(nil),
		(*Media_Image)(nil),
		(*Media_Video)(nil),
		(*Media_LiveVideo)(nil),
		(*Media_WebContent)(nil),
	}
	file_graphicsData_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Graphics_Element_TextLineMask)(nil),
	}
	file_graphicsData_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Graphics_Fill_Color)(nil),
		(*Graphics_Fill_Gradient)(nil),
		(*Graphics_Fill_Media)(nil),
	}
	file_graphicsData_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Graphics_Path_Shape_RoundedRectangle_)(nil),
		(*Graphics_Path_Shape_Polygon_)(nil),
		(*Graphics_Path_Shape_Star_)(nil),
		(*Graphics_Path_Shape_Arrow_)(nil),
	}
	file_graphicsData_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Graphics_Text_Attributes_TextSolidFill)(nil),
		(*Graphics_Text_Attributes_TextGradientFill)(nil),
	}
	file_graphicsData_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Graphics_Text_Attributes_CustomAttribute_Capitalization_)(nil),
		(*Graphics_Text_Attributes_CustomAttribute_OriginalFontSize)(nil),
		(*Graphics_Text_Attributes_CustomAttribute_FontScaleFactor)(nil),
		(*Graphics_Text_Attributes_CustomAttribute_TextGradientFill)(nil),
		(*Graphics_Text_Attributes_CustomAttribute_ShouldPreserveForegroundColor)(nil),
		(*Graphics_Text_Attributes_CustomAttribute_Chord)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_graphicsData_proto_rawDesc,
			NumEnums:      25,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_graphicsData_proto_goTypes,
		DependencyIndexes: file_graphicsData_proto_depIdxs,
		EnumInfos:         file_graphicsData_proto_enumTypes,
		MessageInfos:      file_graphicsData_proto_msgTypes,
	}.Build()
	File_graphicsData_proto = out.File
	file_graphicsData_proto_rawDesc = nil
	file_graphicsData_proto_goTypes = nil
	file_graphicsData_proto_depIdxs = nil
}
